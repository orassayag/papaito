#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.3607
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Dal
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[System.Data.Linq.Mapping.DatabaseAttribute(Name="Papaito3")]
	public partial class PapaitoDalDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertAdminUser(AdminUser instance);
    partial void UpdateAdminUser(AdminUser instance);
    partial void DeleteAdminUser(AdminUser instance);
    partial void InsertWillComePic(WillComePic instance);
    partial void UpdateWillComePic(WillComePic instance);
    partial void DeleteWillComePic(WillComePic instance);
    partial void InsertAllArtistPic(AllArtistPic instance);
    partial void UpdateAllArtistPic(AllArtistPic instance);
    partial void DeleteAllArtistPic(AllArtistPic instance);
    partial void InsertComplexAbout(ComplexAbout instance);
    partial void UpdateComplexAbout(ComplexAbout instance);
    partial void DeleteComplexAbout(ComplexAbout instance);
    partial void InsertComplexRoomPic(ComplexRoomPic instance);
    partial void UpdateComplexRoomPic(ComplexRoomPic instance);
    partial void DeleteComplexRoomPic(ComplexRoomPic instance);
    partial void InsertDesignPic(DesignPic instance);
    partial void UpdateDesignPic(DesignPic instance);
    partial void DeleteDesignPic(DesignPic instance);
    partial void InsertDesignText(DesignText instance);
    partial void UpdateDesignText(DesignText instance);
    partial void DeleteDesignText(DesignText instance);
    partial void InsertGallery(Gallery instance);
    partial void UpdateGallery(Gallery instance);
    partial void DeleteGallery(Gallery instance);
    partial void InsertHeaderPic(HeaderPic instance);
    partial void UpdateHeaderPic(HeaderPic instance);
    partial void DeleteHeaderPic(HeaderPic instance);
    partial void InsertHomeContactAbout(HomeContactAbout instance);
    partial void UpdateHomeContactAbout(HomeContactAbout instance);
    partial void DeleteHomeContactAbout(HomeContactAbout instance);
    partial void InsertLastNew(LastNew instance);
    partial void UpdateLastNew(LastNew instance);
    partial void DeleteLastNew(LastNew instance);
    partial void InsertLastRecordPic(LastRecordPic instance);
    partial void UpdateLastRecordPic(LastRecordPic instance);
    partial void DeleteLastRecordPic(LastRecordPic instance);
    partial void InsertLog(Log instance);
    partial void UpdateLog(Log instance);
    partial void DeleteLog(Log instance);
    partial void InsertMainContactAbout(MainContactAbout instance);
    partial void UpdateMainContactAbout(MainContactAbout instance);
    partial void DeleteMainContactAbout(MainContactAbout instance);
    partial void InsertMainContactAboutPic(MainContactAboutPic instance);
    partial void UpdateMainContactAboutPic(MainContactAboutPic instance);
    partial void DeleteMainContactAboutPic(MainContactAboutPic instance);
    partial void InsertProduction(Production instance);
    partial void UpdateProduction(Production instance);
    partial void DeleteProduction(Production instance);
    partial void InsertPrPic(PrPic instance);
    partial void UpdatePrPic(PrPic instance);
    partial void DeletePrPic(PrPic instance);
    partial void InsertPrText(PrText instance);
    partial void UpdatePrText(PrText instance);
    partial void DeletePrText(PrText instance);
    partial void InsertPublishPic(PublishPic instance);
    partial void UpdatePublishPic(PublishPic instance);
    partial void DeletePublishPic(PublishPic instance);
    partial void InsertSong(Song instance);
    partial void UpdateSong(Song instance);
    partial void DeleteSong(Song instance);
    partial void InsertStaff(Staff instance);
    partial void UpdateStaff(Staff instance);
    partial void DeleteStaff(Staff instance);
    partial void InsertStudioAbout(StudioAbout instance);
    partial void UpdateStudioAbout(StudioAbout instance);
    partial void DeleteStudioAbout(StudioAbout instance);
    partial void InsertStudioRoomPic(StudioRoomPic instance);
    partial void UpdateStudioRoomPic(StudioRoomPic instance);
    partial void DeleteStudioRoomPic(StudioRoomPic instance);
    #endregion
		
		public PapaitoDalDataContext() : 
				base(global::Dal.Properties.Settings.Default.Papaito3ConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public PapaitoDalDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public PapaitoDalDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public PapaitoDalDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public PapaitoDalDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<AdminUser> AdminUsers
		{
			get
			{
				return this.GetTable<AdminUser>();
			}
		}
		
		public System.Data.Linq.Table<WillComePic> WillComePics
		{
			get
			{
				return this.GetTable<WillComePic>();
			}
		}
		
		public System.Data.Linq.Table<AllArtistPic> AllArtistPics
		{
			get
			{
				return this.GetTable<AllArtistPic>();
			}
		}
		
		public System.Data.Linq.Table<ComplexAbout> ComplexAbouts
		{
			get
			{
				return this.GetTable<ComplexAbout>();
			}
		}
		
		public System.Data.Linq.Table<ComplexRoomPic> ComplexRoomPics
		{
			get
			{
				return this.GetTable<ComplexRoomPic>();
			}
		}
		
		public System.Data.Linq.Table<DesignPic> DesignPics
		{
			get
			{
				return this.GetTable<DesignPic>();
			}
		}
		
		public System.Data.Linq.Table<DesignText> DesignTexts
		{
			get
			{
				return this.GetTable<DesignText>();
			}
		}
		
		public System.Data.Linq.Table<Gallery> Galleries
		{
			get
			{
				return this.GetTable<Gallery>();
			}
		}
		
		public System.Data.Linq.Table<HeaderPic> HeaderPics
		{
			get
			{
				return this.GetTable<HeaderPic>();
			}
		}
		
		public System.Data.Linq.Table<HomeContactAbout> HomeContactAbouts
		{
			get
			{
				return this.GetTable<HomeContactAbout>();
			}
		}
		
		public System.Data.Linq.Table<LastNew> LastNews
		{
			get
			{
				return this.GetTable<LastNew>();
			}
		}
		
		public System.Data.Linq.Table<LastRecordPic> LastRecordPics
		{
			get
			{
				return this.GetTable<LastRecordPic>();
			}
		}
		
		public System.Data.Linq.Table<Log> Logs
		{
			get
			{
				return this.GetTable<Log>();
			}
		}
		
		public System.Data.Linq.Table<MainContactAbout> MainContactAbouts
		{
			get
			{
				return this.GetTable<MainContactAbout>();
			}
		}
		
		public System.Data.Linq.Table<MainContactAboutPic> MainContactAboutPics
		{
			get
			{
				return this.GetTable<MainContactAboutPic>();
			}
		}
		
		public System.Data.Linq.Table<Production> Productions
		{
			get
			{
				return this.GetTable<Production>();
			}
		}
		
		public System.Data.Linq.Table<PrPic> PrPics
		{
			get
			{
				return this.GetTable<PrPic>();
			}
		}
		
		public System.Data.Linq.Table<PrText> PrTexts
		{
			get
			{
				return this.GetTable<PrText>();
			}
		}
		
		public System.Data.Linq.Table<PublishPic> PublishPics
		{
			get
			{
				return this.GetTable<PublishPic>();
			}
		}
		
		public System.Data.Linq.Table<Song> Songs
		{
			get
			{
				return this.GetTable<Song>();
			}
		}
		
		public System.Data.Linq.Table<Staff> Staffs
		{
			get
			{
				return this.GetTable<Staff>();
			}
		}
		
		public System.Data.Linq.Table<StudioAbout> StudioAbouts
		{
			get
			{
				return this.GetTable<StudioAbout>();
			}
		}
		
		public System.Data.Linq.Table<StudioRoomPic> StudioRoomPics
		{
			get
			{
				return this.GetTable<StudioRoomPic>();
			}
		}
	}
	
	[Table(Name="dbo.AdminUser")]
	public partial class AdminUser : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _LoginID;
		
		private string _UserID;
		
		private string _Password;
		
		private System.DateTime _CreateTime;
		
		private System.DateTime _LastLogin;
		
		private byte _Active;
		
		private string _spCreateTime;
		
		private string _spLastLogin;
		
		private string _spActive;
		
		private System.DateTime _LastUpdate;
		
		private string _spLastUpdate;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnLoginIDChanging(string value);
    partial void OnLoginIDChanged();
    partial void OnUserIDChanging(string value);
    partial void OnUserIDChanged();
    partial void OnPasswordChanging(string value);
    partial void OnPasswordChanged();
    partial void OnCreateTimeChanging(System.DateTime value);
    partial void OnCreateTimeChanged();
    partial void OnLastLoginChanging(System.DateTime value);
    partial void OnLastLoginChanged();
    partial void OnActiveChanging(byte value);
    partial void OnActiveChanged();
    partial void OnspCreateTimeChanging(string value);
    partial void OnspCreateTimeChanged();
    partial void OnspLastLoginChanging(string value);
    partial void OnspLastLoginChanged();
    partial void OnspActiveChanging(string value);
    partial void OnspActiveChanged();
    partial void OnLastUpdateChanging(System.DateTime value);
    partial void OnLastUpdateChanged();
    partial void OnspLastUpdateChanging(string value);
    partial void OnspLastUpdateChanged();
    #endregion
		
		public AdminUser()
		{
			OnCreated();
		}
		
		[Column(Storage="_LoginID", DbType="NVarChar(50) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string LoginID
		{
			get
			{
				return this._LoginID;
			}
			set
			{
				if ((this._LoginID != value))
				{
					this.OnLoginIDChanging(value);
					this.SendPropertyChanging();
					this._LoginID = value;
					this.SendPropertyChanged("LoginID");
					this.OnLoginIDChanged();
				}
			}
		}
		
		[Column(Storage="_UserID", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string UserID
		{
			get
			{
				return this._UserID;
			}
			set
			{
				if ((this._UserID != value))
				{
					this.OnUserIDChanging(value);
					this.SendPropertyChanging();
					this._UserID = value;
					this.SendPropertyChanged("UserID");
					this.OnUserIDChanged();
				}
			}
		}
		
		[Column(Storage="_Password", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string Password
		{
			get
			{
				return this._Password;
			}
			set
			{
				if ((this._Password != value))
				{
					this.OnPasswordChanging(value);
					this.SendPropertyChanging();
					this._Password = value;
					this.SendPropertyChanged("Password");
					this.OnPasswordChanged();
				}
			}
		}
		
		[Column(Storage="_CreateTime", DbType="DateTime NOT NULL")]
		public System.DateTime CreateTime
		{
			get
			{
				return this._CreateTime;
			}
			set
			{
				if ((this._CreateTime != value))
				{
					this.OnCreateTimeChanging(value);
					this.SendPropertyChanging();
					this._CreateTime = value;
					this.SendPropertyChanged("CreateTime");
					this.OnCreateTimeChanged();
				}
			}
		}
		
		[Column(Storage="_LastLogin", DbType="DateTime NOT NULL")]
		public System.DateTime LastLogin
		{
			get
			{
				return this._LastLogin;
			}
			set
			{
				if ((this._LastLogin != value))
				{
					this.OnLastLoginChanging(value);
					this.SendPropertyChanging();
					this._LastLogin = value;
					this.SendPropertyChanged("LastLogin");
					this.OnLastLoginChanged();
				}
			}
		}
		
		[Column(Storage="_Active", DbType="TinyInt NOT NULL")]
		public byte Active
		{
			get
			{
				return this._Active;
			}
			set
			{
				if ((this._Active != value))
				{
					this.OnActiveChanging(value);
					this.SendPropertyChanging();
					this._Active = value;
					this.SendPropertyChanged("Active");
					this.OnActiveChanged();
				}
			}
		}
		
		[Column(Storage="_spCreateTime", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string spCreateTime
		{
			get
			{
				return this._spCreateTime;
			}
			set
			{
				if ((this._spCreateTime != value))
				{
					this.OnspCreateTimeChanging(value);
					this.SendPropertyChanging();
					this._spCreateTime = value;
					this.SendPropertyChanged("spCreateTime");
					this.OnspCreateTimeChanged();
				}
			}
		}
		
		[Column(Storage="_spLastLogin", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string spLastLogin
		{
			get
			{
				return this._spLastLogin;
			}
			set
			{
				if ((this._spLastLogin != value))
				{
					this.OnspLastLoginChanging(value);
					this.SendPropertyChanging();
					this._spLastLogin = value;
					this.SendPropertyChanged("spLastLogin");
					this.OnspLastLoginChanged();
				}
			}
		}
		
		[Column(Storage="_spActive", DbType="NVarChar(20) NOT NULL", CanBeNull=false)]
		public string spActive
		{
			get
			{
				return this._spActive;
			}
			set
			{
				if ((this._spActive != value))
				{
					this.OnspActiveChanging(value);
					this.SendPropertyChanging();
					this._spActive = value;
					this.SendPropertyChanged("spActive");
					this.OnspActiveChanged();
				}
			}
		}
		
		[Column(Storage="_LastUpdate", DbType="DateTime NOT NULL")]
		public System.DateTime LastUpdate
		{
			get
			{
				return this._LastUpdate;
			}
			set
			{
				if ((this._LastUpdate != value))
				{
					this.OnLastUpdateChanging(value);
					this.SendPropertyChanging();
					this._LastUpdate = value;
					this.SendPropertyChanged("LastUpdate");
					this.OnLastUpdateChanged();
				}
			}
		}
		
		[Column(Storage="_spLastUpdate", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string spLastUpdate
		{
			get
			{
				return this._spLastUpdate;
			}
			set
			{
				if ((this._spLastUpdate != value))
				{
					this.OnspLastUpdateChanging(value);
					this.SendPropertyChanging();
					this._spLastUpdate = value;
					this.SendPropertyChanged("spLastUpdate");
					this.OnspLastUpdateChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.WillComePic")]
	public partial class WillComePic : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _PicID;
		
		private string _PicColorFullPath;
		
		private string _PicBWFullPath;
		
		private string _PicColorRelativePath;
		
		private string _PicBWRelativePath;
		
		private int _PicPlace;
		
		private string _PicName;
		
		private byte _Active;
		
		private System.DateTime _UploadTime;
		
		private string _spUploadTime;
		
		private string _spActive;
		
		private System.DateTime _LastUpdate;
		
		private string _spLastUpdate;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnPicIDChanging(string value);
    partial void OnPicIDChanged();
    partial void OnPicColorFullPathChanging(string value);
    partial void OnPicColorFullPathChanged();
    partial void OnPicBWFullPathChanging(string value);
    partial void OnPicBWFullPathChanged();
    partial void OnPicColorRelativePathChanging(string value);
    partial void OnPicColorRelativePathChanged();
    partial void OnPicBWRelativePathChanging(string value);
    partial void OnPicBWRelativePathChanged();
    partial void OnPicPlaceChanging(int value);
    partial void OnPicPlaceChanged();
    partial void OnPicNameChanging(string value);
    partial void OnPicNameChanged();
    partial void OnActiveChanging(byte value);
    partial void OnActiveChanged();
    partial void OnUploadTimeChanging(System.DateTime value);
    partial void OnUploadTimeChanged();
    partial void OnspUploadTimeChanging(string value);
    partial void OnspUploadTimeChanged();
    partial void OnspActiveChanging(string value);
    partial void OnspActiveChanged();
    partial void OnLastUpdateChanging(System.DateTime value);
    partial void OnLastUpdateChanged();
    partial void OnspLastUpdateChanging(string value);
    partial void OnspLastUpdateChanged();
    #endregion
		
		public WillComePic()
		{
			OnCreated();
		}
		
		[Column(Storage="_PicID", DbType="NVarChar(50) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string PicID
		{
			get
			{
				return this._PicID;
			}
			set
			{
				if ((this._PicID != value))
				{
					this.OnPicIDChanging(value);
					this.SendPropertyChanging();
					this._PicID = value;
					this.SendPropertyChanged("PicID");
					this.OnPicIDChanged();
				}
			}
		}
		
		[Column(Storage="_PicColorFullPath", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string PicColorFullPath
		{
			get
			{
				return this._PicColorFullPath;
			}
			set
			{
				if ((this._PicColorFullPath != value))
				{
					this.OnPicColorFullPathChanging(value);
					this.SendPropertyChanging();
					this._PicColorFullPath = value;
					this.SendPropertyChanged("PicColorFullPath");
					this.OnPicColorFullPathChanged();
				}
			}
		}
		
		[Column(Storage="_PicBWFullPath", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string PicBWFullPath
		{
			get
			{
				return this._PicBWFullPath;
			}
			set
			{
				if ((this._PicBWFullPath != value))
				{
					this.OnPicBWFullPathChanging(value);
					this.SendPropertyChanging();
					this._PicBWFullPath = value;
					this.SendPropertyChanged("PicBWFullPath");
					this.OnPicBWFullPathChanged();
				}
			}
		}
		
		[Column(Storage="_PicColorRelativePath", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string PicColorRelativePath
		{
			get
			{
				return this._PicColorRelativePath;
			}
			set
			{
				if ((this._PicColorRelativePath != value))
				{
					this.OnPicColorRelativePathChanging(value);
					this.SendPropertyChanging();
					this._PicColorRelativePath = value;
					this.SendPropertyChanged("PicColorRelativePath");
					this.OnPicColorRelativePathChanged();
				}
			}
		}
		
		[Column(Storage="_PicBWRelativePath", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string PicBWRelativePath
		{
			get
			{
				return this._PicBWRelativePath;
			}
			set
			{
				if ((this._PicBWRelativePath != value))
				{
					this.OnPicBWRelativePathChanging(value);
					this.SendPropertyChanging();
					this._PicBWRelativePath = value;
					this.SendPropertyChanged("PicBWRelativePath");
					this.OnPicBWRelativePathChanged();
				}
			}
		}
		
		[Column(Storage="_PicPlace", DbType="Int NOT NULL")]
		public int PicPlace
		{
			get
			{
				return this._PicPlace;
			}
			set
			{
				if ((this._PicPlace != value))
				{
					this.OnPicPlaceChanging(value);
					this.SendPropertyChanging();
					this._PicPlace = value;
					this.SendPropertyChanged("PicPlace");
					this.OnPicPlaceChanged();
				}
			}
		}
		
		[Column(Storage="_PicName", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string PicName
		{
			get
			{
				return this._PicName;
			}
			set
			{
				if ((this._PicName != value))
				{
					this.OnPicNameChanging(value);
					this.SendPropertyChanging();
					this._PicName = value;
					this.SendPropertyChanged("PicName");
					this.OnPicNameChanged();
				}
			}
		}
		
		[Column(Storage="_Active", DbType="TinyInt NOT NULL")]
		public byte Active
		{
			get
			{
				return this._Active;
			}
			set
			{
				if ((this._Active != value))
				{
					this.OnActiveChanging(value);
					this.SendPropertyChanging();
					this._Active = value;
					this.SendPropertyChanged("Active");
					this.OnActiveChanged();
				}
			}
		}
		
		[Column(Storage="_UploadTime", DbType="DateTime NOT NULL")]
		public System.DateTime UploadTime
		{
			get
			{
				return this._UploadTime;
			}
			set
			{
				if ((this._UploadTime != value))
				{
					this.OnUploadTimeChanging(value);
					this.SendPropertyChanging();
					this._UploadTime = value;
					this.SendPropertyChanged("UploadTime");
					this.OnUploadTimeChanged();
				}
			}
		}
		
		[Column(Storage="_spUploadTime", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string spUploadTime
		{
			get
			{
				return this._spUploadTime;
			}
			set
			{
				if ((this._spUploadTime != value))
				{
					this.OnspUploadTimeChanging(value);
					this.SendPropertyChanging();
					this._spUploadTime = value;
					this.SendPropertyChanged("spUploadTime");
					this.OnspUploadTimeChanged();
				}
			}
		}
		
		[Column(Storage="_spActive", DbType="NVarChar(20) NOT NULL", CanBeNull=false)]
		public string spActive
		{
			get
			{
				return this._spActive;
			}
			set
			{
				if ((this._spActive != value))
				{
					this.OnspActiveChanging(value);
					this.SendPropertyChanging();
					this._spActive = value;
					this.SendPropertyChanged("spActive");
					this.OnspActiveChanged();
				}
			}
		}
		
		[Column(Storage="_LastUpdate", DbType="DateTime NOT NULL")]
		public System.DateTime LastUpdate
		{
			get
			{
				return this._LastUpdate;
			}
			set
			{
				if ((this._LastUpdate != value))
				{
					this.OnLastUpdateChanging(value);
					this.SendPropertyChanging();
					this._LastUpdate = value;
					this.SendPropertyChanged("LastUpdate");
					this.OnLastUpdateChanged();
				}
			}
		}
		
		[Column(Storage="_spLastUpdate", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string spLastUpdate
		{
			get
			{
				return this._spLastUpdate;
			}
			set
			{
				if ((this._spLastUpdate != value))
				{
					this.OnspLastUpdateChanging(value);
					this.SendPropertyChanging();
					this._spLastUpdate = value;
					this.SendPropertyChanged("spLastUpdate");
					this.OnspLastUpdateChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.AllArtistPic")]
	public partial class AllArtistPic : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _PicID;
		
		private string _GalleryID;
		
		private int _PicPlace;
		
		private string _PicFullPath;
		
		private string _PicRelativePath;
		
		private string _PicName;
		
		private byte _Active;
		
		private System.DateTime _UploadTime;
		
		private string _spUploadTime;
		
		private string _spActive;
		
		private System.DateTime _LastUpdate;
		
		private string _spLastUpdate;
		
		private EntityRef<Gallery> _Gallery;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnPicIDChanging(string value);
    partial void OnPicIDChanged();
    partial void OnGalleryIDChanging(string value);
    partial void OnGalleryIDChanged();
    partial void OnPicPlaceChanging(int value);
    partial void OnPicPlaceChanged();
    partial void OnPicFullPathChanging(string value);
    partial void OnPicFullPathChanged();
    partial void OnPicRelativePathChanging(string value);
    partial void OnPicRelativePathChanged();
    partial void OnPicNameChanging(string value);
    partial void OnPicNameChanged();
    partial void OnActiveChanging(byte value);
    partial void OnActiveChanged();
    partial void OnUploadTimeChanging(System.DateTime value);
    partial void OnUploadTimeChanged();
    partial void OnspUploadTimeChanging(string value);
    partial void OnspUploadTimeChanged();
    partial void OnspActiveChanging(string value);
    partial void OnspActiveChanged();
    partial void OnLastUpdateChanging(System.DateTime value);
    partial void OnLastUpdateChanged();
    partial void OnspLastUpdateChanging(string value);
    partial void OnspLastUpdateChanged();
    #endregion
		
		public AllArtistPic()
		{
			this._Gallery = default(EntityRef<Gallery>);
			OnCreated();
		}
		
		[Column(Storage="_PicID", DbType="NVarChar(50) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string PicID
		{
			get
			{
				return this._PicID;
			}
			set
			{
				if ((this._PicID != value))
				{
					this.OnPicIDChanging(value);
					this.SendPropertyChanging();
					this._PicID = value;
					this.SendPropertyChanged("PicID");
					this.OnPicIDChanged();
				}
			}
		}
		
		[Column(Storage="_GalleryID", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string GalleryID
		{
			get
			{
				return this._GalleryID;
			}
			set
			{
				if ((this._GalleryID != value))
				{
					if (this._Gallery.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnGalleryIDChanging(value);
					this.SendPropertyChanging();
					this._GalleryID = value;
					this.SendPropertyChanged("GalleryID");
					this.OnGalleryIDChanged();
				}
			}
		}
		
		[Column(Storage="_PicPlace", DbType="Int NOT NULL")]
		public int PicPlace
		{
			get
			{
				return this._PicPlace;
			}
			set
			{
				if ((this._PicPlace != value))
				{
					this.OnPicPlaceChanging(value);
					this.SendPropertyChanging();
					this._PicPlace = value;
					this.SendPropertyChanged("PicPlace");
					this.OnPicPlaceChanged();
				}
			}
		}
		
		[Column(Storage="_PicFullPath", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string PicFullPath
		{
			get
			{
				return this._PicFullPath;
			}
			set
			{
				if ((this._PicFullPath != value))
				{
					this.OnPicFullPathChanging(value);
					this.SendPropertyChanging();
					this._PicFullPath = value;
					this.SendPropertyChanged("PicFullPath");
					this.OnPicFullPathChanged();
				}
			}
		}
		
		[Column(Storage="_PicRelativePath", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string PicRelativePath
		{
			get
			{
				return this._PicRelativePath;
			}
			set
			{
				if ((this._PicRelativePath != value))
				{
					this.OnPicRelativePathChanging(value);
					this.SendPropertyChanging();
					this._PicRelativePath = value;
					this.SendPropertyChanged("PicRelativePath");
					this.OnPicRelativePathChanged();
				}
			}
		}
		
		[Column(Storage="_PicName", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string PicName
		{
			get
			{
				return this._PicName;
			}
			set
			{
				if ((this._PicName != value))
				{
					this.OnPicNameChanging(value);
					this.SendPropertyChanging();
					this._PicName = value;
					this.SendPropertyChanged("PicName");
					this.OnPicNameChanged();
				}
			}
		}
		
		[Column(Storage="_Active", DbType="TinyInt NOT NULL")]
		public byte Active
		{
			get
			{
				return this._Active;
			}
			set
			{
				if ((this._Active != value))
				{
					this.OnActiveChanging(value);
					this.SendPropertyChanging();
					this._Active = value;
					this.SendPropertyChanged("Active");
					this.OnActiveChanged();
				}
			}
		}
		
		[Column(Storage="_UploadTime", DbType="DateTime NOT NULL")]
		public System.DateTime UploadTime
		{
			get
			{
				return this._UploadTime;
			}
			set
			{
				if ((this._UploadTime != value))
				{
					this.OnUploadTimeChanging(value);
					this.SendPropertyChanging();
					this._UploadTime = value;
					this.SendPropertyChanged("UploadTime");
					this.OnUploadTimeChanged();
				}
			}
		}
		
		[Column(Storage="_spUploadTime", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string spUploadTime
		{
			get
			{
				return this._spUploadTime;
			}
			set
			{
				if ((this._spUploadTime != value))
				{
					this.OnspUploadTimeChanging(value);
					this.SendPropertyChanging();
					this._spUploadTime = value;
					this.SendPropertyChanged("spUploadTime");
					this.OnspUploadTimeChanged();
				}
			}
		}
		
		[Column(Storage="_spActive", DbType="NVarChar(20) NOT NULL", CanBeNull=false)]
		public string spActive
		{
			get
			{
				return this._spActive;
			}
			set
			{
				if ((this._spActive != value))
				{
					this.OnspActiveChanging(value);
					this.SendPropertyChanging();
					this._spActive = value;
					this.SendPropertyChanged("spActive");
					this.OnspActiveChanged();
				}
			}
		}
		
		[Column(Storage="_LastUpdate", DbType="DateTime NOT NULL")]
		public System.DateTime LastUpdate
		{
			get
			{
				return this._LastUpdate;
			}
			set
			{
				if ((this._LastUpdate != value))
				{
					this.OnLastUpdateChanging(value);
					this.SendPropertyChanging();
					this._LastUpdate = value;
					this.SendPropertyChanged("LastUpdate");
					this.OnLastUpdateChanged();
				}
			}
		}
		
		[Column(Storage="_spLastUpdate", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string spLastUpdate
		{
			get
			{
				return this._spLastUpdate;
			}
			set
			{
				if ((this._spLastUpdate != value))
				{
					this.OnspLastUpdateChanging(value);
					this.SendPropertyChanging();
					this._spLastUpdate = value;
					this.SendPropertyChanged("spLastUpdate");
					this.OnspLastUpdateChanged();
				}
			}
		}
		
		[Association(Name="Gallery_AllArtistPic", Storage="_Gallery", ThisKey="GalleryID", OtherKey="GalleryID", IsForeignKey=true)]
		public Gallery Gallery
		{
			get
			{
				return this._Gallery.Entity;
			}
			set
			{
				Gallery previousValue = this._Gallery.Entity;
				if (((previousValue != value) 
							|| (this._Gallery.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Gallery.Entity = null;
						previousValue.AllArtistPics.Remove(this);
					}
					this._Gallery.Entity = value;
					if ((value != null))
					{
						value.AllArtistPics.Add(this);
						this._GalleryID = value.GalleryID;
					}
					else
					{
						this._GalleryID = default(string);
					}
					this.SendPropertyChanged("Gallery");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.ComplexAbout")]
	public partial class ComplexAbout : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _ComplexAboutID;
		
		private string _AboutHe;
		
		private string _AboutEn;
		
		private System.DateTime _LastUpdate;
		
		private string _spLastUpdate;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnComplexAboutIDChanging(string value);
    partial void OnComplexAboutIDChanged();
    partial void OnAboutHeChanging(string value);
    partial void OnAboutHeChanged();
    partial void OnAboutEnChanging(string value);
    partial void OnAboutEnChanged();
    partial void OnLastUpdateChanging(System.DateTime value);
    partial void OnLastUpdateChanged();
    partial void OnspLastUpdateChanging(string value);
    partial void OnspLastUpdateChanged();
    #endregion
		
		public ComplexAbout()
		{
			OnCreated();
		}
		
		[Column(Storage="_ComplexAboutID", DbType="NVarChar(50) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string ComplexAboutID
		{
			get
			{
				return this._ComplexAboutID;
			}
			set
			{
				if ((this._ComplexAboutID != value))
				{
					this.OnComplexAboutIDChanging(value);
					this.SendPropertyChanging();
					this._ComplexAboutID = value;
					this.SendPropertyChanged("ComplexAboutID");
					this.OnComplexAboutIDChanged();
				}
			}
		}
		
		[Column(Storage="_AboutHe", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string AboutHe
		{
			get
			{
				return this._AboutHe;
			}
			set
			{
				if ((this._AboutHe != value))
				{
					this.OnAboutHeChanging(value);
					this.SendPropertyChanging();
					this._AboutHe = value;
					this.SendPropertyChanged("AboutHe");
					this.OnAboutHeChanged();
				}
			}
		}
		
		[Column(Storage="_AboutEn", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string AboutEn
		{
			get
			{
				return this._AboutEn;
			}
			set
			{
				if ((this._AboutEn != value))
				{
					this.OnAboutEnChanging(value);
					this.SendPropertyChanging();
					this._AboutEn = value;
					this.SendPropertyChanged("AboutEn");
					this.OnAboutEnChanged();
				}
			}
		}
		
		[Column(Storage="_LastUpdate", DbType="DateTime NOT NULL")]
		public System.DateTime LastUpdate
		{
			get
			{
				return this._LastUpdate;
			}
			set
			{
				if ((this._LastUpdate != value))
				{
					this.OnLastUpdateChanging(value);
					this.SendPropertyChanging();
					this._LastUpdate = value;
					this.SendPropertyChanged("LastUpdate");
					this.OnLastUpdateChanged();
				}
			}
		}
		
		[Column(Storage="_spLastUpdate", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string spLastUpdate
		{
			get
			{
				return this._spLastUpdate;
			}
			set
			{
				if ((this._spLastUpdate != value))
				{
					this.OnspLastUpdateChanging(value);
					this.SendPropertyChanging();
					this._spLastUpdate = value;
					this.SendPropertyChanged("spLastUpdate");
					this.OnspLastUpdateChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.ComplexRoomPic")]
	public partial class ComplexRoomPic : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _PicID;
		
		private string _RoomName;
		
		private string _PicColorFullPath;
		
		private string _PicBWFullPath;
		
		private string _PicColorRelativePath;
		
		private string _PicBWRelativePath;
		
		private int _PicPlace;
		
		private string _RoomTitleHe;
		
		private string _RoomTitleEn;
		
		private string _RoomTextHe;
		
		private string _RoomTextEn;
		
		private byte _Active;
		
		private System.DateTime _UploadTime;
		
		private string _spLastUpdate;
		
		private System.DateTime _LastUpdate;
		
		private string _spUploadTime;
		
		private string _spActive;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnPicIDChanging(string value);
    partial void OnPicIDChanged();
    partial void OnRoomNameChanging(string value);
    partial void OnRoomNameChanged();
    partial void OnPicColorFullPathChanging(string value);
    partial void OnPicColorFullPathChanged();
    partial void OnPicBWFullPathChanging(string value);
    partial void OnPicBWFullPathChanged();
    partial void OnPicColorRelativePathChanging(string value);
    partial void OnPicColorRelativePathChanged();
    partial void OnPicBWRelativePathChanging(string value);
    partial void OnPicBWRelativePathChanged();
    partial void OnPicPlaceChanging(int value);
    partial void OnPicPlaceChanged();
    partial void OnRoomTitleHeChanging(string value);
    partial void OnRoomTitleHeChanged();
    partial void OnRoomTitleEnChanging(string value);
    partial void OnRoomTitleEnChanged();
    partial void OnRoomTextHeChanging(string value);
    partial void OnRoomTextHeChanged();
    partial void OnRoomTextEnChanging(string value);
    partial void OnRoomTextEnChanged();
    partial void OnActiveChanging(byte value);
    partial void OnActiveChanged();
    partial void OnUploadTimeChanging(System.DateTime value);
    partial void OnUploadTimeChanged();
    partial void OnspLastUpdateChanging(string value);
    partial void OnspLastUpdateChanged();
    partial void OnLastUpdateChanging(System.DateTime value);
    partial void OnLastUpdateChanged();
    partial void OnspUploadTimeChanging(string value);
    partial void OnspUploadTimeChanged();
    partial void OnspActiveChanging(string value);
    partial void OnspActiveChanged();
    #endregion
		
		public ComplexRoomPic()
		{
			OnCreated();
		}
		
		[Column(Storage="_PicID", DbType="NVarChar(50) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string PicID
		{
			get
			{
				return this._PicID;
			}
			set
			{
				if ((this._PicID != value))
				{
					this.OnPicIDChanging(value);
					this.SendPropertyChanging();
					this._PicID = value;
					this.SendPropertyChanged("PicID");
					this.OnPicIDChanged();
				}
			}
		}
		
		[Column(Storage="_RoomName", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string RoomName
		{
			get
			{
				return this._RoomName;
			}
			set
			{
				if ((this._RoomName != value))
				{
					this.OnRoomNameChanging(value);
					this.SendPropertyChanging();
					this._RoomName = value;
					this.SendPropertyChanged("RoomName");
					this.OnRoomNameChanged();
				}
			}
		}
		
		[Column(Storage="_PicColorFullPath", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string PicColorFullPath
		{
			get
			{
				return this._PicColorFullPath;
			}
			set
			{
				if ((this._PicColorFullPath != value))
				{
					this.OnPicColorFullPathChanging(value);
					this.SendPropertyChanging();
					this._PicColorFullPath = value;
					this.SendPropertyChanged("PicColorFullPath");
					this.OnPicColorFullPathChanged();
				}
			}
		}
		
		[Column(Storage="_PicBWFullPath", DbType="NVarChar(MAX)")]
		public string PicBWFullPath
		{
			get
			{
				return this._PicBWFullPath;
			}
			set
			{
				if ((this._PicBWFullPath != value))
				{
					this.OnPicBWFullPathChanging(value);
					this.SendPropertyChanging();
					this._PicBWFullPath = value;
					this.SendPropertyChanged("PicBWFullPath");
					this.OnPicBWFullPathChanged();
				}
			}
		}
		
		[Column(Storage="_PicColorRelativePath", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string PicColorRelativePath
		{
			get
			{
				return this._PicColorRelativePath;
			}
			set
			{
				if ((this._PicColorRelativePath != value))
				{
					this.OnPicColorRelativePathChanging(value);
					this.SendPropertyChanging();
					this._PicColorRelativePath = value;
					this.SendPropertyChanged("PicColorRelativePath");
					this.OnPicColorRelativePathChanged();
				}
			}
		}
		
		[Column(Storage="_PicBWRelativePath", DbType="NVarChar(MAX)")]
		public string PicBWRelativePath
		{
			get
			{
				return this._PicBWRelativePath;
			}
			set
			{
				if ((this._PicBWRelativePath != value))
				{
					this.OnPicBWRelativePathChanging(value);
					this.SendPropertyChanging();
					this._PicBWRelativePath = value;
					this.SendPropertyChanged("PicBWRelativePath");
					this.OnPicBWRelativePathChanged();
				}
			}
		}
		
		[Column(Storage="_PicPlace", DbType="Int NOT NULL")]
		public int PicPlace
		{
			get
			{
				return this._PicPlace;
			}
			set
			{
				if ((this._PicPlace != value))
				{
					this.OnPicPlaceChanging(value);
					this.SendPropertyChanging();
					this._PicPlace = value;
					this.SendPropertyChanged("PicPlace");
					this.OnPicPlaceChanged();
				}
			}
		}
		
		[Column(Storage="_RoomTitleHe", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string RoomTitleHe
		{
			get
			{
				return this._RoomTitleHe;
			}
			set
			{
				if ((this._RoomTitleHe != value))
				{
					this.OnRoomTitleHeChanging(value);
					this.SendPropertyChanging();
					this._RoomTitleHe = value;
					this.SendPropertyChanged("RoomTitleHe");
					this.OnRoomTitleHeChanged();
				}
			}
		}
		
		[Column(Storage="_RoomTitleEn", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string RoomTitleEn
		{
			get
			{
				return this._RoomTitleEn;
			}
			set
			{
				if ((this._RoomTitleEn != value))
				{
					this.OnRoomTitleEnChanging(value);
					this.SendPropertyChanging();
					this._RoomTitleEn = value;
					this.SendPropertyChanged("RoomTitleEn");
					this.OnRoomTitleEnChanged();
				}
			}
		}
		
		[Column(Storage="_RoomTextHe", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string RoomTextHe
		{
			get
			{
				return this._RoomTextHe;
			}
			set
			{
				if ((this._RoomTextHe != value))
				{
					this.OnRoomTextHeChanging(value);
					this.SendPropertyChanging();
					this._RoomTextHe = value;
					this.SendPropertyChanged("RoomTextHe");
					this.OnRoomTextHeChanged();
				}
			}
		}
		
		[Column(Storage="_RoomTextEn", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string RoomTextEn
		{
			get
			{
				return this._RoomTextEn;
			}
			set
			{
				if ((this._RoomTextEn != value))
				{
					this.OnRoomTextEnChanging(value);
					this.SendPropertyChanging();
					this._RoomTextEn = value;
					this.SendPropertyChanged("RoomTextEn");
					this.OnRoomTextEnChanged();
				}
			}
		}
		
		[Column(Storage="_Active", DbType="TinyInt NOT NULL")]
		public byte Active
		{
			get
			{
				return this._Active;
			}
			set
			{
				if ((this._Active != value))
				{
					this.OnActiveChanging(value);
					this.SendPropertyChanging();
					this._Active = value;
					this.SendPropertyChanged("Active");
					this.OnActiveChanged();
				}
			}
		}
		
		[Column(Storage="_UploadTime", DbType="DateTime NOT NULL")]
		public System.DateTime UploadTime
		{
			get
			{
				return this._UploadTime;
			}
			set
			{
				if ((this._UploadTime != value))
				{
					this.OnUploadTimeChanging(value);
					this.SendPropertyChanging();
					this._UploadTime = value;
					this.SendPropertyChanged("UploadTime");
					this.OnUploadTimeChanged();
				}
			}
		}
		
		[Column(Storage="_spLastUpdate", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string spLastUpdate
		{
			get
			{
				return this._spLastUpdate;
			}
			set
			{
				if ((this._spLastUpdate != value))
				{
					this.OnspLastUpdateChanging(value);
					this.SendPropertyChanging();
					this._spLastUpdate = value;
					this.SendPropertyChanged("spLastUpdate");
					this.OnspLastUpdateChanged();
				}
			}
		}
		
		[Column(Storage="_LastUpdate", DbType="DateTime NOT NULL")]
		public System.DateTime LastUpdate
		{
			get
			{
				return this._LastUpdate;
			}
			set
			{
				if ((this._LastUpdate != value))
				{
					this.OnLastUpdateChanging(value);
					this.SendPropertyChanging();
					this._LastUpdate = value;
					this.SendPropertyChanged("LastUpdate");
					this.OnLastUpdateChanged();
				}
			}
		}
		
		[Column(Storage="_spUploadTime", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string spUploadTime
		{
			get
			{
				return this._spUploadTime;
			}
			set
			{
				if ((this._spUploadTime != value))
				{
					this.OnspUploadTimeChanging(value);
					this.SendPropertyChanging();
					this._spUploadTime = value;
					this.SendPropertyChanged("spUploadTime");
					this.OnspUploadTimeChanged();
				}
			}
		}
		
		[Column(Storage="_spActive", DbType="NVarChar(20) NOT NULL", CanBeNull=false)]
		public string spActive
		{
			get
			{
				return this._spActive;
			}
			set
			{
				if ((this._spActive != value))
				{
					this.OnspActiveChanging(value);
					this.SendPropertyChanging();
					this._spActive = value;
					this.SendPropertyChanged("spActive");
					this.OnspActiveChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.DesignPic")]
	public partial class DesignPic : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _PicID;
		
		private string _PicFullPath;
		
		private string _PicRelativePath;
		
		private string _PicName;
		
		private byte _Active;
		
		private System.DateTime _UploadTime;
		
		private string _spUploadTime;
		
		private string _spActive;
		
		private System.DateTime _LastUpdate;
		
		private string _spLastUpdate;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnPicIDChanging(string value);
    partial void OnPicIDChanged();
    partial void OnPicFullPathChanging(string value);
    partial void OnPicFullPathChanged();
    partial void OnPicRelativePathChanging(string value);
    partial void OnPicRelativePathChanged();
    partial void OnPicNameChanging(string value);
    partial void OnPicNameChanged();
    partial void OnActiveChanging(byte value);
    partial void OnActiveChanged();
    partial void OnUploadTimeChanging(System.DateTime value);
    partial void OnUploadTimeChanged();
    partial void OnspUploadTimeChanging(string value);
    partial void OnspUploadTimeChanged();
    partial void OnspActiveChanging(string value);
    partial void OnspActiveChanged();
    partial void OnLastUpdateChanging(System.DateTime value);
    partial void OnLastUpdateChanged();
    partial void OnspLastUpdateChanging(string value);
    partial void OnspLastUpdateChanged();
    #endregion
		
		public DesignPic()
		{
			OnCreated();
		}
		
		[Column(Storage="_PicID", DbType="NVarChar(50) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string PicID
		{
			get
			{
				return this._PicID;
			}
			set
			{
				if ((this._PicID != value))
				{
					this.OnPicIDChanging(value);
					this.SendPropertyChanging();
					this._PicID = value;
					this.SendPropertyChanged("PicID");
					this.OnPicIDChanged();
				}
			}
		}
		
		[Column(Storage="_PicFullPath", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string PicFullPath
		{
			get
			{
				return this._PicFullPath;
			}
			set
			{
				if ((this._PicFullPath != value))
				{
					this.OnPicFullPathChanging(value);
					this.SendPropertyChanging();
					this._PicFullPath = value;
					this.SendPropertyChanged("PicFullPath");
					this.OnPicFullPathChanged();
				}
			}
		}
		
		[Column(Storage="_PicRelativePath", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string PicRelativePath
		{
			get
			{
				return this._PicRelativePath;
			}
			set
			{
				if ((this._PicRelativePath != value))
				{
					this.OnPicRelativePathChanging(value);
					this.SendPropertyChanging();
					this._PicRelativePath = value;
					this.SendPropertyChanged("PicRelativePath");
					this.OnPicRelativePathChanged();
				}
			}
		}
		
		[Column(Storage="_PicName", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string PicName
		{
			get
			{
				return this._PicName;
			}
			set
			{
				if ((this._PicName != value))
				{
					this.OnPicNameChanging(value);
					this.SendPropertyChanging();
					this._PicName = value;
					this.SendPropertyChanged("PicName");
					this.OnPicNameChanged();
				}
			}
		}
		
		[Column(Storage="_Active", DbType="TinyInt NOT NULL")]
		public byte Active
		{
			get
			{
				return this._Active;
			}
			set
			{
				if ((this._Active != value))
				{
					this.OnActiveChanging(value);
					this.SendPropertyChanging();
					this._Active = value;
					this.SendPropertyChanged("Active");
					this.OnActiveChanged();
				}
			}
		}
		
		[Column(Storage="_UploadTime", DbType="DateTime NOT NULL")]
		public System.DateTime UploadTime
		{
			get
			{
				return this._UploadTime;
			}
			set
			{
				if ((this._UploadTime != value))
				{
					this.OnUploadTimeChanging(value);
					this.SendPropertyChanging();
					this._UploadTime = value;
					this.SendPropertyChanged("UploadTime");
					this.OnUploadTimeChanged();
				}
			}
		}
		
		[Column(Storage="_spUploadTime", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string spUploadTime
		{
			get
			{
				return this._spUploadTime;
			}
			set
			{
				if ((this._spUploadTime != value))
				{
					this.OnspUploadTimeChanging(value);
					this.SendPropertyChanging();
					this._spUploadTime = value;
					this.SendPropertyChanged("spUploadTime");
					this.OnspUploadTimeChanged();
				}
			}
		}
		
		[Column(Storage="_spActive", DbType="NVarChar(20) NOT NULL", CanBeNull=false)]
		public string spActive
		{
			get
			{
				return this._spActive;
			}
			set
			{
				if ((this._spActive != value))
				{
					this.OnspActiveChanging(value);
					this.SendPropertyChanging();
					this._spActive = value;
					this.SendPropertyChanged("spActive");
					this.OnspActiveChanged();
				}
			}
		}
		
		[Column(Storage="_LastUpdate", DbType="DateTime NOT NULL")]
		public System.DateTime LastUpdate
		{
			get
			{
				return this._LastUpdate;
			}
			set
			{
				if ((this._LastUpdate != value))
				{
					this.OnLastUpdateChanging(value);
					this.SendPropertyChanging();
					this._LastUpdate = value;
					this.SendPropertyChanged("LastUpdate");
					this.OnLastUpdateChanged();
				}
			}
		}
		
		[Column(Storage="_spLastUpdate", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string spLastUpdate
		{
			get
			{
				return this._spLastUpdate;
			}
			set
			{
				if ((this._spLastUpdate != value))
				{
					this.OnspLastUpdateChanging(value);
					this.SendPropertyChanging();
					this._spLastUpdate = value;
					this.SendPropertyChanged("spLastUpdate");
					this.OnspLastUpdateChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.DesignText")]
	public partial class DesignText : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _DesignTextID;
		
		private string _TextHe;
		
		private string _TextEn;
		
		private System.DateTime _LastUpdate;
		
		private string _spLastUpdate;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnDesignTextIDChanging(string value);
    partial void OnDesignTextIDChanged();
    partial void OnTextHeChanging(string value);
    partial void OnTextHeChanged();
    partial void OnTextEnChanging(string value);
    partial void OnTextEnChanged();
    partial void OnLastUpdateChanging(System.DateTime value);
    partial void OnLastUpdateChanged();
    partial void OnspLastUpdateChanging(string value);
    partial void OnspLastUpdateChanged();
    #endregion
		
		public DesignText()
		{
			OnCreated();
		}
		
		[Column(Storage="_DesignTextID", DbType="NVarChar(50) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string DesignTextID
		{
			get
			{
				return this._DesignTextID;
			}
			set
			{
				if ((this._DesignTextID != value))
				{
					this.OnDesignTextIDChanging(value);
					this.SendPropertyChanging();
					this._DesignTextID = value;
					this.SendPropertyChanged("DesignTextID");
					this.OnDesignTextIDChanged();
				}
			}
		}
		
		[Column(Storage="_TextHe", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string TextHe
		{
			get
			{
				return this._TextHe;
			}
			set
			{
				if ((this._TextHe != value))
				{
					this.OnTextHeChanging(value);
					this.SendPropertyChanging();
					this._TextHe = value;
					this.SendPropertyChanged("TextHe");
					this.OnTextHeChanged();
				}
			}
		}
		
		[Column(Storage="_TextEn", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string TextEn
		{
			get
			{
				return this._TextEn;
			}
			set
			{
				if ((this._TextEn != value))
				{
					this.OnTextEnChanging(value);
					this.SendPropertyChanging();
					this._TextEn = value;
					this.SendPropertyChanged("TextEn");
					this.OnTextEnChanged();
				}
			}
		}
		
		[Column(Storage="_LastUpdate", DbType="DateTime NOT NULL")]
		public System.DateTime LastUpdate
		{
			get
			{
				return this._LastUpdate;
			}
			set
			{
				if ((this._LastUpdate != value))
				{
					this.OnLastUpdateChanging(value);
					this.SendPropertyChanging();
					this._LastUpdate = value;
					this.SendPropertyChanged("LastUpdate");
					this.OnLastUpdateChanged();
				}
			}
		}
		
		[Column(Storage="_spLastUpdate", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string spLastUpdate
		{
			get
			{
				return this._spLastUpdate;
			}
			set
			{
				if ((this._spLastUpdate != value))
				{
					this.OnspLastUpdateChanging(value);
					this.SendPropertyChanging();
					this._spLastUpdate = value;
					this.SendPropertyChanged("spLastUpdate");
					this.OnspLastUpdateChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.Gallery")]
	public partial class Gallery : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _GalleryID;
		
		private string _GalleryType;
		
		private int _GalleryPlace;
		
		private string _GalleryNameHe;
		
		private string _GalleryNameEn;
		
		private System.DateTime _LastUpdate;
		
		private string _spLastUpdate;
		
		private System.DateTime _CreationTime;
		
		private string _spCreationTime;
		
		private EntitySet<AllArtistPic> _AllArtistPics;
		
		private EntitySet<PublishPic> _PublishPics;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnGalleryIDChanging(string value);
    partial void OnGalleryIDChanged();
    partial void OnGalleryTypeChanging(string value);
    partial void OnGalleryTypeChanged();
    partial void OnGalleryPlaceChanging(int value);
    partial void OnGalleryPlaceChanged();
    partial void OnGalleryNameHeChanging(string value);
    partial void OnGalleryNameHeChanged();
    partial void OnGalleryNameEnChanging(string value);
    partial void OnGalleryNameEnChanged();
    partial void OnLastUpdateChanging(System.DateTime value);
    partial void OnLastUpdateChanged();
    partial void OnspLastUpdateChanging(string value);
    partial void OnspLastUpdateChanged();
    partial void OnCreationTimeChanging(System.DateTime value);
    partial void OnCreationTimeChanged();
    partial void OnspCreationTimeChanging(string value);
    partial void OnspCreationTimeChanged();
    #endregion
		
		public Gallery()
		{
			this._AllArtistPics = new EntitySet<AllArtistPic>(new Action<AllArtistPic>(this.attach_AllArtistPics), new Action<AllArtistPic>(this.detach_AllArtistPics));
			this._PublishPics = new EntitySet<PublishPic>(new Action<PublishPic>(this.attach_PublishPics), new Action<PublishPic>(this.detach_PublishPics));
			OnCreated();
		}
		
		[Column(Storage="_GalleryID", DbType="NVarChar(50) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string GalleryID
		{
			get
			{
				return this._GalleryID;
			}
			set
			{
				if ((this._GalleryID != value))
				{
					this.OnGalleryIDChanging(value);
					this.SendPropertyChanging();
					this._GalleryID = value;
					this.SendPropertyChanged("GalleryID");
					this.OnGalleryIDChanged();
				}
			}
		}
		
		[Column(Storage="_GalleryType", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string GalleryType
		{
			get
			{
				return this._GalleryType;
			}
			set
			{
				if ((this._GalleryType != value))
				{
					this.OnGalleryTypeChanging(value);
					this.SendPropertyChanging();
					this._GalleryType = value;
					this.SendPropertyChanged("GalleryType");
					this.OnGalleryTypeChanged();
				}
			}
		}
		
		[Column(Storage="_GalleryPlace", DbType="Int NOT NULL")]
		public int GalleryPlace
		{
			get
			{
				return this._GalleryPlace;
			}
			set
			{
				if ((this._GalleryPlace != value))
				{
					this.OnGalleryPlaceChanging(value);
					this.SendPropertyChanging();
					this._GalleryPlace = value;
					this.SendPropertyChanged("GalleryPlace");
					this.OnGalleryPlaceChanged();
				}
			}
		}
		
		[Column(Storage="_GalleryNameHe", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string GalleryNameHe
		{
			get
			{
				return this._GalleryNameHe;
			}
			set
			{
				if ((this._GalleryNameHe != value))
				{
					this.OnGalleryNameHeChanging(value);
					this.SendPropertyChanging();
					this._GalleryNameHe = value;
					this.SendPropertyChanged("GalleryNameHe");
					this.OnGalleryNameHeChanged();
				}
			}
		}
		
		[Column(Storage="_GalleryNameEn", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string GalleryNameEn
		{
			get
			{
				return this._GalleryNameEn;
			}
			set
			{
				if ((this._GalleryNameEn != value))
				{
					this.OnGalleryNameEnChanging(value);
					this.SendPropertyChanging();
					this._GalleryNameEn = value;
					this.SendPropertyChanged("GalleryNameEn");
					this.OnGalleryNameEnChanged();
				}
			}
		}
		
		[Column(Storage="_LastUpdate", DbType="DateTime NOT NULL")]
		public System.DateTime LastUpdate
		{
			get
			{
				return this._LastUpdate;
			}
			set
			{
				if ((this._LastUpdate != value))
				{
					this.OnLastUpdateChanging(value);
					this.SendPropertyChanging();
					this._LastUpdate = value;
					this.SendPropertyChanged("LastUpdate");
					this.OnLastUpdateChanged();
				}
			}
		}
		
		[Column(Storage="_spLastUpdate", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string spLastUpdate
		{
			get
			{
				return this._spLastUpdate;
			}
			set
			{
				if ((this._spLastUpdate != value))
				{
					this.OnspLastUpdateChanging(value);
					this.SendPropertyChanging();
					this._spLastUpdate = value;
					this.SendPropertyChanged("spLastUpdate");
					this.OnspLastUpdateChanged();
				}
			}
		}
		
		[Column(Storage="_CreationTime", DbType="DateTime NOT NULL")]
		public System.DateTime CreationTime
		{
			get
			{
				return this._CreationTime;
			}
			set
			{
				if ((this._CreationTime != value))
				{
					this.OnCreationTimeChanging(value);
					this.SendPropertyChanging();
					this._CreationTime = value;
					this.SendPropertyChanged("CreationTime");
					this.OnCreationTimeChanged();
				}
			}
		}
		
		[Column(Storage="_spCreationTime", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string spCreationTime
		{
			get
			{
				return this._spCreationTime;
			}
			set
			{
				if ((this._spCreationTime != value))
				{
					this.OnspCreationTimeChanging(value);
					this.SendPropertyChanging();
					this._spCreationTime = value;
					this.SendPropertyChanged("spCreationTime");
					this.OnspCreationTimeChanged();
				}
			}
		}
		
		[Association(Name="Gallery_AllArtistPic", Storage="_AllArtistPics", ThisKey="GalleryID", OtherKey="GalleryID")]
		public EntitySet<AllArtistPic> AllArtistPics
		{
			get
			{
				return this._AllArtistPics;
			}
			set
			{
				this._AllArtistPics.Assign(value);
			}
		}
		
		[Association(Name="Gallery_PublishPic", Storage="_PublishPics", ThisKey="GalleryID", OtherKey="GalleryID")]
		public EntitySet<PublishPic> PublishPics
		{
			get
			{
				return this._PublishPics;
			}
			set
			{
				this._PublishPics.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_AllArtistPics(AllArtistPic entity)
		{
			this.SendPropertyChanging();
			entity.Gallery = this;
		}
		
		private void detach_AllArtistPics(AllArtistPic entity)
		{
			this.SendPropertyChanging();
			entity.Gallery = null;
		}
		
		private void attach_PublishPics(PublishPic entity)
		{
			this.SendPropertyChanging();
			entity.Gallery = this;
		}
		
		private void detach_PublishPics(PublishPic entity)
		{
			this.SendPropertyChanging();
			entity.Gallery = null;
		}
	}
	
	[Table(Name="dbo.HeaderPic")]
	public partial class HeaderPic : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _PicID;
		
		private string _PicFullPath;
		
		private string _PicRelativePath;
		
		private int _PicPlace;
		
		private string _PicName;
		
		private byte _Active;
		
		private System.DateTime _UploadTime;
		
		private string _spUploadTime;
		
		private string _spActive;
		
		private System.DateTime _LastUpdate;
		
		private string _spLastUpdate;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnPicIDChanging(string value);
    partial void OnPicIDChanged();
    partial void OnPicFullPathChanging(string value);
    partial void OnPicFullPathChanged();
    partial void OnPicRelativePathChanging(string value);
    partial void OnPicRelativePathChanged();
    partial void OnPicPlaceChanging(int value);
    partial void OnPicPlaceChanged();
    partial void OnPicNameChanging(string value);
    partial void OnPicNameChanged();
    partial void OnActiveChanging(byte value);
    partial void OnActiveChanged();
    partial void OnUploadTimeChanging(System.DateTime value);
    partial void OnUploadTimeChanged();
    partial void OnspUploadTimeChanging(string value);
    partial void OnspUploadTimeChanged();
    partial void OnspActiveChanging(string value);
    partial void OnspActiveChanged();
    partial void OnLastUpdateChanging(System.DateTime value);
    partial void OnLastUpdateChanged();
    partial void OnspLastUpdateChanging(string value);
    partial void OnspLastUpdateChanged();
    #endregion
		
		public HeaderPic()
		{
			OnCreated();
		}
		
		[Column(Storage="_PicID", DbType="NVarChar(50) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string PicID
		{
			get
			{
				return this._PicID;
			}
			set
			{
				if ((this._PicID != value))
				{
					this.OnPicIDChanging(value);
					this.SendPropertyChanging();
					this._PicID = value;
					this.SendPropertyChanged("PicID");
					this.OnPicIDChanged();
				}
			}
		}
		
		[Column(Storage="_PicFullPath", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string PicFullPath
		{
			get
			{
				return this._PicFullPath;
			}
			set
			{
				if ((this._PicFullPath != value))
				{
					this.OnPicFullPathChanging(value);
					this.SendPropertyChanging();
					this._PicFullPath = value;
					this.SendPropertyChanged("PicFullPath");
					this.OnPicFullPathChanged();
				}
			}
		}
		
		[Column(Storage="_PicRelativePath", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string PicRelativePath
		{
			get
			{
				return this._PicRelativePath;
			}
			set
			{
				if ((this._PicRelativePath != value))
				{
					this.OnPicRelativePathChanging(value);
					this.SendPropertyChanging();
					this._PicRelativePath = value;
					this.SendPropertyChanged("PicRelativePath");
					this.OnPicRelativePathChanged();
				}
			}
		}
		
		[Column(Storage="_PicPlace", DbType="Int NOT NULL")]
		public int PicPlace
		{
			get
			{
				return this._PicPlace;
			}
			set
			{
				if ((this._PicPlace != value))
				{
					this.OnPicPlaceChanging(value);
					this.SendPropertyChanging();
					this._PicPlace = value;
					this.SendPropertyChanged("PicPlace");
					this.OnPicPlaceChanged();
				}
			}
		}
		
		[Column(Storage="_PicName", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string PicName
		{
			get
			{
				return this._PicName;
			}
			set
			{
				if ((this._PicName != value))
				{
					this.OnPicNameChanging(value);
					this.SendPropertyChanging();
					this._PicName = value;
					this.SendPropertyChanged("PicName");
					this.OnPicNameChanged();
				}
			}
		}
		
		[Column(Storage="_Active", DbType="TinyInt NOT NULL")]
		public byte Active
		{
			get
			{
				return this._Active;
			}
			set
			{
				if ((this._Active != value))
				{
					this.OnActiveChanging(value);
					this.SendPropertyChanging();
					this._Active = value;
					this.SendPropertyChanged("Active");
					this.OnActiveChanged();
				}
			}
		}
		
		[Column(Storage="_UploadTime", DbType="DateTime NOT NULL")]
		public System.DateTime UploadTime
		{
			get
			{
				return this._UploadTime;
			}
			set
			{
				if ((this._UploadTime != value))
				{
					this.OnUploadTimeChanging(value);
					this.SendPropertyChanging();
					this._UploadTime = value;
					this.SendPropertyChanged("UploadTime");
					this.OnUploadTimeChanged();
				}
			}
		}
		
		[Column(Storage="_spUploadTime", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string spUploadTime
		{
			get
			{
				return this._spUploadTime;
			}
			set
			{
				if ((this._spUploadTime != value))
				{
					this.OnspUploadTimeChanging(value);
					this.SendPropertyChanging();
					this._spUploadTime = value;
					this.SendPropertyChanged("spUploadTime");
					this.OnspUploadTimeChanged();
				}
			}
		}
		
		[Column(Storage="_spActive", DbType="NVarChar(20) NOT NULL", CanBeNull=false)]
		public string spActive
		{
			get
			{
				return this._spActive;
			}
			set
			{
				if ((this._spActive != value))
				{
					this.OnspActiveChanging(value);
					this.SendPropertyChanging();
					this._spActive = value;
					this.SendPropertyChanged("spActive");
					this.OnspActiveChanged();
				}
			}
		}
		
		[Column(Storage="_LastUpdate", DbType="DateTime NOT NULL")]
		public System.DateTime LastUpdate
		{
			get
			{
				return this._LastUpdate;
			}
			set
			{
				if ((this._LastUpdate != value))
				{
					this.OnLastUpdateChanging(value);
					this.SendPropertyChanging();
					this._LastUpdate = value;
					this.SendPropertyChanged("LastUpdate");
					this.OnLastUpdateChanged();
				}
			}
		}
		
		[Column(Storage="_spLastUpdate", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string spLastUpdate
		{
			get
			{
				return this._spLastUpdate;
			}
			set
			{
				if ((this._spLastUpdate != value))
				{
					this.OnspLastUpdateChanging(value);
					this.SendPropertyChanging();
					this._spLastUpdate = value;
					this.SendPropertyChanged("spLastUpdate");
					this.OnspLastUpdateChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.HomeContactAbout")]
	public partial class HomeContactAbout : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _HomeContactAboutID;
		
		private string _ContactHe;
		
		private string _ContactEn;
		
		private string _AboutHe;
		
		private string _AboutEn;
		
		private System.DateTime _LastUpdate;
		
		private string _spLastUpdate;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnHomeContactAboutIDChanging(string value);
    partial void OnHomeContactAboutIDChanged();
    partial void OnContactHeChanging(string value);
    partial void OnContactHeChanged();
    partial void OnContactEnChanging(string value);
    partial void OnContactEnChanged();
    partial void OnAboutHeChanging(string value);
    partial void OnAboutHeChanged();
    partial void OnAboutEnChanging(string value);
    partial void OnAboutEnChanged();
    partial void OnLastUpdateChanging(System.DateTime value);
    partial void OnLastUpdateChanged();
    partial void OnspLastUpdateChanging(string value);
    partial void OnspLastUpdateChanged();
    #endregion
		
		public HomeContactAbout()
		{
			OnCreated();
		}
		
		[Column(Storage="_HomeContactAboutID", DbType="NVarChar(50) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string HomeContactAboutID
		{
			get
			{
				return this._HomeContactAboutID;
			}
			set
			{
				if ((this._HomeContactAboutID != value))
				{
					this.OnHomeContactAboutIDChanging(value);
					this.SendPropertyChanging();
					this._HomeContactAboutID = value;
					this.SendPropertyChanged("HomeContactAboutID");
					this.OnHomeContactAboutIDChanged();
				}
			}
		}
		
		[Column(Storage="_ContactHe", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string ContactHe
		{
			get
			{
				return this._ContactHe;
			}
			set
			{
				if ((this._ContactHe != value))
				{
					this.OnContactHeChanging(value);
					this.SendPropertyChanging();
					this._ContactHe = value;
					this.SendPropertyChanged("ContactHe");
					this.OnContactHeChanged();
				}
			}
		}
		
		[Column(Storage="_ContactEn", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string ContactEn
		{
			get
			{
				return this._ContactEn;
			}
			set
			{
				if ((this._ContactEn != value))
				{
					this.OnContactEnChanging(value);
					this.SendPropertyChanging();
					this._ContactEn = value;
					this.SendPropertyChanged("ContactEn");
					this.OnContactEnChanged();
				}
			}
		}
		
		[Column(Storage="_AboutHe", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string AboutHe
		{
			get
			{
				return this._AboutHe;
			}
			set
			{
				if ((this._AboutHe != value))
				{
					this.OnAboutHeChanging(value);
					this.SendPropertyChanging();
					this._AboutHe = value;
					this.SendPropertyChanged("AboutHe");
					this.OnAboutHeChanged();
				}
			}
		}
		
		[Column(Storage="_AboutEn", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string AboutEn
		{
			get
			{
				return this._AboutEn;
			}
			set
			{
				if ((this._AboutEn != value))
				{
					this.OnAboutEnChanging(value);
					this.SendPropertyChanging();
					this._AboutEn = value;
					this.SendPropertyChanged("AboutEn");
					this.OnAboutEnChanged();
				}
			}
		}
		
		[Column(Storage="_LastUpdate", DbType="DateTime NOT NULL")]
		public System.DateTime LastUpdate
		{
			get
			{
				return this._LastUpdate;
			}
			set
			{
				if ((this._LastUpdate != value))
				{
					this.OnLastUpdateChanging(value);
					this.SendPropertyChanging();
					this._LastUpdate = value;
					this.SendPropertyChanged("LastUpdate");
					this.OnLastUpdateChanged();
				}
			}
		}
		
		[Column(Storage="_spLastUpdate", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string spLastUpdate
		{
			get
			{
				return this._spLastUpdate;
			}
			set
			{
				if ((this._spLastUpdate != value))
				{
					this.OnspLastUpdateChanging(value);
					this.SendPropertyChanging();
					this._spLastUpdate = value;
					this.SendPropertyChanged("spLastUpdate");
					this.OnspLastUpdateChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.LastNews")]
	public partial class LastNew : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _NewsID;
		
		private string _NewsHe;
		
		private string _NewsEn;
		
		private string _NewsHeConverted;
		
		private string _NewsEnConverted;
		
		private int _NewsPlace;
		
		private System.DateTime _UploadTime;
		
		private string _spUploadTime;
		
		private System.DateTime _LastUpdate;
		
		private string _spLastUpdate;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnNewsIDChanging(string value);
    partial void OnNewsIDChanged();
    partial void OnNewsHeChanging(string value);
    partial void OnNewsHeChanged();
    partial void OnNewsEnChanging(string value);
    partial void OnNewsEnChanged();
    partial void OnNewsHeConvertedChanging(string value);
    partial void OnNewsHeConvertedChanged();
    partial void OnNewsEnConvertedChanging(string value);
    partial void OnNewsEnConvertedChanged();
    partial void OnNewsPlaceChanging(int value);
    partial void OnNewsPlaceChanged();
    partial void OnUploadTimeChanging(System.DateTime value);
    partial void OnUploadTimeChanged();
    partial void OnspUploadTimeChanging(string value);
    partial void OnspUploadTimeChanged();
    partial void OnLastUpdateChanging(System.DateTime value);
    partial void OnLastUpdateChanged();
    partial void OnspLastUpdateChanging(string value);
    partial void OnspLastUpdateChanged();
    #endregion
		
		public LastNew()
		{
			OnCreated();
		}
		
		[Column(Storage="_NewsID", DbType="NVarChar(50) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string NewsID
		{
			get
			{
				return this._NewsID;
			}
			set
			{
				if ((this._NewsID != value))
				{
					this.OnNewsIDChanging(value);
					this.SendPropertyChanging();
					this._NewsID = value;
					this.SendPropertyChanged("NewsID");
					this.OnNewsIDChanged();
				}
			}
		}
		
		[Column(Storage="_NewsHe", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string NewsHe
		{
			get
			{
				return this._NewsHe;
			}
			set
			{
				if ((this._NewsHe != value))
				{
					this.OnNewsHeChanging(value);
					this.SendPropertyChanging();
					this._NewsHe = value;
					this.SendPropertyChanged("NewsHe");
					this.OnNewsHeChanged();
				}
			}
		}
		
		[Column(Storage="_NewsEn", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string NewsEn
		{
			get
			{
				return this._NewsEn;
			}
			set
			{
				if ((this._NewsEn != value))
				{
					this.OnNewsEnChanging(value);
					this.SendPropertyChanging();
					this._NewsEn = value;
					this.SendPropertyChanged("NewsEn");
					this.OnNewsEnChanged();
				}
			}
		}
		
		[Column(Storage="_NewsHeConverted", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string NewsHeConverted
		{
			get
			{
				return this._NewsHeConverted;
			}
			set
			{
				if ((this._NewsHeConverted != value))
				{
					this.OnNewsHeConvertedChanging(value);
					this.SendPropertyChanging();
					this._NewsHeConverted = value;
					this.SendPropertyChanged("NewsHeConverted");
					this.OnNewsHeConvertedChanged();
				}
			}
		}
		
		[Column(Storage="_NewsEnConverted", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string NewsEnConverted
		{
			get
			{
				return this._NewsEnConverted;
			}
			set
			{
				if ((this._NewsEnConverted != value))
				{
					this.OnNewsEnConvertedChanging(value);
					this.SendPropertyChanging();
					this._NewsEnConverted = value;
					this.SendPropertyChanged("NewsEnConverted");
					this.OnNewsEnConvertedChanged();
				}
			}
		}
		
		[Column(Storage="_NewsPlace", DbType="Int NOT NULL")]
		public int NewsPlace
		{
			get
			{
				return this._NewsPlace;
			}
			set
			{
				if ((this._NewsPlace != value))
				{
					this.OnNewsPlaceChanging(value);
					this.SendPropertyChanging();
					this._NewsPlace = value;
					this.SendPropertyChanged("NewsPlace");
					this.OnNewsPlaceChanged();
				}
			}
		}
		
		[Column(Storage="_UploadTime", DbType="DateTime NOT NULL")]
		public System.DateTime UploadTime
		{
			get
			{
				return this._UploadTime;
			}
			set
			{
				if ((this._UploadTime != value))
				{
					this.OnUploadTimeChanging(value);
					this.SendPropertyChanging();
					this._UploadTime = value;
					this.SendPropertyChanged("UploadTime");
					this.OnUploadTimeChanged();
				}
			}
		}
		
		[Column(Storage="_spUploadTime", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string spUploadTime
		{
			get
			{
				return this._spUploadTime;
			}
			set
			{
				if ((this._spUploadTime != value))
				{
					this.OnspUploadTimeChanging(value);
					this.SendPropertyChanging();
					this._spUploadTime = value;
					this.SendPropertyChanged("spUploadTime");
					this.OnspUploadTimeChanged();
				}
			}
		}
		
		[Column(Storage="_LastUpdate", DbType="DateTime NOT NULL")]
		public System.DateTime LastUpdate
		{
			get
			{
				return this._LastUpdate;
			}
			set
			{
				if ((this._LastUpdate != value))
				{
					this.OnLastUpdateChanging(value);
					this.SendPropertyChanging();
					this._LastUpdate = value;
					this.SendPropertyChanged("LastUpdate");
					this.OnLastUpdateChanged();
				}
			}
		}
		
		[Column(Storage="_spLastUpdate", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string spLastUpdate
		{
			get
			{
				return this._spLastUpdate;
			}
			set
			{
				if ((this._spLastUpdate != value))
				{
					this.OnspLastUpdateChanging(value);
					this.SendPropertyChanging();
					this._spLastUpdate = value;
					this.SendPropertyChanged("spLastUpdate");
					this.OnspLastUpdateChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.LastRecordPic")]
	public partial class LastRecordPic : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _PicID;
		
		private string _PicColorFullPath;
		
		private string _PicBWFullPath;
		
		private string _PicColorRelativePath;
		
		private string _PicBWRelativePath;
		
		private int _PicPlace;
		
		private string _PicName;
		
		private byte _Active;
		
		private System.DateTime _UploadTime;
		
		private string _spUploadTime;
		
		private string _spActive;
		
		private System.DateTime _LastUpdate;
		
		private string _spLastUpdate;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnPicIDChanging(string value);
    partial void OnPicIDChanged();
    partial void OnPicColorFullPathChanging(string value);
    partial void OnPicColorFullPathChanged();
    partial void OnPicBWFullPathChanging(string value);
    partial void OnPicBWFullPathChanged();
    partial void OnPicColorRelativePathChanging(string value);
    partial void OnPicColorRelativePathChanged();
    partial void OnPicBWRelativePathChanging(string value);
    partial void OnPicBWRelativePathChanged();
    partial void OnPicPlaceChanging(int value);
    partial void OnPicPlaceChanged();
    partial void OnPicNameChanging(string value);
    partial void OnPicNameChanged();
    partial void OnActiveChanging(byte value);
    partial void OnActiveChanged();
    partial void OnUploadTimeChanging(System.DateTime value);
    partial void OnUploadTimeChanged();
    partial void OnspUploadTimeChanging(string value);
    partial void OnspUploadTimeChanged();
    partial void OnspActiveChanging(string value);
    partial void OnspActiveChanged();
    partial void OnLastUpdateChanging(System.DateTime value);
    partial void OnLastUpdateChanged();
    partial void OnspLastUpdateChanging(string value);
    partial void OnspLastUpdateChanged();
    #endregion
		
		public LastRecordPic()
		{
			OnCreated();
		}
		
		[Column(Storage="_PicID", DbType="NVarChar(50) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string PicID
		{
			get
			{
				return this._PicID;
			}
			set
			{
				if ((this._PicID != value))
				{
					this.OnPicIDChanging(value);
					this.SendPropertyChanging();
					this._PicID = value;
					this.SendPropertyChanged("PicID");
					this.OnPicIDChanged();
				}
			}
		}
		
		[Column(Storage="_PicColorFullPath", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string PicColorFullPath
		{
			get
			{
				return this._PicColorFullPath;
			}
			set
			{
				if ((this._PicColorFullPath != value))
				{
					this.OnPicColorFullPathChanging(value);
					this.SendPropertyChanging();
					this._PicColorFullPath = value;
					this.SendPropertyChanged("PicColorFullPath");
					this.OnPicColorFullPathChanged();
				}
			}
		}
		
		[Column(Storage="_PicBWFullPath", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string PicBWFullPath
		{
			get
			{
				return this._PicBWFullPath;
			}
			set
			{
				if ((this._PicBWFullPath != value))
				{
					this.OnPicBWFullPathChanging(value);
					this.SendPropertyChanging();
					this._PicBWFullPath = value;
					this.SendPropertyChanged("PicBWFullPath");
					this.OnPicBWFullPathChanged();
				}
			}
		}
		
		[Column(Storage="_PicColorRelativePath", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string PicColorRelativePath
		{
			get
			{
				return this._PicColorRelativePath;
			}
			set
			{
				if ((this._PicColorRelativePath != value))
				{
					this.OnPicColorRelativePathChanging(value);
					this.SendPropertyChanging();
					this._PicColorRelativePath = value;
					this.SendPropertyChanged("PicColorRelativePath");
					this.OnPicColorRelativePathChanged();
				}
			}
		}
		
		[Column(Storage="_PicBWRelativePath", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string PicBWRelativePath
		{
			get
			{
				return this._PicBWRelativePath;
			}
			set
			{
				if ((this._PicBWRelativePath != value))
				{
					this.OnPicBWRelativePathChanging(value);
					this.SendPropertyChanging();
					this._PicBWRelativePath = value;
					this.SendPropertyChanged("PicBWRelativePath");
					this.OnPicBWRelativePathChanged();
				}
			}
		}
		
		[Column(Storage="_PicPlace", DbType="Int NOT NULL")]
		public int PicPlace
		{
			get
			{
				return this._PicPlace;
			}
			set
			{
				if ((this._PicPlace != value))
				{
					this.OnPicPlaceChanging(value);
					this.SendPropertyChanging();
					this._PicPlace = value;
					this.SendPropertyChanged("PicPlace");
					this.OnPicPlaceChanged();
				}
			}
		}
		
		[Column(Storage="_PicName", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string PicName
		{
			get
			{
				return this._PicName;
			}
			set
			{
				if ((this._PicName != value))
				{
					this.OnPicNameChanging(value);
					this.SendPropertyChanging();
					this._PicName = value;
					this.SendPropertyChanged("PicName");
					this.OnPicNameChanged();
				}
			}
		}
		
		[Column(Storage="_Active", DbType="TinyInt NOT NULL")]
		public byte Active
		{
			get
			{
				return this._Active;
			}
			set
			{
				if ((this._Active != value))
				{
					this.OnActiveChanging(value);
					this.SendPropertyChanging();
					this._Active = value;
					this.SendPropertyChanged("Active");
					this.OnActiveChanged();
				}
			}
		}
		
		[Column(Storage="_UploadTime", DbType="DateTime NOT NULL")]
		public System.DateTime UploadTime
		{
			get
			{
				return this._UploadTime;
			}
			set
			{
				if ((this._UploadTime != value))
				{
					this.OnUploadTimeChanging(value);
					this.SendPropertyChanging();
					this._UploadTime = value;
					this.SendPropertyChanged("UploadTime");
					this.OnUploadTimeChanged();
				}
			}
		}
		
		[Column(Storage="_spUploadTime", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string spUploadTime
		{
			get
			{
				return this._spUploadTime;
			}
			set
			{
				if ((this._spUploadTime != value))
				{
					this.OnspUploadTimeChanging(value);
					this.SendPropertyChanging();
					this._spUploadTime = value;
					this.SendPropertyChanged("spUploadTime");
					this.OnspUploadTimeChanged();
				}
			}
		}
		
		[Column(Storage="_spActive", DbType="NVarChar(20) NOT NULL", CanBeNull=false)]
		public string spActive
		{
			get
			{
				return this._spActive;
			}
			set
			{
				if ((this._spActive != value))
				{
					this.OnspActiveChanging(value);
					this.SendPropertyChanging();
					this._spActive = value;
					this.SendPropertyChanged("spActive");
					this.OnspActiveChanged();
				}
			}
		}
		
		[Column(Storage="_LastUpdate", DbType="DateTime NOT NULL")]
		public System.DateTime LastUpdate
		{
			get
			{
				return this._LastUpdate;
			}
			set
			{
				if ((this._LastUpdate != value))
				{
					this.OnLastUpdateChanging(value);
					this.SendPropertyChanging();
					this._LastUpdate = value;
					this.SendPropertyChanged("LastUpdate");
					this.OnLastUpdateChanged();
				}
			}
		}
		
		[Column(Storage="_spLastUpdate", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string spLastUpdate
		{
			get
			{
				return this._spLastUpdate;
			}
			set
			{
				if ((this._spLastUpdate != value))
				{
					this.OnspLastUpdateChanging(value);
					this.SendPropertyChanging();
					this._spLastUpdate = value;
					this.SendPropertyChanged("spLastUpdate");
					this.OnspLastUpdateChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.[Log]")]
	public partial class Log : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _LogID;
		
		private string _LogMessage;
		
		private string _LogType;
		
		private System.DateTime _LogDate;
		
		private string _spLogDate;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnLogIDChanging(string value);
    partial void OnLogIDChanged();
    partial void OnLogMessageChanging(string value);
    partial void OnLogMessageChanged();
    partial void OnLogTypeChanging(string value);
    partial void OnLogTypeChanged();
    partial void OnLogDateChanging(System.DateTime value);
    partial void OnLogDateChanged();
    partial void OnspLogDateChanging(string value);
    partial void OnspLogDateChanged();
    #endregion
		
		public Log()
		{
			OnCreated();
		}
		
		[Column(Storage="_LogID", DbType="NVarChar(50) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string LogID
		{
			get
			{
				return this._LogID;
			}
			set
			{
				if ((this._LogID != value))
				{
					this.OnLogIDChanging(value);
					this.SendPropertyChanging();
					this._LogID = value;
					this.SendPropertyChanged("LogID");
					this.OnLogIDChanged();
				}
			}
		}
		
		[Column(Storage="_LogMessage", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string LogMessage
		{
			get
			{
				return this._LogMessage;
			}
			set
			{
				if ((this._LogMessage != value))
				{
					this.OnLogMessageChanging(value);
					this.SendPropertyChanging();
					this._LogMessage = value;
					this.SendPropertyChanged("LogMessage");
					this.OnLogMessageChanged();
				}
			}
		}
		
		[Column(Storage="_LogType", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string LogType
		{
			get
			{
				return this._LogType;
			}
			set
			{
				if ((this._LogType != value))
				{
					this.OnLogTypeChanging(value);
					this.SendPropertyChanging();
					this._LogType = value;
					this.SendPropertyChanged("LogType");
					this.OnLogTypeChanged();
				}
			}
		}
		
		[Column(Storage="_LogDate", DbType="DateTime NOT NULL")]
		public System.DateTime LogDate
		{
			get
			{
				return this._LogDate;
			}
			set
			{
				if ((this._LogDate != value))
				{
					this.OnLogDateChanging(value);
					this.SendPropertyChanging();
					this._LogDate = value;
					this.SendPropertyChanged("LogDate");
					this.OnLogDateChanged();
				}
			}
		}
		
		[Column(Storage="_spLogDate", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string spLogDate
		{
			get
			{
				return this._spLogDate;
			}
			set
			{
				if ((this._spLogDate != value))
				{
					this.OnspLogDateChanging(value);
					this.SendPropertyChanging();
					this._spLogDate = value;
					this.SendPropertyChanged("spLogDate");
					this.OnspLogDateChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.MainContactAbout")]
	public partial class MainContactAbout : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _MainContactAboutID;
		
		private string _ContactHe;
		
		private string _ContactEn;
		
		private string _AboutHe;
		
		private string _AboutEn;
		
		private string _spLastUpdate;
		
		private System.DateTime _LastUpdate;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnMainContactAboutIDChanging(string value);
    partial void OnMainContactAboutIDChanged();
    partial void OnContactHeChanging(string value);
    partial void OnContactHeChanged();
    partial void OnContactEnChanging(string value);
    partial void OnContactEnChanged();
    partial void OnAboutHeChanging(string value);
    partial void OnAboutHeChanged();
    partial void OnAboutEnChanging(string value);
    partial void OnAboutEnChanged();
    partial void OnspLastUpdateChanging(string value);
    partial void OnspLastUpdateChanged();
    partial void OnLastUpdateChanging(System.DateTime value);
    partial void OnLastUpdateChanged();
    #endregion
		
		public MainContactAbout()
		{
			OnCreated();
		}
		
		[Column(Storage="_MainContactAboutID", DbType="NVarChar(50) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string MainContactAboutID
		{
			get
			{
				return this._MainContactAboutID;
			}
			set
			{
				if ((this._MainContactAboutID != value))
				{
					this.OnMainContactAboutIDChanging(value);
					this.SendPropertyChanging();
					this._MainContactAboutID = value;
					this.SendPropertyChanged("MainContactAboutID");
					this.OnMainContactAboutIDChanged();
				}
			}
		}
		
		[Column(Storage="_ContactHe", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string ContactHe
		{
			get
			{
				return this._ContactHe;
			}
			set
			{
				if ((this._ContactHe != value))
				{
					this.OnContactHeChanging(value);
					this.SendPropertyChanging();
					this._ContactHe = value;
					this.SendPropertyChanged("ContactHe");
					this.OnContactHeChanged();
				}
			}
		}
		
		[Column(Storage="_ContactEn", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string ContactEn
		{
			get
			{
				return this._ContactEn;
			}
			set
			{
				if ((this._ContactEn != value))
				{
					this.OnContactEnChanging(value);
					this.SendPropertyChanging();
					this._ContactEn = value;
					this.SendPropertyChanged("ContactEn");
					this.OnContactEnChanged();
				}
			}
		}
		
		[Column(Storage="_AboutHe", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string AboutHe
		{
			get
			{
				return this._AboutHe;
			}
			set
			{
				if ((this._AboutHe != value))
				{
					this.OnAboutHeChanging(value);
					this.SendPropertyChanging();
					this._AboutHe = value;
					this.SendPropertyChanged("AboutHe");
					this.OnAboutHeChanged();
				}
			}
		}
		
		[Column(Storage="_AboutEn", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string AboutEn
		{
			get
			{
				return this._AboutEn;
			}
			set
			{
				if ((this._AboutEn != value))
				{
					this.OnAboutEnChanging(value);
					this.SendPropertyChanging();
					this._AboutEn = value;
					this.SendPropertyChanged("AboutEn");
					this.OnAboutEnChanged();
				}
			}
		}
		
		[Column(Storage="_spLastUpdate", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string spLastUpdate
		{
			get
			{
				return this._spLastUpdate;
			}
			set
			{
				if ((this._spLastUpdate != value))
				{
					this.OnspLastUpdateChanging(value);
					this.SendPropertyChanging();
					this._spLastUpdate = value;
					this.SendPropertyChanged("spLastUpdate");
					this.OnspLastUpdateChanged();
				}
			}
		}
		
		[Column(Storage="_LastUpdate", DbType="DateTime NOT NULL")]
		public System.DateTime LastUpdate
		{
			get
			{
				return this._LastUpdate;
			}
			set
			{
				if ((this._LastUpdate != value))
				{
					this.OnLastUpdateChanging(value);
					this.SendPropertyChanging();
					this._LastUpdate = value;
					this.SendPropertyChanged("LastUpdate");
					this.OnLastUpdateChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.MainContactAboutPic")]
	public partial class MainContactAboutPic : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _PicID;
		
		private string _PicFullPath;
		
		private string _PicRelativePath;
		
		private string _PicName;
		
		private byte _Active;
		
		private System.DateTime _UploadTime;
		
		private string _spUploadTime;
		
		private string _spActive;
		
		private System.DateTime _LastUpdate;
		
		private string _spLastUpdate;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnPicIDChanging(string value);
    partial void OnPicIDChanged();
    partial void OnPicFullPathChanging(string value);
    partial void OnPicFullPathChanged();
    partial void OnPicRelativePathChanging(string value);
    partial void OnPicRelativePathChanged();
    partial void OnPicNameChanging(string value);
    partial void OnPicNameChanged();
    partial void OnActiveChanging(byte value);
    partial void OnActiveChanged();
    partial void OnUploadTimeChanging(System.DateTime value);
    partial void OnUploadTimeChanged();
    partial void OnspUploadTimeChanging(string value);
    partial void OnspUploadTimeChanged();
    partial void OnspActiveChanging(string value);
    partial void OnspActiveChanged();
    partial void OnLastUpdateChanging(System.DateTime value);
    partial void OnLastUpdateChanged();
    partial void OnspLastUpdateChanging(string value);
    partial void OnspLastUpdateChanged();
    #endregion
		
		public MainContactAboutPic()
		{
			OnCreated();
		}
		
		[Column(Storage="_PicID", DbType="NVarChar(50) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string PicID
		{
			get
			{
				return this._PicID;
			}
			set
			{
				if ((this._PicID != value))
				{
					this.OnPicIDChanging(value);
					this.SendPropertyChanging();
					this._PicID = value;
					this.SendPropertyChanged("PicID");
					this.OnPicIDChanged();
				}
			}
		}
		
		[Column(Storage="_PicFullPath", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string PicFullPath
		{
			get
			{
				return this._PicFullPath;
			}
			set
			{
				if ((this._PicFullPath != value))
				{
					this.OnPicFullPathChanging(value);
					this.SendPropertyChanging();
					this._PicFullPath = value;
					this.SendPropertyChanged("PicFullPath");
					this.OnPicFullPathChanged();
				}
			}
		}
		
		[Column(Storage="_PicRelativePath", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string PicRelativePath
		{
			get
			{
				return this._PicRelativePath;
			}
			set
			{
				if ((this._PicRelativePath != value))
				{
					this.OnPicRelativePathChanging(value);
					this.SendPropertyChanging();
					this._PicRelativePath = value;
					this.SendPropertyChanged("PicRelativePath");
					this.OnPicRelativePathChanged();
				}
			}
		}
		
		[Column(Storage="_PicName", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string PicName
		{
			get
			{
				return this._PicName;
			}
			set
			{
				if ((this._PicName != value))
				{
					this.OnPicNameChanging(value);
					this.SendPropertyChanging();
					this._PicName = value;
					this.SendPropertyChanged("PicName");
					this.OnPicNameChanged();
				}
			}
		}
		
		[Column(Storage="_Active", DbType="TinyInt NOT NULL")]
		public byte Active
		{
			get
			{
				return this._Active;
			}
			set
			{
				if ((this._Active != value))
				{
					this.OnActiveChanging(value);
					this.SendPropertyChanging();
					this._Active = value;
					this.SendPropertyChanged("Active");
					this.OnActiveChanged();
				}
			}
		}
		
		[Column(Storage="_UploadTime", DbType="DateTime NOT NULL")]
		public System.DateTime UploadTime
		{
			get
			{
				return this._UploadTime;
			}
			set
			{
				if ((this._UploadTime != value))
				{
					this.OnUploadTimeChanging(value);
					this.SendPropertyChanging();
					this._UploadTime = value;
					this.SendPropertyChanged("UploadTime");
					this.OnUploadTimeChanged();
				}
			}
		}
		
		[Column(Storage="_spUploadTime", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string spUploadTime
		{
			get
			{
				return this._spUploadTime;
			}
			set
			{
				if ((this._spUploadTime != value))
				{
					this.OnspUploadTimeChanging(value);
					this.SendPropertyChanging();
					this._spUploadTime = value;
					this.SendPropertyChanged("spUploadTime");
					this.OnspUploadTimeChanged();
				}
			}
		}
		
		[Column(Storage="_spActive", DbType="NVarChar(20) NOT NULL", CanBeNull=false)]
		public string spActive
		{
			get
			{
				return this._spActive;
			}
			set
			{
				if ((this._spActive != value))
				{
					this.OnspActiveChanging(value);
					this.SendPropertyChanging();
					this._spActive = value;
					this.SendPropertyChanged("spActive");
					this.OnspActiveChanged();
				}
			}
		}
		
		[Column(Storage="_LastUpdate", DbType="DateTime NOT NULL")]
		public System.DateTime LastUpdate
		{
			get
			{
				return this._LastUpdate;
			}
			set
			{
				if ((this._LastUpdate != value))
				{
					this.OnLastUpdateChanging(value);
					this.SendPropertyChanging();
					this._LastUpdate = value;
					this.SendPropertyChanged("LastUpdate");
					this.OnLastUpdateChanged();
				}
			}
		}
		
		[Column(Storage="_spLastUpdate", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string spLastUpdate
		{
			get
			{
				return this._spLastUpdate;
			}
			set
			{
				if ((this._spLastUpdate != value))
				{
					this.OnspLastUpdateChanging(value);
					this.SendPropertyChanging();
					this._spLastUpdate = value;
					this.SendPropertyChanged("spLastUpdate");
					this.OnspLastUpdateChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.Production")]
	public partial class Production : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _ProID;
		
		private string _ArtistNameHe;
		
		private string _ArtistNameEn;
		
		private string _ArtistTextHe;
		
		private string _ArtistTextEn;
		
		private string _PicColorFullPath;
		
		private string _PicBWFullPath;
		
		private string _PicMainFullPath;
		
		private string _PicColorRelativePath;
		
		private string _PicBWRelativePath;
		
		private string _PicMainRelativePath;
		
		private int _ProPlace;
		
		private byte _Active;
		
		private System.DateTime _UploadTime;
		
		private string _spUploadTime;
		
		private string _spActive;
		
		private System.DateTime _LastUpdate;
		
		private string _spLastUpdate;
		
		private EntitySet<Song> _Songs;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnProIDChanging(string value);
    partial void OnProIDChanged();
    partial void OnArtistNameHeChanging(string value);
    partial void OnArtistNameHeChanged();
    partial void OnArtistNameEnChanging(string value);
    partial void OnArtistNameEnChanged();
    partial void OnArtistTextHeChanging(string value);
    partial void OnArtistTextHeChanged();
    partial void OnArtistTextEnChanging(string value);
    partial void OnArtistTextEnChanged();
    partial void OnPicColorFullPathChanging(string value);
    partial void OnPicColorFullPathChanged();
    partial void OnPicBWFullPathChanging(string value);
    partial void OnPicBWFullPathChanged();
    partial void OnPicMainFullPathChanging(string value);
    partial void OnPicMainFullPathChanged();
    partial void OnPicColorRelativePathChanging(string value);
    partial void OnPicColorRelativePathChanged();
    partial void OnPicBWRelativePathChanging(string value);
    partial void OnPicBWRelativePathChanged();
    partial void OnPicMainRelativePathChanging(string value);
    partial void OnPicMainRelativePathChanged();
    partial void OnProPlaceChanging(int value);
    partial void OnProPlaceChanged();
    partial void OnActiveChanging(byte value);
    partial void OnActiveChanged();
    partial void OnUploadTimeChanging(System.DateTime value);
    partial void OnUploadTimeChanged();
    partial void OnspUploadTimeChanging(string value);
    partial void OnspUploadTimeChanged();
    partial void OnspActiveChanging(string value);
    partial void OnspActiveChanged();
    partial void OnLastUpdateChanging(System.DateTime value);
    partial void OnLastUpdateChanged();
    partial void OnspLastUpdateChanging(string value);
    partial void OnspLastUpdateChanged();
    #endregion
		
		public Production()
		{
			this._Songs = new EntitySet<Song>(new Action<Song>(this.attach_Songs), new Action<Song>(this.detach_Songs));
			OnCreated();
		}
		
		[Column(Storage="_ProID", DbType="NVarChar(50) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string ProID
		{
			get
			{
				return this._ProID;
			}
			set
			{
				if ((this._ProID != value))
				{
					this.OnProIDChanging(value);
					this.SendPropertyChanging();
					this._ProID = value;
					this.SendPropertyChanged("ProID");
					this.OnProIDChanged();
				}
			}
		}
		
		[Column(Storage="_ArtistNameHe", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string ArtistNameHe
		{
			get
			{
				return this._ArtistNameHe;
			}
			set
			{
				if ((this._ArtistNameHe != value))
				{
					this.OnArtistNameHeChanging(value);
					this.SendPropertyChanging();
					this._ArtistNameHe = value;
					this.SendPropertyChanged("ArtistNameHe");
					this.OnArtistNameHeChanged();
				}
			}
		}
		
		[Column(Storage="_ArtistNameEn", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string ArtistNameEn
		{
			get
			{
				return this._ArtistNameEn;
			}
			set
			{
				if ((this._ArtistNameEn != value))
				{
					this.OnArtistNameEnChanging(value);
					this.SendPropertyChanging();
					this._ArtistNameEn = value;
					this.SendPropertyChanged("ArtistNameEn");
					this.OnArtistNameEnChanged();
				}
			}
		}
		
		[Column(Storage="_ArtistTextHe", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string ArtistTextHe
		{
			get
			{
				return this._ArtistTextHe;
			}
			set
			{
				if ((this._ArtistTextHe != value))
				{
					this.OnArtistTextHeChanging(value);
					this.SendPropertyChanging();
					this._ArtistTextHe = value;
					this.SendPropertyChanged("ArtistTextHe");
					this.OnArtistTextHeChanged();
				}
			}
		}
		
		[Column(Storage="_ArtistTextEn", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string ArtistTextEn
		{
			get
			{
				return this._ArtistTextEn;
			}
			set
			{
				if ((this._ArtistTextEn != value))
				{
					this.OnArtistTextEnChanging(value);
					this.SendPropertyChanging();
					this._ArtistTextEn = value;
					this.SendPropertyChanged("ArtistTextEn");
					this.OnArtistTextEnChanged();
				}
			}
		}
		
		[Column(Storage="_PicColorFullPath", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string PicColorFullPath
		{
			get
			{
				return this._PicColorFullPath;
			}
			set
			{
				if ((this._PicColorFullPath != value))
				{
					this.OnPicColorFullPathChanging(value);
					this.SendPropertyChanging();
					this._PicColorFullPath = value;
					this.SendPropertyChanged("PicColorFullPath");
					this.OnPicColorFullPathChanged();
				}
			}
		}
		
		[Column(Storage="_PicBWFullPath", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string PicBWFullPath
		{
			get
			{
				return this._PicBWFullPath;
			}
			set
			{
				if ((this._PicBWFullPath != value))
				{
					this.OnPicBWFullPathChanging(value);
					this.SendPropertyChanging();
					this._PicBWFullPath = value;
					this.SendPropertyChanged("PicBWFullPath");
					this.OnPicBWFullPathChanged();
				}
			}
		}
		
		[Column(Storage="_PicMainFullPath", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string PicMainFullPath
		{
			get
			{
				return this._PicMainFullPath;
			}
			set
			{
				if ((this._PicMainFullPath != value))
				{
					this.OnPicMainFullPathChanging(value);
					this.SendPropertyChanging();
					this._PicMainFullPath = value;
					this.SendPropertyChanged("PicMainFullPath");
					this.OnPicMainFullPathChanged();
				}
			}
		}
		
		[Column(Storage="_PicColorRelativePath", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string PicColorRelativePath
		{
			get
			{
				return this._PicColorRelativePath;
			}
			set
			{
				if ((this._PicColorRelativePath != value))
				{
					this.OnPicColorRelativePathChanging(value);
					this.SendPropertyChanging();
					this._PicColorRelativePath = value;
					this.SendPropertyChanged("PicColorRelativePath");
					this.OnPicColorRelativePathChanged();
				}
			}
		}
		
		[Column(Storage="_PicBWRelativePath", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string PicBWRelativePath
		{
			get
			{
				return this._PicBWRelativePath;
			}
			set
			{
				if ((this._PicBWRelativePath != value))
				{
					this.OnPicBWRelativePathChanging(value);
					this.SendPropertyChanging();
					this._PicBWRelativePath = value;
					this.SendPropertyChanged("PicBWRelativePath");
					this.OnPicBWRelativePathChanged();
				}
			}
		}
		
		[Column(Storage="_PicMainRelativePath", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string PicMainRelativePath
		{
			get
			{
				return this._PicMainRelativePath;
			}
			set
			{
				if ((this._PicMainRelativePath != value))
				{
					this.OnPicMainRelativePathChanging(value);
					this.SendPropertyChanging();
					this._PicMainRelativePath = value;
					this.SendPropertyChanged("PicMainRelativePath");
					this.OnPicMainRelativePathChanged();
				}
			}
		}
		
		[Column(Storage="_ProPlace", DbType="Int NOT NULL")]
		public int ProPlace
		{
			get
			{
				return this._ProPlace;
			}
			set
			{
				if ((this._ProPlace != value))
				{
					this.OnProPlaceChanging(value);
					this.SendPropertyChanging();
					this._ProPlace = value;
					this.SendPropertyChanged("ProPlace");
					this.OnProPlaceChanged();
				}
			}
		}
		
		[Column(Storage="_Active", DbType="TinyInt NOT NULL")]
		public byte Active
		{
			get
			{
				return this._Active;
			}
			set
			{
				if ((this._Active != value))
				{
					this.OnActiveChanging(value);
					this.SendPropertyChanging();
					this._Active = value;
					this.SendPropertyChanged("Active");
					this.OnActiveChanged();
				}
			}
		}
		
		[Column(Storage="_UploadTime", DbType="DateTime NOT NULL")]
		public System.DateTime UploadTime
		{
			get
			{
				return this._UploadTime;
			}
			set
			{
				if ((this._UploadTime != value))
				{
					this.OnUploadTimeChanging(value);
					this.SendPropertyChanging();
					this._UploadTime = value;
					this.SendPropertyChanged("UploadTime");
					this.OnUploadTimeChanged();
				}
			}
		}
		
		[Column(Storage="_spUploadTime", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string spUploadTime
		{
			get
			{
				return this._spUploadTime;
			}
			set
			{
				if ((this._spUploadTime != value))
				{
					this.OnspUploadTimeChanging(value);
					this.SendPropertyChanging();
					this._spUploadTime = value;
					this.SendPropertyChanged("spUploadTime");
					this.OnspUploadTimeChanged();
				}
			}
		}
		
		[Column(Storage="_spActive", DbType="NVarChar(20) NOT NULL", CanBeNull=false)]
		public string spActive
		{
			get
			{
				return this._spActive;
			}
			set
			{
				if ((this._spActive != value))
				{
					this.OnspActiveChanging(value);
					this.SendPropertyChanging();
					this._spActive = value;
					this.SendPropertyChanged("spActive");
					this.OnspActiveChanged();
				}
			}
		}
		
		[Column(Storage="_LastUpdate", DbType="DateTime NOT NULL")]
		public System.DateTime LastUpdate
		{
			get
			{
				return this._LastUpdate;
			}
			set
			{
				if ((this._LastUpdate != value))
				{
					this.OnLastUpdateChanging(value);
					this.SendPropertyChanging();
					this._LastUpdate = value;
					this.SendPropertyChanged("LastUpdate");
					this.OnLastUpdateChanged();
				}
			}
		}
		
		[Column(Storage="_spLastUpdate", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string spLastUpdate
		{
			get
			{
				return this._spLastUpdate;
			}
			set
			{
				if ((this._spLastUpdate != value))
				{
					this.OnspLastUpdateChanging(value);
					this.SendPropertyChanging();
					this._spLastUpdate = value;
					this.SendPropertyChanged("spLastUpdate");
					this.OnspLastUpdateChanged();
				}
			}
		}
		
		[Association(Name="Production_Song", Storage="_Songs", ThisKey="ProID", OtherKey="ProID")]
		public EntitySet<Song> Songs
		{
			get
			{
				return this._Songs;
			}
			set
			{
				this._Songs.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Songs(Song entity)
		{
			this.SendPropertyChanging();
			entity.Production = this;
		}
		
		private void detach_Songs(Song entity)
		{
			this.SendPropertyChanging();
			entity.Production = null;
		}
	}
	
	[Table(Name="dbo.PrPic")]
	public partial class PrPic : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _PicID;
		
		private string _PicFullPath;
		
		private string _PicRelativePath;
		
		private string _PicName;
		
		private byte _Active;
		
		private System.DateTime _UploadTime;
		
		private string _spUploadTime;
		
		private string _spActive;
		
		private System.DateTime _LastUpdate;
		
		private string _spLastUpdate;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnPicIDChanging(string value);
    partial void OnPicIDChanged();
    partial void OnPicFullPathChanging(string value);
    partial void OnPicFullPathChanged();
    partial void OnPicRelativePathChanging(string value);
    partial void OnPicRelativePathChanged();
    partial void OnPicNameChanging(string value);
    partial void OnPicNameChanged();
    partial void OnActiveChanging(byte value);
    partial void OnActiveChanged();
    partial void OnUploadTimeChanging(System.DateTime value);
    partial void OnUploadTimeChanged();
    partial void OnspUploadTimeChanging(string value);
    partial void OnspUploadTimeChanged();
    partial void OnspActiveChanging(string value);
    partial void OnspActiveChanged();
    partial void OnLastUpdateChanging(System.DateTime value);
    partial void OnLastUpdateChanged();
    partial void OnspLastUpdateChanging(string value);
    partial void OnspLastUpdateChanged();
    #endregion
		
		public PrPic()
		{
			OnCreated();
		}
		
		[Column(Storage="_PicID", DbType="NVarChar(50) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string PicID
		{
			get
			{
				return this._PicID;
			}
			set
			{
				if ((this._PicID != value))
				{
					this.OnPicIDChanging(value);
					this.SendPropertyChanging();
					this._PicID = value;
					this.SendPropertyChanged("PicID");
					this.OnPicIDChanged();
				}
			}
		}
		
		[Column(Storage="_PicFullPath", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string PicFullPath
		{
			get
			{
				return this._PicFullPath;
			}
			set
			{
				if ((this._PicFullPath != value))
				{
					this.OnPicFullPathChanging(value);
					this.SendPropertyChanging();
					this._PicFullPath = value;
					this.SendPropertyChanged("PicFullPath");
					this.OnPicFullPathChanged();
				}
			}
		}
		
		[Column(Storage="_PicRelativePath", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string PicRelativePath
		{
			get
			{
				return this._PicRelativePath;
			}
			set
			{
				if ((this._PicRelativePath != value))
				{
					this.OnPicRelativePathChanging(value);
					this.SendPropertyChanging();
					this._PicRelativePath = value;
					this.SendPropertyChanged("PicRelativePath");
					this.OnPicRelativePathChanged();
				}
			}
		}
		
		[Column(Storage="_PicName", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string PicName
		{
			get
			{
				return this._PicName;
			}
			set
			{
				if ((this._PicName != value))
				{
					this.OnPicNameChanging(value);
					this.SendPropertyChanging();
					this._PicName = value;
					this.SendPropertyChanged("PicName");
					this.OnPicNameChanged();
				}
			}
		}
		
		[Column(Storage="_Active", DbType="TinyInt NOT NULL")]
		public byte Active
		{
			get
			{
				return this._Active;
			}
			set
			{
				if ((this._Active != value))
				{
					this.OnActiveChanging(value);
					this.SendPropertyChanging();
					this._Active = value;
					this.SendPropertyChanged("Active");
					this.OnActiveChanged();
				}
			}
		}
		
		[Column(Storage="_UploadTime", DbType="DateTime NOT NULL")]
		public System.DateTime UploadTime
		{
			get
			{
				return this._UploadTime;
			}
			set
			{
				if ((this._UploadTime != value))
				{
					this.OnUploadTimeChanging(value);
					this.SendPropertyChanging();
					this._UploadTime = value;
					this.SendPropertyChanged("UploadTime");
					this.OnUploadTimeChanged();
				}
			}
		}
		
		[Column(Storage="_spUploadTime", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string spUploadTime
		{
			get
			{
				return this._spUploadTime;
			}
			set
			{
				if ((this._spUploadTime != value))
				{
					this.OnspUploadTimeChanging(value);
					this.SendPropertyChanging();
					this._spUploadTime = value;
					this.SendPropertyChanged("spUploadTime");
					this.OnspUploadTimeChanged();
				}
			}
		}
		
		[Column(Storage="_spActive", DbType="NVarChar(20) NOT NULL", CanBeNull=false)]
		public string spActive
		{
			get
			{
				return this._spActive;
			}
			set
			{
				if ((this._spActive != value))
				{
					this.OnspActiveChanging(value);
					this.SendPropertyChanging();
					this._spActive = value;
					this.SendPropertyChanged("spActive");
					this.OnspActiveChanged();
				}
			}
		}
		
		[Column(Storage="_LastUpdate", DbType="DateTime NOT NULL")]
		public System.DateTime LastUpdate
		{
			get
			{
				return this._LastUpdate;
			}
			set
			{
				if ((this._LastUpdate != value))
				{
					this.OnLastUpdateChanging(value);
					this.SendPropertyChanging();
					this._LastUpdate = value;
					this.SendPropertyChanged("LastUpdate");
					this.OnLastUpdateChanged();
				}
			}
		}
		
		[Column(Storage="_spLastUpdate", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string spLastUpdate
		{
			get
			{
				return this._spLastUpdate;
			}
			set
			{
				if ((this._spLastUpdate != value))
				{
					this.OnspLastUpdateChanging(value);
					this.SendPropertyChanging();
					this._spLastUpdate = value;
					this.SendPropertyChanged("spLastUpdate");
					this.OnspLastUpdateChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.PrText")]
	public partial class PrText : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _PrTextID;
		
		private string _TextHe;
		
		private string _TextEn;
		
		private System.DateTime _LastUpdate;
		
		private string _spLastUpdate;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnPrTextIDChanging(string value);
    partial void OnPrTextIDChanged();
    partial void OnTextHeChanging(string value);
    partial void OnTextHeChanged();
    partial void OnTextEnChanging(string value);
    partial void OnTextEnChanged();
    partial void OnLastUpdateChanging(System.DateTime value);
    partial void OnLastUpdateChanged();
    partial void OnspLastUpdateChanging(string value);
    partial void OnspLastUpdateChanged();
    #endregion
		
		public PrText()
		{
			OnCreated();
		}
		
		[Column(Storage="_PrTextID", DbType="NVarChar(50) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string PrTextID
		{
			get
			{
				return this._PrTextID;
			}
			set
			{
				if ((this._PrTextID != value))
				{
					this.OnPrTextIDChanging(value);
					this.SendPropertyChanging();
					this._PrTextID = value;
					this.SendPropertyChanged("PrTextID");
					this.OnPrTextIDChanged();
				}
			}
		}
		
		[Column(Storage="_TextHe", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string TextHe
		{
			get
			{
				return this._TextHe;
			}
			set
			{
				if ((this._TextHe != value))
				{
					this.OnTextHeChanging(value);
					this.SendPropertyChanging();
					this._TextHe = value;
					this.SendPropertyChanged("TextHe");
					this.OnTextHeChanged();
				}
			}
		}
		
		[Column(Storage="_TextEn", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string TextEn
		{
			get
			{
				return this._TextEn;
			}
			set
			{
				if ((this._TextEn != value))
				{
					this.OnTextEnChanging(value);
					this.SendPropertyChanging();
					this._TextEn = value;
					this.SendPropertyChanged("TextEn");
					this.OnTextEnChanged();
				}
			}
		}
		
		[Column(Storage="_LastUpdate", DbType="DateTime NOT NULL")]
		public System.DateTime LastUpdate
		{
			get
			{
				return this._LastUpdate;
			}
			set
			{
				if ((this._LastUpdate != value))
				{
					this.OnLastUpdateChanging(value);
					this.SendPropertyChanging();
					this._LastUpdate = value;
					this.SendPropertyChanged("LastUpdate");
					this.OnLastUpdateChanged();
				}
			}
		}
		
		[Column(Storage="_spLastUpdate", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string spLastUpdate
		{
			get
			{
				return this._spLastUpdate;
			}
			set
			{
				if ((this._spLastUpdate != value))
				{
					this.OnspLastUpdateChanging(value);
					this.SendPropertyChanging();
					this._spLastUpdate = value;
					this.SendPropertyChanged("spLastUpdate");
					this.OnspLastUpdateChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.PublishPic")]
	public partial class PublishPic : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _PicID;
		
		private string _GalleryID;
		
		private int _PicPlace;
		
		private string _PicFullPath;
		
		private string _PicRelativePath;
		
		private string _TextHe;
		
		private string _TextEn;
		
		private byte _Active;
		
		private byte _TopPagePlace;
		
		private System.DateTime _UploadTime;
		
		private string _spUploadTime;
		
		private string _spActive;
		
		private System.DateTime _LastUpdate;
		
		private string _spLastUpdate;
		
		private EntityRef<Gallery> _Gallery;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnPicIDChanging(string value);
    partial void OnPicIDChanged();
    partial void OnGalleryIDChanging(string value);
    partial void OnGalleryIDChanged();
    partial void OnPicPlaceChanging(int value);
    partial void OnPicPlaceChanged();
    partial void OnPicFullPathChanging(string value);
    partial void OnPicFullPathChanged();
    partial void OnPicRelativePathChanging(string value);
    partial void OnPicRelativePathChanged();
    partial void OnTextHeChanging(string value);
    partial void OnTextHeChanged();
    partial void OnTextEnChanging(string value);
    partial void OnTextEnChanged();
    partial void OnActiveChanging(byte value);
    partial void OnActiveChanged();
    partial void OnTopPagePlaceChanging(byte value);
    partial void OnTopPagePlaceChanged();
    partial void OnUploadTimeChanging(System.DateTime value);
    partial void OnUploadTimeChanged();
    partial void OnspUploadTimeChanging(string value);
    partial void OnspUploadTimeChanged();
    partial void OnspActiveChanging(string value);
    partial void OnspActiveChanged();
    partial void OnLastUpdateChanging(System.DateTime value);
    partial void OnLastUpdateChanged();
    partial void OnspLastUpdateChanging(string value);
    partial void OnspLastUpdateChanged();
    #endregion
		
		public PublishPic()
		{
			this._Gallery = default(EntityRef<Gallery>);
			OnCreated();
		}
		
		[Column(Storage="_PicID", DbType="NVarChar(50) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string PicID
		{
			get
			{
				return this._PicID;
			}
			set
			{
				if ((this._PicID != value))
				{
					this.OnPicIDChanging(value);
					this.SendPropertyChanging();
					this._PicID = value;
					this.SendPropertyChanged("PicID");
					this.OnPicIDChanged();
				}
			}
		}
		
		[Column(Storage="_GalleryID", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string GalleryID
		{
			get
			{
				return this._GalleryID;
			}
			set
			{
				if ((this._GalleryID != value))
				{
					if (this._Gallery.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnGalleryIDChanging(value);
					this.SendPropertyChanging();
					this._GalleryID = value;
					this.SendPropertyChanged("GalleryID");
					this.OnGalleryIDChanged();
				}
			}
		}
		
		[Column(Storage="_PicPlace", DbType="Int NOT NULL")]
		public int PicPlace
		{
			get
			{
				return this._PicPlace;
			}
			set
			{
				if ((this._PicPlace != value))
				{
					this.OnPicPlaceChanging(value);
					this.SendPropertyChanging();
					this._PicPlace = value;
					this.SendPropertyChanged("PicPlace");
					this.OnPicPlaceChanged();
				}
			}
		}
		
		[Column(Storage="_PicFullPath", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string PicFullPath
		{
			get
			{
				return this._PicFullPath;
			}
			set
			{
				if ((this._PicFullPath != value))
				{
					this.OnPicFullPathChanging(value);
					this.SendPropertyChanging();
					this._PicFullPath = value;
					this.SendPropertyChanged("PicFullPath");
					this.OnPicFullPathChanged();
				}
			}
		}
		
		[Column(Storage="_PicRelativePath", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string PicRelativePath
		{
			get
			{
				return this._PicRelativePath;
			}
			set
			{
				if ((this._PicRelativePath != value))
				{
					this.OnPicRelativePathChanging(value);
					this.SendPropertyChanging();
					this._PicRelativePath = value;
					this.SendPropertyChanged("PicRelativePath");
					this.OnPicRelativePathChanged();
				}
			}
		}
		
		[Column(Storage="_TextHe", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string TextHe
		{
			get
			{
				return this._TextHe;
			}
			set
			{
				if ((this._TextHe != value))
				{
					this.OnTextHeChanging(value);
					this.SendPropertyChanging();
					this._TextHe = value;
					this.SendPropertyChanged("TextHe");
					this.OnTextHeChanged();
				}
			}
		}
		
		[Column(Storage="_TextEn", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string TextEn
		{
			get
			{
				return this._TextEn;
			}
			set
			{
				if ((this._TextEn != value))
				{
					this.OnTextEnChanging(value);
					this.SendPropertyChanging();
					this._TextEn = value;
					this.SendPropertyChanged("TextEn");
					this.OnTextEnChanged();
				}
			}
		}
		
		[Column(Storage="_Active", DbType="TinyInt NOT NULL")]
		public byte Active
		{
			get
			{
				return this._Active;
			}
			set
			{
				if ((this._Active != value))
				{
					this.OnActiveChanging(value);
					this.SendPropertyChanging();
					this._Active = value;
					this.SendPropertyChanged("Active");
					this.OnActiveChanged();
				}
			}
		}
		
		[Column(Storage="_TopPagePlace", DbType="TinyInt NOT NULL")]
		public byte TopPagePlace
		{
			get
			{
				return this._TopPagePlace;
			}
			set
			{
				if ((this._TopPagePlace != value))
				{
					this.OnTopPagePlaceChanging(value);
					this.SendPropertyChanging();
					this._TopPagePlace = value;
					this.SendPropertyChanged("TopPagePlace");
					this.OnTopPagePlaceChanged();
				}
			}
		}
		
		[Column(Storage="_UploadTime", DbType="DateTime NOT NULL")]
		public System.DateTime UploadTime
		{
			get
			{
				return this._UploadTime;
			}
			set
			{
				if ((this._UploadTime != value))
				{
					this.OnUploadTimeChanging(value);
					this.SendPropertyChanging();
					this._UploadTime = value;
					this.SendPropertyChanged("UploadTime");
					this.OnUploadTimeChanged();
				}
			}
		}
		
		[Column(Storage="_spUploadTime", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string spUploadTime
		{
			get
			{
				return this._spUploadTime;
			}
			set
			{
				if ((this._spUploadTime != value))
				{
					this.OnspUploadTimeChanging(value);
					this.SendPropertyChanging();
					this._spUploadTime = value;
					this.SendPropertyChanged("spUploadTime");
					this.OnspUploadTimeChanged();
				}
			}
		}
		
		[Column(Storage="_spActive", DbType="NVarChar(20) NOT NULL", CanBeNull=false)]
		public string spActive
		{
			get
			{
				return this._spActive;
			}
			set
			{
				if ((this._spActive != value))
				{
					this.OnspActiveChanging(value);
					this.SendPropertyChanging();
					this._spActive = value;
					this.SendPropertyChanged("spActive");
					this.OnspActiveChanged();
				}
			}
		}
		
		[Column(Storage="_LastUpdate", DbType="DateTime NOT NULL")]
		public System.DateTime LastUpdate
		{
			get
			{
				return this._LastUpdate;
			}
			set
			{
				if ((this._LastUpdate != value))
				{
					this.OnLastUpdateChanging(value);
					this.SendPropertyChanging();
					this._LastUpdate = value;
					this.SendPropertyChanged("LastUpdate");
					this.OnLastUpdateChanged();
				}
			}
		}
		
		[Column(Storage="_spLastUpdate", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string spLastUpdate
		{
			get
			{
				return this._spLastUpdate;
			}
			set
			{
				if ((this._spLastUpdate != value))
				{
					this.OnspLastUpdateChanging(value);
					this.SendPropertyChanging();
					this._spLastUpdate = value;
					this.SendPropertyChanged("spLastUpdate");
					this.OnspLastUpdateChanged();
				}
			}
		}
		
		[Association(Name="Gallery_PublishPic", Storage="_Gallery", ThisKey="GalleryID", OtherKey="GalleryID", IsForeignKey=true)]
		public Gallery Gallery
		{
			get
			{
				return this._Gallery.Entity;
			}
			set
			{
				Gallery previousValue = this._Gallery.Entity;
				if (((previousValue != value) 
							|| (this._Gallery.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Gallery.Entity = null;
						previousValue.PublishPics.Remove(this);
					}
					this._Gallery.Entity = value;
					if ((value != null))
					{
						value.PublishPics.Add(this);
						this._GalleryID = value.GalleryID;
					}
					else
					{
						this._GalleryID = default(string);
					}
					this.SendPropertyChanged("Gallery");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.Song")]
	public partial class Song : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _SongID;
		
		private string _ProID;
		
		private int _SongPlace;
		
		private string _SongNameHe;
		
		private string _SongNameEn;
		
		private string _YouTubePath;
		
		private byte _Active;
		
		private System.DateTime _UploadTime;
		
		private string _spUploadTime;
		
		private string _spActive;
		
		private System.DateTime _LastUpdate;
		
		private string _spLastUpdate;
		
		private EntityRef<Production> _Production;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnSongIDChanging(string value);
    partial void OnSongIDChanged();
    partial void OnProIDChanging(string value);
    partial void OnProIDChanged();
    partial void OnSongPlaceChanging(int value);
    partial void OnSongPlaceChanged();
    partial void OnSongNameHeChanging(string value);
    partial void OnSongNameHeChanged();
    partial void OnSongNameEnChanging(string value);
    partial void OnSongNameEnChanged();
    partial void OnYouTubePathChanging(string value);
    partial void OnYouTubePathChanged();
    partial void OnActiveChanging(byte value);
    partial void OnActiveChanged();
    partial void OnUploadTimeChanging(System.DateTime value);
    partial void OnUploadTimeChanged();
    partial void OnspUploadTimeChanging(string value);
    partial void OnspUploadTimeChanged();
    partial void OnspActiveChanging(string value);
    partial void OnspActiveChanged();
    partial void OnLastUpdateChanging(System.DateTime value);
    partial void OnLastUpdateChanged();
    partial void OnspLastUpdateChanging(string value);
    partial void OnspLastUpdateChanged();
    #endregion
		
		public Song()
		{
			this._Production = default(EntityRef<Production>);
			OnCreated();
		}
		
		[Column(Storage="_SongID", DbType="NVarChar(50) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string SongID
		{
			get
			{
				return this._SongID;
			}
			set
			{
				if ((this._SongID != value))
				{
					this.OnSongIDChanging(value);
					this.SendPropertyChanging();
					this._SongID = value;
					this.SendPropertyChanged("SongID");
					this.OnSongIDChanged();
				}
			}
		}
		
		[Column(Storage="_ProID", DbType="NVarChar(50) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string ProID
		{
			get
			{
				return this._ProID;
			}
			set
			{
				if ((this._ProID != value))
				{
					if (this._Production.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnProIDChanging(value);
					this.SendPropertyChanging();
					this._ProID = value;
					this.SendPropertyChanged("ProID");
					this.OnProIDChanged();
				}
			}
		}
		
		[Column(Storage="_SongPlace", DbType="Int NOT NULL")]
		public int SongPlace
		{
			get
			{
				return this._SongPlace;
			}
			set
			{
				if ((this._SongPlace != value))
				{
					this.OnSongPlaceChanging(value);
					this.SendPropertyChanging();
					this._SongPlace = value;
					this.SendPropertyChanged("SongPlace");
					this.OnSongPlaceChanged();
				}
			}
		}
		
		[Column(Storage="_SongNameHe", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string SongNameHe
		{
			get
			{
				return this._SongNameHe;
			}
			set
			{
				if ((this._SongNameHe != value))
				{
					this.OnSongNameHeChanging(value);
					this.SendPropertyChanging();
					this._SongNameHe = value;
					this.SendPropertyChanged("SongNameHe");
					this.OnSongNameHeChanged();
				}
			}
		}
		
		[Column(Storage="_SongNameEn", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string SongNameEn
		{
			get
			{
				return this._SongNameEn;
			}
			set
			{
				if ((this._SongNameEn != value))
				{
					this.OnSongNameEnChanging(value);
					this.SendPropertyChanging();
					this._SongNameEn = value;
					this.SendPropertyChanged("SongNameEn");
					this.OnSongNameEnChanged();
				}
			}
		}
		
		[Column(Storage="_YouTubePath", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string YouTubePath
		{
			get
			{
				return this._YouTubePath;
			}
			set
			{
				if ((this._YouTubePath != value))
				{
					this.OnYouTubePathChanging(value);
					this.SendPropertyChanging();
					this._YouTubePath = value;
					this.SendPropertyChanged("YouTubePath");
					this.OnYouTubePathChanged();
				}
			}
		}
		
		[Column(Storage="_Active", DbType="TinyInt NOT NULL")]
		public byte Active
		{
			get
			{
				return this._Active;
			}
			set
			{
				if ((this._Active != value))
				{
					this.OnActiveChanging(value);
					this.SendPropertyChanging();
					this._Active = value;
					this.SendPropertyChanged("Active");
					this.OnActiveChanged();
				}
			}
		}
		
		[Column(Storage="_UploadTime", DbType="DateTime NOT NULL")]
		public System.DateTime UploadTime
		{
			get
			{
				return this._UploadTime;
			}
			set
			{
				if ((this._UploadTime != value))
				{
					this.OnUploadTimeChanging(value);
					this.SendPropertyChanging();
					this._UploadTime = value;
					this.SendPropertyChanged("UploadTime");
					this.OnUploadTimeChanged();
				}
			}
		}
		
		[Column(Storage="_spUploadTime", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string spUploadTime
		{
			get
			{
				return this._spUploadTime;
			}
			set
			{
				if ((this._spUploadTime != value))
				{
					this.OnspUploadTimeChanging(value);
					this.SendPropertyChanging();
					this._spUploadTime = value;
					this.SendPropertyChanged("spUploadTime");
					this.OnspUploadTimeChanged();
				}
			}
		}
		
		[Column(Storage="_spActive", DbType="NVarChar(20) NOT NULL", CanBeNull=false)]
		public string spActive
		{
			get
			{
				return this._spActive;
			}
			set
			{
				if ((this._spActive != value))
				{
					this.OnspActiveChanging(value);
					this.SendPropertyChanging();
					this._spActive = value;
					this.SendPropertyChanged("spActive");
					this.OnspActiveChanged();
				}
			}
		}
		
		[Column(Storage="_LastUpdate", DbType="DateTime NOT NULL")]
		public System.DateTime LastUpdate
		{
			get
			{
				return this._LastUpdate;
			}
			set
			{
				if ((this._LastUpdate != value))
				{
					this.OnLastUpdateChanging(value);
					this.SendPropertyChanging();
					this._LastUpdate = value;
					this.SendPropertyChanged("LastUpdate");
					this.OnLastUpdateChanged();
				}
			}
		}
		
		[Column(Storage="_spLastUpdate", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string spLastUpdate
		{
			get
			{
				return this._spLastUpdate;
			}
			set
			{
				if ((this._spLastUpdate != value))
				{
					this.OnspLastUpdateChanging(value);
					this.SendPropertyChanging();
					this._spLastUpdate = value;
					this.SendPropertyChanged("spLastUpdate");
					this.OnspLastUpdateChanged();
				}
			}
		}
		
		[Association(Name="Production_Song", Storage="_Production", ThisKey="ProID", OtherKey="ProID", IsForeignKey=true)]
		public Production Production
		{
			get
			{
				return this._Production.Entity;
			}
			set
			{
				Production previousValue = this._Production.Entity;
				if (((previousValue != value) 
							|| (this._Production.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Production.Entity = null;
						previousValue.Songs.Remove(this);
					}
					this._Production.Entity = value;
					if ((value != null))
					{
						value.Songs.Add(this);
						this._ProID = value.ProID;
					}
					else
					{
						this._ProID = default(string);
					}
					this.SendPropertyChanged("Production");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.Staffs")]
	public partial class Staff : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _StaffID;
		
		private string _TitleHe;
		
		private string _TitleEn;
		
		private string _TextHe;
		
		private string _TextEn;
		
		private string _PicFullPath;
		
		private string _PicRelativePath;
		
		private int _StaffPlace;
		
		private byte _IsExistingStaff;
		
		private System.DateTime _LastUpdate;
		
		private string _spLastUpdate;
		
		private byte _Active;
		
		private string _spActive;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnStaffIDChanging(string value);
    partial void OnStaffIDChanged();
    partial void OnTitleHeChanging(string value);
    partial void OnTitleHeChanged();
    partial void OnTitleEnChanging(string value);
    partial void OnTitleEnChanged();
    partial void OnTextHeChanging(string value);
    partial void OnTextHeChanged();
    partial void OnTextEnChanging(string value);
    partial void OnTextEnChanged();
    partial void OnPicFullPathChanging(string value);
    partial void OnPicFullPathChanged();
    partial void OnPicRelativePathChanging(string value);
    partial void OnPicRelativePathChanged();
    partial void OnStaffPlaceChanging(int value);
    partial void OnStaffPlaceChanged();
    partial void OnIsExistingStaffChanging(byte value);
    partial void OnIsExistingStaffChanged();
    partial void OnLastUpdateChanging(System.DateTime value);
    partial void OnLastUpdateChanged();
    partial void OnspLastUpdateChanging(string value);
    partial void OnspLastUpdateChanged();
    partial void OnActiveChanging(byte value);
    partial void OnActiveChanged();
    partial void OnspActiveChanging(string value);
    partial void OnspActiveChanged();
    #endregion
		
		public Staff()
		{
			OnCreated();
		}
		
		[Column(Storage="_StaffID", DbType="NVarChar(50) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string StaffID
		{
			get
			{
				return this._StaffID;
			}
			set
			{
				if ((this._StaffID != value))
				{
					this.OnStaffIDChanging(value);
					this.SendPropertyChanging();
					this._StaffID = value;
					this.SendPropertyChanged("StaffID");
					this.OnStaffIDChanged();
				}
			}
		}
		
		[Column(Storage="_TitleHe", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string TitleHe
		{
			get
			{
				return this._TitleHe;
			}
			set
			{
				if ((this._TitleHe != value))
				{
					this.OnTitleHeChanging(value);
					this.SendPropertyChanging();
					this._TitleHe = value;
					this.SendPropertyChanged("TitleHe");
					this.OnTitleHeChanged();
				}
			}
		}
		
		[Column(Storage="_TitleEn", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string TitleEn
		{
			get
			{
				return this._TitleEn;
			}
			set
			{
				if ((this._TitleEn != value))
				{
					this.OnTitleEnChanging(value);
					this.SendPropertyChanging();
					this._TitleEn = value;
					this.SendPropertyChanged("TitleEn");
					this.OnTitleEnChanged();
				}
			}
		}
		
		[Column(Storage="_TextHe", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string TextHe
		{
			get
			{
				return this._TextHe;
			}
			set
			{
				if ((this._TextHe != value))
				{
					this.OnTextHeChanging(value);
					this.SendPropertyChanging();
					this._TextHe = value;
					this.SendPropertyChanged("TextHe");
					this.OnTextHeChanged();
				}
			}
		}
		
		[Column(Storage="_TextEn", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string TextEn
		{
			get
			{
				return this._TextEn;
			}
			set
			{
				if ((this._TextEn != value))
				{
					this.OnTextEnChanging(value);
					this.SendPropertyChanging();
					this._TextEn = value;
					this.SendPropertyChanged("TextEn");
					this.OnTextEnChanged();
				}
			}
		}
		
		[Column(Storage="_PicFullPath", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string PicFullPath
		{
			get
			{
				return this._PicFullPath;
			}
			set
			{
				if ((this._PicFullPath != value))
				{
					this.OnPicFullPathChanging(value);
					this.SendPropertyChanging();
					this._PicFullPath = value;
					this.SendPropertyChanged("PicFullPath");
					this.OnPicFullPathChanged();
				}
			}
		}
		
		[Column(Storage="_PicRelativePath", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string PicRelativePath
		{
			get
			{
				return this._PicRelativePath;
			}
			set
			{
				if ((this._PicRelativePath != value))
				{
					this.OnPicRelativePathChanging(value);
					this.SendPropertyChanging();
					this._PicRelativePath = value;
					this.SendPropertyChanged("PicRelativePath");
					this.OnPicRelativePathChanged();
				}
			}
		}
		
		[Column(Storage="_StaffPlace", DbType="Int NOT NULL")]
		public int StaffPlace
		{
			get
			{
				return this._StaffPlace;
			}
			set
			{
				if ((this._StaffPlace != value))
				{
					this.OnStaffPlaceChanging(value);
					this.SendPropertyChanging();
					this._StaffPlace = value;
					this.SendPropertyChanged("StaffPlace");
					this.OnStaffPlaceChanged();
				}
			}
		}
		
		[Column(Storage="_IsExistingStaff", DbType="TinyInt NOT NULL")]
		public byte IsExistingStaff
		{
			get
			{
				return this._IsExistingStaff;
			}
			set
			{
				if ((this._IsExistingStaff != value))
				{
					this.OnIsExistingStaffChanging(value);
					this.SendPropertyChanging();
					this._IsExistingStaff = value;
					this.SendPropertyChanged("IsExistingStaff");
					this.OnIsExistingStaffChanged();
				}
			}
		}
		
		[Column(Storage="_LastUpdate", DbType="DateTime NOT NULL")]
		public System.DateTime LastUpdate
		{
			get
			{
				return this._LastUpdate;
			}
			set
			{
				if ((this._LastUpdate != value))
				{
					this.OnLastUpdateChanging(value);
					this.SendPropertyChanging();
					this._LastUpdate = value;
					this.SendPropertyChanged("LastUpdate");
					this.OnLastUpdateChanged();
				}
			}
		}
		
		[Column(Storage="_spLastUpdate", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string spLastUpdate
		{
			get
			{
				return this._spLastUpdate;
			}
			set
			{
				if ((this._spLastUpdate != value))
				{
					this.OnspLastUpdateChanging(value);
					this.SendPropertyChanging();
					this._spLastUpdate = value;
					this.SendPropertyChanged("spLastUpdate");
					this.OnspLastUpdateChanged();
				}
			}
		}
		
		[Column(Storage="_Active", DbType="TinyInt NOT NULL")]
		public byte Active
		{
			get
			{
				return this._Active;
			}
			set
			{
				if ((this._Active != value))
				{
					this.OnActiveChanging(value);
					this.SendPropertyChanging();
					this._Active = value;
					this.SendPropertyChanged("Active");
					this.OnActiveChanged();
				}
			}
		}
		
		[Column(Storage="_spActive", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string spActive
		{
			get
			{
				return this._spActive;
			}
			set
			{
				if ((this._spActive != value))
				{
					this.OnspActiveChanging(value);
					this.SendPropertyChanging();
					this._spActive = value;
					this.SendPropertyChanged("spActive");
					this.OnspActiveChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.StudioAbout")]
	public partial class StudioAbout : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _StudioAboutID;
		
		private string _TechnicalHe;
		
		private string _TechnicalEn;
		
		private string _AboutHe;
		
		private string _AboutEn;
		
		private System.DateTime _LastUpdate;
		
		private string _spLastUpdate;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnStudioAboutIDChanging(string value);
    partial void OnStudioAboutIDChanged();
    partial void OnTechnicalHeChanging(string value);
    partial void OnTechnicalHeChanged();
    partial void OnTechnicalEnChanging(string value);
    partial void OnTechnicalEnChanged();
    partial void OnAboutHeChanging(string value);
    partial void OnAboutHeChanged();
    partial void OnAboutEnChanging(string value);
    partial void OnAboutEnChanged();
    partial void OnLastUpdateChanging(System.DateTime value);
    partial void OnLastUpdateChanged();
    partial void OnspLastUpdateChanging(string value);
    partial void OnspLastUpdateChanged();
    #endregion
		
		public StudioAbout()
		{
			OnCreated();
		}
		
		[Column(Storage="_StudioAboutID", DbType="NVarChar(50) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string StudioAboutID
		{
			get
			{
				return this._StudioAboutID;
			}
			set
			{
				if ((this._StudioAboutID != value))
				{
					this.OnStudioAboutIDChanging(value);
					this.SendPropertyChanging();
					this._StudioAboutID = value;
					this.SendPropertyChanged("StudioAboutID");
					this.OnStudioAboutIDChanged();
				}
			}
		}
		
		[Column(Storage="_TechnicalHe", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string TechnicalHe
		{
			get
			{
				return this._TechnicalHe;
			}
			set
			{
				if ((this._TechnicalHe != value))
				{
					this.OnTechnicalHeChanging(value);
					this.SendPropertyChanging();
					this._TechnicalHe = value;
					this.SendPropertyChanged("TechnicalHe");
					this.OnTechnicalHeChanged();
				}
			}
		}
		
		[Column(Storage="_TechnicalEn", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string TechnicalEn
		{
			get
			{
				return this._TechnicalEn;
			}
			set
			{
				if ((this._TechnicalEn != value))
				{
					this.OnTechnicalEnChanging(value);
					this.SendPropertyChanging();
					this._TechnicalEn = value;
					this.SendPropertyChanged("TechnicalEn");
					this.OnTechnicalEnChanged();
				}
			}
		}
		
		[Column(Storage="_AboutHe", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string AboutHe
		{
			get
			{
				return this._AboutHe;
			}
			set
			{
				if ((this._AboutHe != value))
				{
					this.OnAboutHeChanging(value);
					this.SendPropertyChanging();
					this._AboutHe = value;
					this.SendPropertyChanged("AboutHe");
					this.OnAboutHeChanged();
				}
			}
		}
		
		[Column(Storage="_AboutEn", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string AboutEn
		{
			get
			{
				return this._AboutEn;
			}
			set
			{
				if ((this._AboutEn != value))
				{
					this.OnAboutEnChanging(value);
					this.SendPropertyChanging();
					this._AboutEn = value;
					this.SendPropertyChanged("AboutEn");
					this.OnAboutEnChanged();
				}
			}
		}
		
		[Column(Storage="_LastUpdate", DbType="DateTime NOT NULL")]
		public System.DateTime LastUpdate
		{
			get
			{
				return this._LastUpdate;
			}
			set
			{
				if ((this._LastUpdate != value))
				{
					this.OnLastUpdateChanging(value);
					this.SendPropertyChanging();
					this._LastUpdate = value;
					this.SendPropertyChanged("LastUpdate");
					this.OnLastUpdateChanged();
				}
			}
		}
		
		[Column(Storage="_spLastUpdate", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string spLastUpdate
		{
			get
			{
				return this._spLastUpdate;
			}
			set
			{
				if ((this._spLastUpdate != value))
				{
					this.OnspLastUpdateChanging(value);
					this.SendPropertyChanging();
					this._spLastUpdate = value;
					this.SendPropertyChanged("spLastUpdate");
					this.OnspLastUpdateChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.StudioRoomPic")]
	public partial class StudioRoomPic : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _PicID;
		
		private string _RoomName;
		
		private int _PicPlace;
		
		private string _PicName;
		
		private string _PicFullColorPath;
		
		private string _PicFullBWPath;
		
		private string _PicRelativeColorPath;
		
		private string _PicRelativeBWPath;
		
		private byte _Active;
		
		private System.DateTime _UploadTime;
		
		private string _spUploadTime;
		
		private string _spActive;
		
		private string _spLastUpdate;
		
		private System.DateTime _LastUpdate;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnPicIDChanging(string value);
    partial void OnPicIDChanged();
    partial void OnRoomNameChanging(string value);
    partial void OnRoomNameChanged();
    partial void OnPicPlaceChanging(int value);
    partial void OnPicPlaceChanged();
    partial void OnPicNameChanging(string value);
    partial void OnPicNameChanged();
    partial void OnPicFullColorPathChanging(string value);
    partial void OnPicFullColorPathChanged();
    partial void OnPicFullBWPathChanging(string value);
    partial void OnPicFullBWPathChanged();
    partial void OnPicRelativeColorPathChanging(string value);
    partial void OnPicRelativeColorPathChanged();
    partial void OnPicRelativeBWPathChanging(string value);
    partial void OnPicRelativeBWPathChanged();
    partial void OnActiveChanging(byte value);
    partial void OnActiveChanged();
    partial void OnUploadTimeChanging(System.DateTime value);
    partial void OnUploadTimeChanged();
    partial void OnspUploadTimeChanging(string value);
    partial void OnspUploadTimeChanged();
    partial void OnspActiveChanging(string value);
    partial void OnspActiveChanged();
    partial void OnspLastUpdateChanging(string value);
    partial void OnspLastUpdateChanged();
    partial void OnLastUpdateChanging(System.DateTime value);
    partial void OnLastUpdateChanged();
    #endregion
		
		public StudioRoomPic()
		{
			OnCreated();
		}
		
		[Column(Storage="_PicID", DbType="NVarChar(50) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string PicID
		{
			get
			{
				return this._PicID;
			}
			set
			{
				if ((this._PicID != value))
				{
					this.OnPicIDChanging(value);
					this.SendPropertyChanging();
					this._PicID = value;
					this.SendPropertyChanged("PicID");
					this.OnPicIDChanged();
				}
			}
		}
		
		[Column(Storage="_RoomName", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string RoomName
		{
			get
			{
				return this._RoomName;
			}
			set
			{
				if ((this._RoomName != value))
				{
					this.OnRoomNameChanging(value);
					this.SendPropertyChanging();
					this._RoomName = value;
					this.SendPropertyChanged("RoomName");
					this.OnRoomNameChanged();
				}
			}
		}
		
		[Column(Storage="_PicPlace", DbType="Int NOT NULL")]
		public int PicPlace
		{
			get
			{
				return this._PicPlace;
			}
			set
			{
				if ((this._PicPlace != value))
				{
					this.OnPicPlaceChanging(value);
					this.SendPropertyChanging();
					this._PicPlace = value;
					this.SendPropertyChanged("PicPlace");
					this.OnPicPlaceChanged();
				}
			}
		}
		
		[Column(Storage="_PicName", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string PicName
		{
			get
			{
				return this._PicName;
			}
			set
			{
				if ((this._PicName != value))
				{
					this.OnPicNameChanging(value);
					this.SendPropertyChanging();
					this._PicName = value;
					this.SendPropertyChanged("PicName");
					this.OnPicNameChanged();
				}
			}
		}
		
		[Column(Storage="_PicFullColorPath", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string PicFullColorPath
		{
			get
			{
				return this._PicFullColorPath;
			}
			set
			{
				if ((this._PicFullColorPath != value))
				{
					this.OnPicFullColorPathChanging(value);
					this.SendPropertyChanging();
					this._PicFullColorPath = value;
					this.SendPropertyChanged("PicFullColorPath");
					this.OnPicFullColorPathChanged();
				}
			}
		}
		
		[Column(Storage="_PicFullBWPath", DbType="NVarChar(MAX)")]
		public string PicFullBWPath
		{
			get
			{
				return this._PicFullBWPath;
			}
			set
			{
				if ((this._PicFullBWPath != value))
				{
					this.OnPicFullBWPathChanging(value);
					this.SendPropertyChanging();
					this._PicFullBWPath = value;
					this.SendPropertyChanged("PicFullBWPath");
					this.OnPicFullBWPathChanged();
				}
			}
		}
		
		[Column(Storage="_PicRelativeColorPath", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string PicRelativeColorPath
		{
			get
			{
				return this._PicRelativeColorPath;
			}
			set
			{
				if ((this._PicRelativeColorPath != value))
				{
					this.OnPicRelativeColorPathChanging(value);
					this.SendPropertyChanging();
					this._PicRelativeColorPath = value;
					this.SendPropertyChanged("PicRelativeColorPath");
					this.OnPicRelativeColorPathChanged();
				}
			}
		}
		
		[Column(Storage="_PicRelativeBWPath", DbType="NVarChar(MAX)")]
		public string PicRelativeBWPath
		{
			get
			{
				return this._PicRelativeBWPath;
			}
			set
			{
				if ((this._PicRelativeBWPath != value))
				{
					this.OnPicRelativeBWPathChanging(value);
					this.SendPropertyChanging();
					this._PicRelativeBWPath = value;
					this.SendPropertyChanged("PicRelativeBWPath");
					this.OnPicRelativeBWPathChanged();
				}
			}
		}
		
		[Column(Storage="_Active", DbType="TinyInt NOT NULL")]
		public byte Active
		{
			get
			{
				return this._Active;
			}
			set
			{
				if ((this._Active != value))
				{
					this.OnActiveChanging(value);
					this.SendPropertyChanging();
					this._Active = value;
					this.SendPropertyChanged("Active");
					this.OnActiveChanged();
				}
			}
		}
		
		[Column(Storage="_UploadTime", DbType="DateTime NOT NULL")]
		public System.DateTime UploadTime
		{
			get
			{
				return this._UploadTime;
			}
			set
			{
				if ((this._UploadTime != value))
				{
					this.OnUploadTimeChanging(value);
					this.SendPropertyChanging();
					this._UploadTime = value;
					this.SendPropertyChanged("UploadTime");
					this.OnUploadTimeChanged();
				}
			}
		}
		
		[Column(Storage="_spUploadTime", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string spUploadTime
		{
			get
			{
				return this._spUploadTime;
			}
			set
			{
				if ((this._spUploadTime != value))
				{
					this.OnspUploadTimeChanging(value);
					this.SendPropertyChanging();
					this._spUploadTime = value;
					this.SendPropertyChanged("spUploadTime");
					this.OnspUploadTimeChanged();
				}
			}
		}
		
		[Column(Storage="_spActive", DbType="NVarChar(20) NOT NULL", CanBeNull=false)]
		public string spActive
		{
			get
			{
				return this._spActive;
			}
			set
			{
				if ((this._spActive != value))
				{
					this.OnspActiveChanging(value);
					this.SendPropertyChanging();
					this._spActive = value;
					this.SendPropertyChanged("spActive");
					this.OnspActiveChanged();
				}
			}
		}
		
		[Column(Storage="_spLastUpdate", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string spLastUpdate
		{
			get
			{
				return this._spLastUpdate;
			}
			set
			{
				if ((this._spLastUpdate != value))
				{
					this.OnspLastUpdateChanging(value);
					this.SendPropertyChanging();
					this._spLastUpdate = value;
					this.SendPropertyChanged("spLastUpdate");
					this.OnspLastUpdateChanged();
				}
			}
		}
		
		[Column(Storage="_LastUpdate", DbType="DateTime NOT NULL")]
		public System.DateTime LastUpdate
		{
			get
			{
				return this._LastUpdate;
			}
			set
			{
				if ((this._LastUpdate != value))
				{
					this.OnLastUpdateChanging(value);
					this.SendPropertyChanging();
					this._LastUpdate = value;
					this.SendPropertyChanged("LastUpdate");
					this.OnLastUpdateChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
}
#pragma warning restore 1591
