#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.3607
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Data.Linq;
using System.Data.Linq.Mapping;
using System.Linq;
using System.Linq.Expressions;
using System.Reflection;



[System.Data.Linq.Mapping.DatabaseAttribute(Name="Papaito1")]
public partial class PapaitoDalDataContext : System.Data.Linq.DataContext
{
	
	private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
	
  #region Extensibility Method Definitions
  partial void OnCreated();
  partial void InsertAdminUser(AdminUser instance);
  partial void UpdateAdminUser(AdminUser instance);
  partial void DeleteAdminUser(AdminUser instance);
  partial void InsertStudioLookAroundPic(StudioLookAroundPic instance);
  partial void UpdateStudioLookAroundPic(StudioLookAroundPic instance);
  partial void DeleteStudioLookAroundPic(StudioLookAroundPic instance);
  partial void InsertAllArtistGallery(AllArtistGallery instance);
  partial void UpdateAllArtistGallery(AllArtistGallery instance);
  partial void DeleteAllArtistGallery(AllArtistGallery instance);
  partial void InsertAllArtistPic(AllArtistPic instance);
  partial void UpdateAllArtistPic(AllArtistPic instance);
  partial void DeleteAllArtistPic(AllArtistPic instance);
  partial void InsertComplexAbout(ComplexAbout instance);
  partial void UpdateComplexAbout(ComplexAbout instance);
  partial void DeleteComplexAbout(ComplexAbout instance);
  partial void InsertComplexLookAroundPic(ComplexLookAroundPic instance);
  partial void UpdateComplexLookAroundPic(ComplexLookAroundPic instance);
  partial void DeleteComplexLookAroundPic(ComplexLookAroundPic instance);
  partial void InsertControlRoomPic(ControlRoomPic instance);
  partial void UpdateControlRoomPic(ControlRoomPic instance);
  partial void DeleteControlRoomPic(ControlRoomPic instance);
  partial void InsertDesignPic(DesignPic instance);
  partial void UpdateDesignPic(DesignPic instance);
  partial void DeleteDesignPic(DesignPic instance);
  partial void InsertDesignText(DesignText instance);
  partial void UpdateDesignText(DesignText instance);
  partial void DeleteDesignText(DesignText instance);
  partial void InsertHeaderPic(HeaderPic instance);
  partial void UpdateHeaderPic(HeaderPic instance);
  partial void DeleteHeaderPic(HeaderPic instance);
  partial void InsertLastRecordPic(LastRecordPic instance);
  partial void UpdateLastRecordPic(LastRecordPic instance);
  partial void DeleteLastRecordPic(LastRecordPic instance);
  partial void InsertMainAbout(MainAbout instance);
  partial void UpdateMainAbout(MainAbout instance);
  partial void DeleteMainAbout(MainAbout instance);
  partial void InsertMainContact(MainContact instance);
  partial void UpdateMainContact(MainContact instance);
  partial void DeleteMainContact(MainContact instance);
  partial void InsertNewsOb(NewsOb instance);
  partial void UpdateNewsOb(NewsOb instance);
  partial void DeleteNewsOb(NewsOb instance);
  partial void InsertProduction(Production instance);
  partial void UpdateProduction(Production instance);
  partial void DeleteProduction(Production instance);
  partial void InsertPrPic(PrPic instance);
  partial void UpdatePrPic(PrPic instance);
  partial void DeletePrPic(PrPic instance);
  partial void InsertPrText(PrText instance);
  partial void UpdatePrText(PrText instance);
  partial void DeletePrText(PrText instance);
  partial void InsertPublishGallery(PublishGallery instance);
  partial void UpdatePublishGallery(PublishGallery instance);
  partial void DeletePublishGallery(PublishGallery instance);
  partial void InsertPublishPic(PublishPic instance);
  partial void UpdatePublishPic(PublishPic instance);
  partial void DeletePublishPic(PublishPic instance);
  partial void InsertRecordingRoomPic(RecordingRoomPic instance);
  partial void UpdateRecordingRoomPic(RecordingRoomPic instance);
  partial void DeleteRecordingRoomPic(RecordingRoomPic instance);
  partial void InsertRoomAPic(RoomAPic instance);
  partial void UpdateRoomAPic(RoomAPic instance);
  partial void DeleteRoomAPic(RoomAPic instance);
  partial void InsertRoomBPic(RoomBPic instance);
  partial void UpdateRoomBPic(RoomBPic instance);
  partial void DeleteRoomBPic(RoomBPic instance);
  partial void InsertRoomCPic(RoomCPic instance);
  partial void UpdateRoomCPic(RoomCPic instance);
  partial void DeleteRoomCPic(RoomCPic instance);
  partial void InsertSong(Song instance);
  partial void UpdateSong(Song instance);
  partial void DeleteSong(Song instance);
  partial void InsertStaffDudu(StaffDudu instance);
  partial void UpdateStaffDudu(StaffDudu instance);
  partial void DeleteStaffDudu(StaffDudu instance);
  partial void InsertStaffItay(StaffItay instance);
  partial void UpdateStaffItay(StaffItay instance);
  partial void DeleteStaffItay(StaffItay instance);
  partial void InsertStaffNapo(StaffNapo instance);
  partial void UpdateStaffNapo(StaffNapo instance);
  partial void DeleteStaffNapo(StaffNapo instance);
  partial void InsertStaffPerri(StaffPerri instance);
  partial void UpdateStaffPerri(StaffPerri instance);
  partial void DeleteStaffPerri(StaffPerri instance);
  partial void InsertStudioAbout(StudioAbout instance);
  partial void UpdateStudioAbout(StudioAbout instance);
  partial void DeleteStudioAbout(StudioAbout instance);
  #endregion
	
	public PapaitoDalDataContext() : 
			base(global::System.Configuration.ConfigurationManager.ConnectionStrings["Papaito1ConnectionString"].ConnectionString, mappingSource)
	{
		OnCreated();
	}
	
	public PapaitoDalDataContext(string connection) : 
			base(connection, mappingSource)
	{
		OnCreated();
	}
	
	public PapaitoDalDataContext(System.Data.IDbConnection connection) : 
			base(connection, mappingSource)
	{
		OnCreated();
	}
	
	public PapaitoDalDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
			base(connection, mappingSource)
	{
		OnCreated();
	}
	
	public PapaitoDalDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
			base(connection, mappingSource)
	{
		OnCreated();
	}
	
	public System.Data.Linq.Table<AdminUser> AdminUsers
	{
		get
		{
			return this.GetTable<AdminUser>();
		}
	}
	
	public System.Data.Linq.Table<StudioLookAroundPic> StudioLookAroundPics
	{
		get
		{
			return this.GetTable<StudioLookAroundPic>();
		}
	}
	
	public System.Data.Linq.Table<AllArtistGallery> AllArtistGalleries
	{
		get
		{
			return this.GetTable<AllArtistGallery>();
		}
	}
	
	public System.Data.Linq.Table<AllArtistPic> AllArtistPics
	{
		get
		{
			return this.GetTable<AllArtistPic>();
		}
	}
	
	public System.Data.Linq.Table<ComplexAbout> ComplexAbouts
	{
		get
		{
			return this.GetTable<ComplexAbout>();
		}
	}
	
	public System.Data.Linq.Table<ComplexLookAroundPic> ComplexLookAroundPics
	{
		get
		{
			return this.GetTable<ComplexLookAroundPic>();
		}
	}
	
	public System.Data.Linq.Table<ControlRoomPic> ControlRoomPics
	{
		get
		{
			return this.GetTable<ControlRoomPic>();
		}
	}
	
	public System.Data.Linq.Table<DesignPic> DesignPics
	{
		get
		{
			return this.GetTable<DesignPic>();
		}
	}
	
	public System.Data.Linq.Table<DesignText> DesignTexts
	{
		get
		{
			return this.GetTable<DesignText>();
		}
	}
	
	public System.Data.Linq.Table<HeaderPic> HeaderPics
	{
		get
		{
			return this.GetTable<HeaderPic>();
		}
	}
	
	public System.Data.Linq.Table<LastRecordPic> LastRecordPics
	{
		get
		{
			return this.GetTable<LastRecordPic>();
		}
	}
	
	public System.Data.Linq.Table<MainAbout> MainAbouts
	{
		get
		{
			return this.GetTable<MainAbout>();
		}
	}
	
	public System.Data.Linq.Table<MainContact> MainContacts
	{
		get
		{
			return this.GetTable<MainContact>();
		}
	}
	
	public System.Data.Linq.Table<NewsOb> NewsObs
	{
		get
		{
			return this.GetTable<NewsOb>();
		}
	}
	
	public System.Data.Linq.Table<Production> Productions
	{
		get
		{
			return this.GetTable<Production>();
		}
	}
	
	public System.Data.Linq.Table<PrPic> PrPics
	{
		get
		{
			return this.GetTable<PrPic>();
		}
	}
	
	public System.Data.Linq.Table<PrText> PrTexts
	{
		get
		{
			return this.GetTable<PrText>();
		}
	}
	
	public System.Data.Linq.Table<PublishGallery> PublishGalleries
	{
		get
		{
			return this.GetTable<PublishGallery>();
		}
	}
	
	public System.Data.Linq.Table<PublishPic> PublishPics
	{
		get
		{
			return this.GetTable<PublishPic>();
		}
	}
	
	public System.Data.Linq.Table<RecordingRoomPic> RecordingRoomPics
	{
		get
		{
			return this.GetTable<RecordingRoomPic>();
		}
	}
	
	public System.Data.Linq.Table<RoomAPic> RoomAPics
	{
		get
		{
			return this.GetTable<RoomAPic>();
		}
	}
	
	public System.Data.Linq.Table<RoomBPic> RoomBPics
	{
		get
		{
			return this.GetTable<RoomBPic>();
		}
	}
	
	public System.Data.Linq.Table<RoomCPic> RoomCPics
	{
		get
		{
			return this.GetTable<RoomCPic>();
		}
	}
	
	public System.Data.Linq.Table<Song> Songs
	{
		get
		{
			return this.GetTable<Song>();
		}
	}
	
	public System.Data.Linq.Table<StaffDudu> StaffDudus
	{
		get
		{
			return this.GetTable<StaffDudu>();
		}
	}
	
	public System.Data.Linq.Table<StaffItay> StaffItays
	{
		get
		{
			return this.GetTable<StaffItay>();
		}
	}
	
	public System.Data.Linq.Table<StaffNapo> StaffNapos
	{
		get
		{
			return this.GetTable<StaffNapo>();
		}
	}
	
	public System.Data.Linq.Table<StaffPerri> StaffPerris
	{
		get
		{
			return this.GetTable<StaffPerri>();
		}
	}
	
	public System.Data.Linq.Table<StudioAbout> StudioAbouts
	{
		get
		{
			return this.GetTable<StudioAbout>();
		}
	}
}

[Table(Name="dbo.AdminUser")]
public partial class AdminUser : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private string _LoginID;
	
	private string _UserID;
	
	private string _Password;
	
	private System.DateTime _CreateTime;
	
	private System.DateTime _LastLogin;
	
	private byte _Active;
	
	private string _spCreateTime;
	
	private string _spLastLogin;
	
	private string _spActive;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnLoginIDChanging(string value);
    partial void OnLoginIDChanged();
    partial void OnUserIDChanging(string value);
    partial void OnUserIDChanged();
    partial void OnPasswordChanging(string value);
    partial void OnPasswordChanged();
    partial void OnCreateTimeChanging(System.DateTime value);
    partial void OnCreateTimeChanged();
    partial void OnLastLoginChanging(System.DateTime value);
    partial void OnLastLoginChanged();
    partial void OnActiveChanging(byte value);
    partial void OnActiveChanged();
    partial void OnspCreateTimeChanging(string value);
    partial void OnspCreateTimeChanged();
    partial void OnspLastLoginChanging(string value);
    partial void OnspLastLoginChanged();
    partial void OnspActiveChanging(string value);
    partial void OnspActiveChanged();
    #endregion
	
	public AdminUser()
	{
		OnCreated();
	}
	
	[Column(Storage="_LoginID", DbType="NVarChar(50) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
	public string LoginID
	{
		get
		{
			return this._LoginID;
		}
		set
		{
			if ((this._LoginID != value))
			{
				this.OnLoginIDChanging(value);
				this.SendPropertyChanging();
				this._LoginID = value;
				this.SendPropertyChanged("LoginID");
				this.OnLoginIDChanged();
			}
		}
	}
	
	[Column(Storage="_UserID", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
	public string UserID
	{
		get
		{
			return this._UserID;
		}
		set
		{
			if ((this._UserID != value))
			{
				this.OnUserIDChanging(value);
				this.SendPropertyChanging();
				this._UserID = value;
				this.SendPropertyChanged("UserID");
				this.OnUserIDChanged();
			}
		}
	}
	
	[Column(Storage="_Password", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
	public string Password
	{
		get
		{
			return this._Password;
		}
		set
		{
			if ((this._Password != value))
			{
				this.OnPasswordChanging(value);
				this.SendPropertyChanging();
				this._Password = value;
				this.SendPropertyChanged("Password");
				this.OnPasswordChanged();
			}
		}
	}
	
	[Column(Storage="_CreateTime", DbType="DateTime NOT NULL")]
	public System.DateTime CreateTime
	{
		get
		{
			return this._CreateTime;
		}
		set
		{
			if ((this._CreateTime != value))
			{
				this.OnCreateTimeChanging(value);
				this.SendPropertyChanging();
				this._CreateTime = value;
				this.SendPropertyChanged("CreateTime");
				this.OnCreateTimeChanged();
			}
		}
	}
	
	[Column(Storage="_LastLogin", DbType="DateTime NOT NULL")]
	public System.DateTime LastLogin
	{
		get
		{
			return this._LastLogin;
		}
		set
		{
			if ((this._LastLogin != value))
			{
				this.OnLastLoginChanging(value);
				this.SendPropertyChanging();
				this._LastLogin = value;
				this.SendPropertyChanged("LastLogin");
				this.OnLastLoginChanged();
			}
		}
	}
	
	[Column(Storage="_Active", DbType="TinyInt NOT NULL")]
	public byte Active
	{
		get
		{
			return this._Active;
		}
		set
		{
			if ((this._Active != value))
			{
				this.OnActiveChanging(value);
				this.SendPropertyChanging();
				this._Active = value;
				this.SendPropertyChanged("Active");
				this.OnActiveChanged();
			}
		}
	}
	
	[Column(Storage="_spCreateTime", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
	public string spCreateTime
	{
		get
		{
			return this._spCreateTime;
		}
		set
		{
			if ((this._spCreateTime != value))
			{
				this.OnspCreateTimeChanging(value);
				this.SendPropertyChanging();
				this._spCreateTime = value;
				this.SendPropertyChanged("spCreateTime");
				this.OnspCreateTimeChanged();
			}
		}
	}
	
	[Column(Storage="_spLastLogin", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
	public string spLastLogin
	{
		get
		{
			return this._spLastLogin;
		}
		set
		{
			if ((this._spLastLogin != value))
			{
				this.OnspLastLoginChanging(value);
				this.SendPropertyChanging();
				this._spLastLogin = value;
				this.SendPropertyChanged("spLastLogin");
				this.OnspLastLoginChanged();
			}
		}
	}
	
	[Column(Storage="_spActive", DbType="NVarChar(20) NOT NULL", CanBeNull=false)]
	public string spActive
	{
		get
		{
			return this._spActive;
		}
		set
		{
			if ((this._spActive != value))
			{
				this.OnspActiveChanging(value);
				this.SendPropertyChanging();
				this._spActive = value;
				this.SendPropertyChanged("spActive");
				this.OnspActiveChanged();
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
}

[Table(Name="dbo.StudioLookAroundPic")]
public partial class StudioLookAroundPic : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private string _PicID;
	
	private string _PicPath;
	
	private byte _Active;
	
	private System.DateTime _UploadTime;
	
	private string _spUploadTime;
	
	private string _spActive;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnPicIDChanging(string value);
    partial void OnPicIDChanged();
    partial void OnPicPathChanging(string value);
    partial void OnPicPathChanged();
    partial void OnActiveChanging(byte value);
    partial void OnActiveChanged();
    partial void OnUploadTimeChanging(System.DateTime value);
    partial void OnUploadTimeChanged();
    partial void OnspUploadTimeChanging(string value);
    partial void OnspUploadTimeChanged();
    partial void OnspActiveChanging(string value);
    partial void OnspActiveChanged();
    #endregion
	
	public StudioLookAroundPic()
	{
		OnCreated();
	}
	
	[Column(Storage="_PicID", DbType="NVarChar(50) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
	public string PicID
	{
		get
		{
			return this._PicID;
		}
		set
		{
			if ((this._PicID != value))
			{
				this.OnPicIDChanging(value);
				this.SendPropertyChanging();
				this._PicID = value;
				this.SendPropertyChanged("PicID");
				this.OnPicIDChanged();
			}
		}
	}
	
	[Column(Storage="_PicPath", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
	public string PicPath
	{
		get
		{
			return this._PicPath;
		}
		set
		{
			if ((this._PicPath != value))
			{
				this.OnPicPathChanging(value);
				this.SendPropertyChanging();
				this._PicPath = value;
				this.SendPropertyChanged("PicPath");
				this.OnPicPathChanged();
			}
		}
	}
	
	[Column(Storage="_Active", DbType="TinyInt NOT NULL")]
	public byte Active
	{
		get
		{
			return this._Active;
		}
		set
		{
			if ((this._Active != value))
			{
				this.OnActiveChanging(value);
				this.SendPropertyChanging();
				this._Active = value;
				this.SendPropertyChanged("Active");
				this.OnActiveChanged();
			}
		}
	}
	
	[Column(Storage="_UploadTime", DbType="DateTime NOT NULL")]
	public System.DateTime UploadTime
	{
		get
		{
			return this._UploadTime;
		}
		set
		{
			if ((this._UploadTime != value))
			{
				this.OnUploadTimeChanging(value);
				this.SendPropertyChanging();
				this._UploadTime = value;
				this.SendPropertyChanged("UploadTime");
				this.OnUploadTimeChanged();
			}
		}
	}
	
	[Column(Storage="_spUploadTime", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
	public string spUploadTime
	{
		get
		{
			return this._spUploadTime;
		}
		set
		{
			if ((this._spUploadTime != value))
			{
				this.OnspUploadTimeChanging(value);
				this.SendPropertyChanging();
				this._spUploadTime = value;
				this.SendPropertyChanged("spUploadTime");
				this.OnspUploadTimeChanged();
			}
		}
	}
	
	[Column(Storage="_spActive", DbType="NVarChar(20) NOT NULL", CanBeNull=false)]
	public string spActive
	{
		get
		{
			return this._spActive;
		}
		set
		{
			if ((this._spActive != value))
			{
				this.OnspActiveChanging(value);
				this.SendPropertyChanging();
				this._spActive = value;
				this.SendPropertyChanged("spActive");
				this.OnspActiveChanged();
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
}

[Table(Name="dbo.AllArtistGallery")]
public partial class AllArtistGallery : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private string _AllArtistGalleryID;
	
	private string _AllArtistNameHe;
	
	private string _AllArtistNameEn;
	
	private System.DateTime _LastUpdate;
	
	private string _spLastUpdate;
	
	private EntitySet<AllArtistPic> _AllArtistPics;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnAllArtistGalleryIDChanging(string value);
    partial void OnAllArtistGalleryIDChanged();
    partial void OnAllArtistNameHeChanging(string value);
    partial void OnAllArtistNameHeChanged();
    partial void OnAllArtistNameEnChanging(string value);
    partial void OnAllArtistNameEnChanged();
    partial void OnLastUpdateChanging(System.DateTime value);
    partial void OnLastUpdateChanged();
    partial void OnspLastUpdateChanging(string value);
    partial void OnspLastUpdateChanged();
    #endregion
	
	public AllArtistGallery()
	{
		this._AllArtistPics = new EntitySet<AllArtistPic>(new Action<AllArtistPic>(this.attach_AllArtistPics), new Action<AllArtistPic>(this.detach_AllArtistPics));
		OnCreated();
	}
	
	[Column(Storage="_AllArtistGalleryID", DbType="NVarChar(50) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
	public string AllArtistGalleryID
	{
		get
		{
			return this._AllArtistGalleryID;
		}
		set
		{
			if ((this._AllArtistGalleryID != value))
			{
				this.OnAllArtistGalleryIDChanging(value);
				this.SendPropertyChanging();
				this._AllArtistGalleryID = value;
				this.SendPropertyChanged("AllArtistGalleryID");
				this.OnAllArtistGalleryIDChanged();
			}
		}
	}
	
	[Column(Storage="_AllArtistNameHe", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
	public string AllArtistNameHe
	{
		get
		{
			return this._AllArtistNameHe;
		}
		set
		{
			if ((this._AllArtistNameHe != value))
			{
				this.OnAllArtistNameHeChanging(value);
				this.SendPropertyChanging();
				this._AllArtistNameHe = value;
				this.SendPropertyChanged("AllArtistNameHe");
				this.OnAllArtistNameHeChanged();
			}
		}
	}
	
	[Column(Storage="_AllArtistNameEn", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
	public string AllArtistNameEn
	{
		get
		{
			return this._AllArtistNameEn;
		}
		set
		{
			if ((this._AllArtistNameEn != value))
			{
				this.OnAllArtistNameEnChanging(value);
				this.SendPropertyChanging();
				this._AllArtistNameEn = value;
				this.SendPropertyChanged("AllArtistNameEn");
				this.OnAllArtistNameEnChanged();
			}
		}
	}
	
	[Column(Storage="_LastUpdate", DbType="DateTime NOT NULL")]
	public System.DateTime LastUpdate
	{
		get
		{
			return this._LastUpdate;
		}
		set
		{
			if ((this._LastUpdate != value))
			{
				this.OnLastUpdateChanging(value);
				this.SendPropertyChanging();
				this._LastUpdate = value;
				this.SendPropertyChanged("LastUpdate");
				this.OnLastUpdateChanged();
			}
		}
	}
	
	[Column(Storage="_spLastUpdate", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
	public string spLastUpdate
	{
		get
		{
			return this._spLastUpdate;
		}
		set
		{
			if ((this._spLastUpdate != value))
			{
				this.OnspLastUpdateChanging(value);
				this.SendPropertyChanging();
				this._spLastUpdate = value;
				this.SendPropertyChanged("spLastUpdate");
				this.OnspLastUpdateChanged();
			}
		}
	}
	
	[Association(Name="AllArtistGallery_AllArtistPic", Storage="_AllArtistPics", ThisKey="AllArtistGalleryID", OtherKey="GalleryID")]
	public EntitySet<AllArtistPic> AllArtistPics
	{
		get
		{
			return this._AllArtistPics;
		}
		set
		{
			this._AllArtistPics.Assign(value);
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
	
	private void attach_AllArtistPics(AllArtistPic entity)
	{
		this.SendPropertyChanging();
		entity.AllArtistGallery = this;
	}
	
	private void detach_AllArtistPics(AllArtistPic entity)
	{
		this.SendPropertyChanging();
		entity.AllArtistGallery = null;
	}
}

[Table(Name="dbo.AllArtistPic")]
public partial class AllArtistPic : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private string _PicID;
	
	private string _GalleryID;
	
	private string _PicPath;
	
	private byte _Active;
	
	private System.DateTime _UploadTime;
	
	private string _spUploadTime;
	
	private string _spActive;
	
	private string _TextHe;
	
	private string _TextEn;
	
	private EntityRef<AllArtistGallery> _AllArtistGallery;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnPicIDChanging(string value);
    partial void OnPicIDChanged();
    partial void OnGalleryIDChanging(string value);
    partial void OnGalleryIDChanged();
    partial void OnPicPathChanging(string value);
    partial void OnPicPathChanged();
    partial void OnActiveChanging(byte value);
    partial void OnActiveChanged();
    partial void OnUploadTimeChanging(System.DateTime value);
    partial void OnUploadTimeChanged();
    partial void OnspUploadTimeChanging(string value);
    partial void OnspUploadTimeChanged();
    partial void OnspActiveChanging(string value);
    partial void OnspActiveChanged();
    partial void OnTextHeChanging(string value);
    partial void OnTextHeChanged();
    partial void OnTextEnChanging(string value);
    partial void OnTextEnChanged();
    #endregion
	
	public AllArtistPic()
	{
		this._AllArtistGallery = default(EntityRef<AllArtistGallery>);
		OnCreated();
	}
	
	[Column(Storage="_PicID", DbType="NVarChar(50) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
	public string PicID
	{
		get
		{
			return this._PicID;
		}
		set
		{
			if ((this._PicID != value))
			{
				this.OnPicIDChanging(value);
				this.SendPropertyChanging();
				this._PicID = value;
				this.SendPropertyChanged("PicID");
				this.OnPicIDChanged();
			}
		}
	}
	
	[Column(Storage="_GalleryID", DbType="NVarChar(50) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
	public string GalleryID
	{
		get
		{
			return this._GalleryID;
		}
		set
		{
			if ((this._GalleryID != value))
			{
				if (this._AllArtistGallery.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnGalleryIDChanging(value);
				this.SendPropertyChanging();
				this._GalleryID = value;
				this.SendPropertyChanged("GalleryID");
				this.OnGalleryIDChanged();
			}
		}
	}
	
	[Column(Storage="_PicPath", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
	public string PicPath
	{
		get
		{
			return this._PicPath;
		}
		set
		{
			if ((this._PicPath != value))
			{
				this.OnPicPathChanging(value);
				this.SendPropertyChanging();
				this._PicPath = value;
				this.SendPropertyChanged("PicPath");
				this.OnPicPathChanged();
			}
		}
	}
	
	[Column(Storage="_Active", DbType="TinyInt NOT NULL")]
	public byte Active
	{
		get
		{
			return this._Active;
		}
		set
		{
			if ((this._Active != value))
			{
				this.OnActiveChanging(value);
				this.SendPropertyChanging();
				this._Active = value;
				this.SendPropertyChanged("Active");
				this.OnActiveChanged();
			}
		}
	}
	
	[Column(Storage="_UploadTime", DbType="DateTime NOT NULL")]
	public System.DateTime UploadTime
	{
		get
		{
			return this._UploadTime;
		}
		set
		{
			if ((this._UploadTime != value))
			{
				this.OnUploadTimeChanging(value);
				this.SendPropertyChanging();
				this._UploadTime = value;
				this.SendPropertyChanged("UploadTime");
				this.OnUploadTimeChanged();
			}
		}
	}
	
	[Column(Storage="_spUploadTime", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
	public string spUploadTime
	{
		get
		{
			return this._spUploadTime;
		}
		set
		{
			if ((this._spUploadTime != value))
			{
				this.OnspUploadTimeChanging(value);
				this.SendPropertyChanging();
				this._spUploadTime = value;
				this.SendPropertyChanged("spUploadTime");
				this.OnspUploadTimeChanged();
			}
		}
	}
	
	[Column(Storage="_spActive", DbType="NVarChar(20) NOT NULL", CanBeNull=false)]
	public string spActive
	{
		get
		{
			return this._spActive;
		}
		set
		{
			if ((this._spActive != value))
			{
				this.OnspActiveChanging(value);
				this.SendPropertyChanging();
				this._spActive = value;
				this.SendPropertyChanged("spActive");
				this.OnspActiveChanged();
			}
		}
	}
	
	[Column(Storage="_TextHe", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
	public string TextHe
	{
		get
		{
			return this._TextHe;
		}
		set
		{
			if ((this._TextHe != value))
			{
				this.OnTextHeChanging(value);
				this.SendPropertyChanging();
				this._TextHe = value;
				this.SendPropertyChanged("TextHe");
				this.OnTextHeChanged();
			}
		}
	}
	
	[Column(Storage="_TextEn", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
	public string TextEn
	{
		get
		{
			return this._TextEn;
		}
		set
		{
			if ((this._TextEn != value))
			{
				this.OnTextEnChanging(value);
				this.SendPropertyChanging();
				this._TextEn = value;
				this.SendPropertyChanged("TextEn");
				this.OnTextEnChanged();
			}
		}
	}
	
	[Association(Name="AllArtistGallery_AllArtistPic", Storage="_AllArtistGallery", ThisKey="GalleryID", OtherKey="AllArtistGalleryID", IsForeignKey=true)]
	public AllArtistGallery AllArtistGallery
	{
		get
		{
			return this._AllArtistGallery.Entity;
		}
		set
		{
			AllArtistGallery previousValue = this._AllArtistGallery.Entity;
			if (((previousValue != value) 
						|| (this._AllArtistGallery.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._AllArtistGallery.Entity = null;
					previousValue.AllArtistPics.Remove(this);
				}
				this._AllArtistGallery.Entity = value;
				if ((value != null))
				{
					value.AllArtistPics.Add(this);
					this._GalleryID = value.AllArtistGalleryID;
				}
				else
				{
					this._GalleryID = default(string);
				}
				this.SendPropertyChanged("AllArtistGallery");
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
}

[Table(Name="dbo.ComplexAbout")]
public partial class ComplexAbout : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private string _ComplexAboutID;
	
	private string _AboutHe;
	
	private string _AboutEn;
	
	private System.DateTime _LastUpdate;
	
	private string _spLastUpdate;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnComplexAboutIDChanging(string value);
    partial void OnComplexAboutIDChanged();
    partial void OnAboutHeChanging(string value);
    partial void OnAboutHeChanged();
    partial void OnAboutEnChanging(string value);
    partial void OnAboutEnChanged();
    partial void OnLastUpdateChanging(System.DateTime value);
    partial void OnLastUpdateChanged();
    partial void OnspLastUpdateChanging(string value);
    partial void OnspLastUpdateChanged();
    #endregion
	
	public ComplexAbout()
	{
		OnCreated();
	}
	
	[Column(Storage="_ComplexAboutID", DbType="NVarChar(50) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
	public string ComplexAboutID
	{
		get
		{
			return this._ComplexAboutID;
		}
		set
		{
			if ((this._ComplexAboutID != value))
			{
				this.OnComplexAboutIDChanging(value);
				this.SendPropertyChanging();
				this._ComplexAboutID = value;
				this.SendPropertyChanged("ComplexAboutID");
				this.OnComplexAboutIDChanged();
			}
		}
	}
	
	[Column(Storage="_AboutHe", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
	public string AboutHe
	{
		get
		{
			return this._AboutHe;
		}
		set
		{
			if ((this._AboutHe != value))
			{
				this.OnAboutHeChanging(value);
				this.SendPropertyChanging();
				this._AboutHe = value;
				this.SendPropertyChanged("AboutHe");
				this.OnAboutHeChanged();
			}
		}
	}
	
	[Column(Storage="_AboutEn", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
	public string AboutEn
	{
		get
		{
			return this._AboutEn;
		}
		set
		{
			if ((this._AboutEn != value))
			{
				this.OnAboutEnChanging(value);
				this.SendPropertyChanging();
				this._AboutEn = value;
				this.SendPropertyChanged("AboutEn");
				this.OnAboutEnChanged();
			}
		}
	}
	
	[Column(Storage="_LastUpdate", DbType="DateTime NOT NULL")]
	public System.DateTime LastUpdate
	{
		get
		{
			return this._LastUpdate;
		}
		set
		{
			if ((this._LastUpdate != value))
			{
				this.OnLastUpdateChanging(value);
				this.SendPropertyChanging();
				this._LastUpdate = value;
				this.SendPropertyChanged("LastUpdate");
				this.OnLastUpdateChanged();
			}
		}
	}
	
	[Column(Storage="_spLastUpdate", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
	public string spLastUpdate
	{
		get
		{
			return this._spLastUpdate;
		}
		set
		{
			if ((this._spLastUpdate != value))
			{
				this.OnspLastUpdateChanging(value);
				this.SendPropertyChanging();
				this._spLastUpdate = value;
				this.SendPropertyChanged("spLastUpdate");
				this.OnspLastUpdateChanged();
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
}

[Table(Name="dbo.ComplexLookAroundPic")]
public partial class ComplexLookAroundPic : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private string _PicID;
	
	private string _PicPath;
	
	private byte _Active;
	
	private System.DateTime _UploadTime;
	
	private string _spUploadTime;
	
	private string _spActive;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnPicIDChanging(string value);
    partial void OnPicIDChanged();
    partial void OnPicPathChanging(string value);
    partial void OnPicPathChanged();
    partial void OnActiveChanging(byte value);
    partial void OnActiveChanged();
    partial void OnUploadTimeChanging(System.DateTime value);
    partial void OnUploadTimeChanged();
    partial void OnspUploadTimeChanging(string value);
    partial void OnspUploadTimeChanged();
    partial void OnspActiveChanging(string value);
    partial void OnspActiveChanged();
    #endregion
	
	public ComplexLookAroundPic()
	{
		OnCreated();
	}
	
	[Column(Storage="_PicID", DbType="NVarChar(50) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
	public string PicID
	{
		get
		{
			return this._PicID;
		}
		set
		{
			if ((this._PicID != value))
			{
				this.OnPicIDChanging(value);
				this.SendPropertyChanging();
				this._PicID = value;
				this.SendPropertyChanged("PicID");
				this.OnPicIDChanged();
			}
		}
	}
	
	[Column(Storage="_PicPath", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
	public string PicPath
	{
		get
		{
			return this._PicPath;
		}
		set
		{
			if ((this._PicPath != value))
			{
				this.OnPicPathChanging(value);
				this.SendPropertyChanging();
				this._PicPath = value;
				this.SendPropertyChanged("PicPath");
				this.OnPicPathChanged();
			}
		}
	}
	
	[Column(Storage="_Active", DbType="TinyInt NOT NULL")]
	public byte Active
	{
		get
		{
			return this._Active;
		}
		set
		{
			if ((this._Active != value))
			{
				this.OnActiveChanging(value);
				this.SendPropertyChanging();
				this._Active = value;
				this.SendPropertyChanged("Active");
				this.OnActiveChanged();
			}
		}
	}
	
	[Column(Storage="_UploadTime", DbType="DateTime NOT NULL")]
	public System.DateTime UploadTime
	{
		get
		{
			return this._UploadTime;
		}
		set
		{
			if ((this._UploadTime != value))
			{
				this.OnUploadTimeChanging(value);
				this.SendPropertyChanging();
				this._UploadTime = value;
				this.SendPropertyChanged("UploadTime");
				this.OnUploadTimeChanged();
			}
		}
	}
	
	[Column(Storage="_spUploadTime", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
	public string spUploadTime
	{
		get
		{
			return this._spUploadTime;
		}
		set
		{
			if ((this._spUploadTime != value))
			{
				this.OnspUploadTimeChanging(value);
				this.SendPropertyChanging();
				this._spUploadTime = value;
				this.SendPropertyChanged("spUploadTime");
				this.OnspUploadTimeChanged();
			}
		}
	}
	
	[Column(Storage="_spActive", DbType="NVarChar(20) NOT NULL", CanBeNull=false)]
	public string spActive
	{
		get
		{
			return this._spActive;
		}
		set
		{
			if ((this._spActive != value))
			{
				this.OnspActiveChanging(value);
				this.SendPropertyChanging();
				this._spActive = value;
				this.SendPropertyChanged("spActive");
				this.OnspActiveChanged();
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
}

[Table(Name="dbo.ControlRoomPic")]
public partial class ControlRoomPic : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private string _PicID;
	
	private string _PicPath;
	
	private byte _Active;
	
	private System.DateTime _UploadTime;
	
	private string _spUploadTime;
	
	private string _spActive;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnPicIDChanging(string value);
    partial void OnPicIDChanged();
    partial void OnPicPathChanging(string value);
    partial void OnPicPathChanged();
    partial void OnActiveChanging(byte value);
    partial void OnActiveChanged();
    partial void OnUploadTimeChanging(System.DateTime value);
    partial void OnUploadTimeChanged();
    partial void OnspUploadTimeChanging(string value);
    partial void OnspUploadTimeChanged();
    partial void OnspActiveChanging(string value);
    partial void OnspActiveChanged();
    #endregion
	
	public ControlRoomPic()
	{
		OnCreated();
	}
	
	[Column(Storage="_PicID", DbType="NVarChar(50) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
	public string PicID
	{
		get
		{
			return this._PicID;
		}
		set
		{
			if ((this._PicID != value))
			{
				this.OnPicIDChanging(value);
				this.SendPropertyChanging();
				this._PicID = value;
				this.SendPropertyChanged("PicID");
				this.OnPicIDChanged();
			}
		}
	}
	
	[Column(Storage="_PicPath", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
	public string PicPath
	{
		get
		{
			return this._PicPath;
		}
		set
		{
			if ((this._PicPath != value))
			{
				this.OnPicPathChanging(value);
				this.SendPropertyChanging();
				this._PicPath = value;
				this.SendPropertyChanged("PicPath");
				this.OnPicPathChanged();
			}
		}
	}
	
	[Column(Storage="_Active", DbType="TinyInt NOT NULL")]
	public byte Active
	{
		get
		{
			return this._Active;
		}
		set
		{
			if ((this._Active != value))
			{
				this.OnActiveChanging(value);
				this.SendPropertyChanging();
				this._Active = value;
				this.SendPropertyChanged("Active");
				this.OnActiveChanged();
			}
		}
	}
	
	[Column(Storage="_UploadTime", DbType="DateTime NOT NULL")]
	public System.DateTime UploadTime
	{
		get
		{
			return this._UploadTime;
		}
		set
		{
			if ((this._UploadTime != value))
			{
				this.OnUploadTimeChanging(value);
				this.SendPropertyChanging();
				this._UploadTime = value;
				this.SendPropertyChanged("UploadTime");
				this.OnUploadTimeChanged();
			}
		}
	}
	
	[Column(Storage="_spUploadTime", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
	public string spUploadTime
	{
		get
		{
			return this._spUploadTime;
		}
		set
		{
			if ((this._spUploadTime != value))
			{
				this.OnspUploadTimeChanging(value);
				this.SendPropertyChanging();
				this._spUploadTime = value;
				this.SendPropertyChanged("spUploadTime");
				this.OnspUploadTimeChanged();
			}
		}
	}
	
	[Column(Storage="_spActive", DbType="NVarChar(20) NOT NULL", CanBeNull=false)]
	public string spActive
	{
		get
		{
			return this._spActive;
		}
		set
		{
			if ((this._spActive != value))
			{
				this.OnspActiveChanging(value);
				this.SendPropertyChanging();
				this._spActive = value;
				this.SendPropertyChanged("spActive");
				this.OnspActiveChanged();
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
}

[Table(Name="dbo.DesignPic")]
public partial class DesignPic : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private string _PicID;
	
	private string _PicPath;
	
	private byte _Active;
	
	private System.DateTime _UploadTime;
	
	private string _spUploadTime;
	
	private string _spActive;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnPicIDChanging(string value);
    partial void OnPicIDChanged();
    partial void OnPicPathChanging(string value);
    partial void OnPicPathChanged();
    partial void OnActiveChanging(byte value);
    partial void OnActiveChanged();
    partial void OnUploadTimeChanging(System.DateTime value);
    partial void OnUploadTimeChanged();
    partial void OnspUploadTimeChanging(string value);
    partial void OnspUploadTimeChanged();
    partial void OnspActiveChanging(string value);
    partial void OnspActiveChanged();
    #endregion
	
	public DesignPic()
	{
		OnCreated();
	}
	
	[Column(Storage="_PicID", DbType="NVarChar(50) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
	public string PicID
	{
		get
		{
			return this._PicID;
		}
		set
		{
			if ((this._PicID != value))
			{
				this.OnPicIDChanging(value);
				this.SendPropertyChanging();
				this._PicID = value;
				this.SendPropertyChanged("PicID");
				this.OnPicIDChanged();
			}
		}
	}
	
	[Column(Storage="_PicPath", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
	public string PicPath
	{
		get
		{
			return this._PicPath;
		}
		set
		{
			if ((this._PicPath != value))
			{
				this.OnPicPathChanging(value);
				this.SendPropertyChanging();
				this._PicPath = value;
				this.SendPropertyChanged("PicPath");
				this.OnPicPathChanged();
			}
		}
	}
	
	[Column(Storage="_Active", DbType="TinyInt NOT NULL")]
	public byte Active
	{
		get
		{
			return this._Active;
		}
		set
		{
			if ((this._Active != value))
			{
				this.OnActiveChanging(value);
				this.SendPropertyChanging();
				this._Active = value;
				this.SendPropertyChanged("Active");
				this.OnActiveChanged();
			}
		}
	}
	
	[Column(Storage="_UploadTime", DbType="DateTime NOT NULL")]
	public System.DateTime UploadTime
	{
		get
		{
			return this._UploadTime;
		}
		set
		{
			if ((this._UploadTime != value))
			{
				this.OnUploadTimeChanging(value);
				this.SendPropertyChanging();
				this._UploadTime = value;
				this.SendPropertyChanged("UploadTime");
				this.OnUploadTimeChanged();
			}
		}
	}
	
	[Column(Storage="_spUploadTime", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
	public string spUploadTime
	{
		get
		{
			return this._spUploadTime;
		}
		set
		{
			if ((this._spUploadTime != value))
			{
				this.OnspUploadTimeChanging(value);
				this.SendPropertyChanging();
				this._spUploadTime = value;
				this.SendPropertyChanged("spUploadTime");
				this.OnspUploadTimeChanged();
			}
		}
	}
	
	[Column(Storage="_spActive", DbType="NVarChar(20) NOT NULL", CanBeNull=false)]
	public string spActive
	{
		get
		{
			return this._spActive;
		}
		set
		{
			if ((this._spActive != value))
			{
				this.OnspActiveChanging(value);
				this.SendPropertyChanging();
				this._spActive = value;
				this.SendPropertyChanged("spActive");
				this.OnspActiveChanged();
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
}

[Table(Name="dbo.DesignText")]
public partial class DesignText : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private string _DesignTextID;
	
	private string _TextHe;
	
	private string _TextEn;
	
	private System.DateTime _LastUpdate;
	
	private string _spLastUpdate;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnDesignTextIDChanging(string value);
    partial void OnDesignTextIDChanged();
    partial void OnTextHeChanging(string value);
    partial void OnTextHeChanged();
    partial void OnTextEnChanging(string value);
    partial void OnTextEnChanged();
    partial void OnLastUpdateChanging(System.DateTime value);
    partial void OnLastUpdateChanged();
    partial void OnspLastUpdateChanging(string value);
    partial void OnspLastUpdateChanged();
    #endregion
	
	public DesignText()
	{
		OnCreated();
	}
	
	[Column(Storage="_DesignTextID", DbType="NVarChar(50) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
	public string DesignTextID
	{
		get
		{
			return this._DesignTextID;
		}
		set
		{
			if ((this._DesignTextID != value))
			{
				this.OnDesignTextIDChanging(value);
				this.SendPropertyChanging();
				this._DesignTextID = value;
				this.SendPropertyChanged("DesignTextID");
				this.OnDesignTextIDChanged();
			}
		}
	}
	
	[Column(Storage="_TextHe", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
	public string TextHe
	{
		get
		{
			return this._TextHe;
		}
		set
		{
			if ((this._TextHe != value))
			{
				this.OnTextHeChanging(value);
				this.SendPropertyChanging();
				this._TextHe = value;
				this.SendPropertyChanged("TextHe");
				this.OnTextHeChanged();
			}
		}
	}
	
	[Column(Storage="_TextEn", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
	public string TextEn
	{
		get
		{
			return this._TextEn;
		}
		set
		{
			if ((this._TextEn != value))
			{
				this.OnTextEnChanging(value);
				this.SendPropertyChanging();
				this._TextEn = value;
				this.SendPropertyChanged("TextEn");
				this.OnTextEnChanged();
			}
		}
	}
	
	[Column(Storage="_LastUpdate", DbType="DateTime NOT NULL")]
	public System.DateTime LastUpdate
	{
		get
		{
			return this._LastUpdate;
		}
		set
		{
			if ((this._LastUpdate != value))
			{
				this.OnLastUpdateChanging(value);
				this.SendPropertyChanging();
				this._LastUpdate = value;
				this.SendPropertyChanged("LastUpdate");
				this.OnLastUpdateChanged();
			}
		}
	}
	
	[Column(Storage="_spLastUpdate", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
	public string spLastUpdate
	{
		get
		{
			return this._spLastUpdate;
		}
		set
		{
			if ((this._spLastUpdate != value))
			{
				this.OnspLastUpdateChanging(value);
				this.SendPropertyChanging();
				this._spLastUpdate = value;
				this.SendPropertyChanged("spLastUpdate");
				this.OnspLastUpdateChanged();
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
}

[Table(Name="dbo.HeaderPic")]
public partial class HeaderPic : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private string _PicID;
	
	private string _PicPath;
	
	private byte _Active;
	
	private System.DateTime _UploadTime;
	
	private string _spUploadTime;
	
	private string _spActive;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnPicIDChanging(string value);
    partial void OnPicIDChanged();
    partial void OnPicPathChanging(string value);
    partial void OnPicPathChanged();
    partial void OnActiveChanging(byte value);
    partial void OnActiveChanged();
    partial void OnUploadTimeChanging(System.DateTime value);
    partial void OnUploadTimeChanged();
    partial void OnspUploadTimeChanging(string value);
    partial void OnspUploadTimeChanged();
    partial void OnspActiveChanging(string value);
    partial void OnspActiveChanged();
    #endregion
	
	public HeaderPic()
	{
		OnCreated();
	}
	
	[Column(Storage="_PicID", DbType="NVarChar(50) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
	public string PicID
	{
		get
		{
			return this._PicID;
		}
		set
		{
			if ((this._PicID != value))
			{
				this.OnPicIDChanging(value);
				this.SendPropertyChanging();
				this._PicID = value;
				this.SendPropertyChanged("PicID");
				this.OnPicIDChanged();
			}
		}
	}
	
	[Column(Storage="_PicPath", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
	public string PicPath
	{
		get
		{
			return this._PicPath;
		}
		set
		{
			if ((this._PicPath != value))
			{
				this.OnPicPathChanging(value);
				this.SendPropertyChanging();
				this._PicPath = value;
				this.SendPropertyChanged("PicPath");
				this.OnPicPathChanged();
			}
		}
	}
	
	[Column(Storage="_Active", DbType="TinyInt NOT NULL")]
	public byte Active
	{
		get
		{
			return this._Active;
		}
		set
		{
			if ((this._Active != value))
			{
				this.OnActiveChanging(value);
				this.SendPropertyChanging();
				this._Active = value;
				this.SendPropertyChanged("Active");
				this.OnActiveChanged();
			}
		}
	}
	
	[Column(Storage="_UploadTime", DbType="DateTime NOT NULL")]
	public System.DateTime UploadTime
	{
		get
		{
			return this._UploadTime;
		}
		set
		{
			if ((this._UploadTime != value))
			{
				this.OnUploadTimeChanging(value);
				this.SendPropertyChanging();
				this._UploadTime = value;
				this.SendPropertyChanged("UploadTime");
				this.OnUploadTimeChanged();
			}
		}
	}
	
	[Column(Storage="_spUploadTime", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
	public string spUploadTime
	{
		get
		{
			return this._spUploadTime;
		}
		set
		{
			if ((this._spUploadTime != value))
			{
				this.OnspUploadTimeChanging(value);
				this.SendPropertyChanging();
				this._spUploadTime = value;
				this.SendPropertyChanged("spUploadTime");
				this.OnspUploadTimeChanged();
			}
		}
	}
	
	[Column(Storage="_spActive", DbType="NVarChar(20) NOT NULL", CanBeNull=false)]
	public string spActive
	{
		get
		{
			return this._spActive;
		}
		set
		{
			if ((this._spActive != value))
			{
				this.OnspActiveChanging(value);
				this.SendPropertyChanging();
				this._spActive = value;
				this.SendPropertyChanged("spActive");
				this.OnspActiveChanged();
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
}

[Table(Name="dbo.LastRecordPic")]
public partial class LastRecordPic : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private string _PicID;
	
	private string _PicPathColor;
	
	private string _PicPathBW;
	
	private byte _Active;
	
	private System.DateTime _UploadTime;
	
	private string _spUploadTime;
	
	private string _spActive;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnPicIDChanging(string value);
    partial void OnPicIDChanged();
    partial void OnPicPathColorChanging(string value);
    partial void OnPicPathColorChanged();
    partial void OnPicPathBWChanging(string value);
    partial void OnPicPathBWChanged();
    partial void OnActiveChanging(byte value);
    partial void OnActiveChanged();
    partial void OnUploadTimeChanging(System.DateTime value);
    partial void OnUploadTimeChanged();
    partial void OnspUploadTimeChanging(string value);
    partial void OnspUploadTimeChanged();
    partial void OnspActiveChanging(string value);
    partial void OnspActiveChanged();
    #endregion
	
	public LastRecordPic()
	{
		OnCreated();
	}
	
	[Column(Storage="_PicID", DbType="NVarChar(50) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
	public string PicID
	{
		get
		{
			return this._PicID;
		}
		set
		{
			if ((this._PicID != value))
			{
				this.OnPicIDChanging(value);
				this.SendPropertyChanging();
				this._PicID = value;
				this.SendPropertyChanged("PicID");
				this.OnPicIDChanged();
			}
		}
	}
	
	[Column(Storage="_PicPathColor", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
	public string PicPathColor
	{
		get
		{
			return this._PicPathColor;
		}
		set
		{
			if ((this._PicPathColor != value))
			{
				this.OnPicPathColorChanging(value);
				this.SendPropertyChanging();
				this._PicPathColor = value;
				this.SendPropertyChanged("PicPathColor");
				this.OnPicPathColorChanged();
			}
		}
	}
	
	[Column(Storage="_PicPathBW", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
	public string PicPathBW
	{
		get
		{
			return this._PicPathBW;
		}
		set
		{
			if ((this._PicPathBW != value))
			{
				this.OnPicPathBWChanging(value);
				this.SendPropertyChanging();
				this._PicPathBW = value;
				this.SendPropertyChanged("PicPathBW");
				this.OnPicPathBWChanged();
			}
		}
	}
	
	[Column(Storage="_Active", DbType="TinyInt NOT NULL")]
	public byte Active
	{
		get
		{
			return this._Active;
		}
		set
		{
			if ((this._Active != value))
			{
				this.OnActiveChanging(value);
				this.SendPropertyChanging();
				this._Active = value;
				this.SendPropertyChanged("Active");
				this.OnActiveChanged();
			}
		}
	}
	
	[Column(Storage="_UploadTime", DbType="DateTime NOT NULL")]
	public System.DateTime UploadTime
	{
		get
		{
			return this._UploadTime;
		}
		set
		{
			if ((this._UploadTime != value))
			{
				this.OnUploadTimeChanging(value);
				this.SendPropertyChanging();
				this._UploadTime = value;
				this.SendPropertyChanged("UploadTime");
				this.OnUploadTimeChanged();
			}
		}
	}
	
	[Column(Storage="_spUploadTime", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
	public string spUploadTime
	{
		get
		{
			return this._spUploadTime;
		}
		set
		{
			if ((this._spUploadTime != value))
			{
				this.OnspUploadTimeChanging(value);
				this.SendPropertyChanging();
				this._spUploadTime = value;
				this.SendPropertyChanged("spUploadTime");
				this.OnspUploadTimeChanged();
			}
		}
	}
	
	[Column(Storage="_spActive", DbType="NVarChar(20) NOT NULL", CanBeNull=false)]
	public string spActive
	{
		get
		{
			return this._spActive;
		}
		set
		{
			if ((this._spActive != value))
			{
				this.OnspActiveChanging(value);
				this.SendPropertyChanging();
				this._spActive = value;
				this.SendPropertyChanged("spActive");
				this.OnspActiveChanged();
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
}

[Table(Name="dbo.MainAbout")]
public partial class MainAbout : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private string _MainAboutID;
	
	private string _AboutHe;
	
	private string _AboutEn;
	
	private System.DateTime _LastUpdate;
	
	private string _spLastUpdate;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnMainAboutIDChanging(string value);
    partial void OnMainAboutIDChanged();
    partial void OnAboutHeChanging(string value);
    partial void OnAboutHeChanged();
    partial void OnAboutEnChanging(string value);
    partial void OnAboutEnChanged();
    partial void OnLastUpdateChanging(System.DateTime value);
    partial void OnLastUpdateChanged();
    partial void OnspLastUpdateChanging(string value);
    partial void OnspLastUpdateChanged();
    #endregion
	
	public MainAbout()
	{
		OnCreated();
	}
	
	[Column(Storage="_MainAboutID", DbType="NVarChar(50) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
	public string MainAboutID
	{
		get
		{
			return this._MainAboutID;
		}
		set
		{
			if ((this._MainAboutID != value))
			{
				this.OnMainAboutIDChanging(value);
				this.SendPropertyChanging();
				this._MainAboutID = value;
				this.SendPropertyChanged("MainAboutID");
				this.OnMainAboutIDChanged();
			}
		}
	}
	
	[Column(Storage="_AboutHe", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
	public string AboutHe
	{
		get
		{
			return this._AboutHe;
		}
		set
		{
			if ((this._AboutHe != value))
			{
				this.OnAboutHeChanging(value);
				this.SendPropertyChanging();
				this._AboutHe = value;
				this.SendPropertyChanged("AboutHe");
				this.OnAboutHeChanged();
			}
		}
	}
	
	[Column(Storage="_AboutEn", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
	public string AboutEn
	{
		get
		{
			return this._AboutEn;
		}
		set
		{
			if ((this._AboutEn != value))
			{
				this.OnAboutEnChanging(value);
				this.SendPropertyChanging();
				this._AboutEn = value;
				this.SendPropertyChanged("AboutEn");
				this.OnAboutEnChanged();
			}
		}
	}
	
	[Column(Storage="_LastUpdate", DbType="DateTime NOT NULL")]
	public System.DateTime LastUpdate
	{
		get
		{
			return this._LastUpdate;
		}
		set
		{
			if ((this._LastUpdate != value))
			{
				this.OnLastUpdateChanging(value);
				this.SendPropertyChanging();
				this._LastUpdate = value;
				this.SendPropertyChanged("LastUpdate");
				this.OnLastUpdateChanged();
			}
		}
	}
	
	[Column(Storage="_spLastUpdate", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
	public string spLastUpdate
	{
		get
		{
			return this._spLastUpdate;
		}
		set
		{
			if ((this._spLastUpdate != value))
			{
				this.OnspLastUpdateChanging(value);
				this.SendPropertyChanging();
				this._spLastUpdate = value;
				this.SendPropertyChanged("spLastUpdate");
				this.OnspLastUpdateChanged();
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
}

[Table(Name="dbo.MainContact")]
public partial class MainContact : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private string _MainContactID;
	
	private string _ContactHe;
	
	private string _ContactEn;
	
	private System.DateTime _LastUpdate;
	
	private string _spLastUpdate;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnMainContactIDChanging(string value);
    partial void OnMainContactIDChanged();
    partial void OnContactHeChanging(string value);
    partial void OnContactHeChanged();
    partial void OnContactEnChanging(string value);
    partial void OnContactEnChanged();
    partial void OnLastUpdateChanging(System.DateTime value);
    partial void OnLastUpdateChanged();
    partial void OnspLastUpdateChanging(string value);
    partial void OnspLastUpdateChanged();
    #endregion
	
	public MainContact()
	{
		OnCreated();
	}
	
	[Column(Storage="_MainContactID", DbType="NVarChar(50) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
	public string MainContactID
	{
		get
		{
			return this._MainContactID;
		}
		set
		{
			if ((this._MainContactID != value))
			{
				this.OnMainContactIDChanging(value);
				this.SendPropertyChanging();
				this._MainContactID = value;
				this.SendPropertyChanged("MainContactID");
				this.OnMainContactIDChanged();
			}
		}
	}
	
	[Column(Storage="_ContactHe", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
	public string ContactHe
	{
		get
		{
			return this._ContactHe;
		}
		set
		{
			if ((this._ContactHe != value))
			{
				this.OnContactHeChanging(value);
				this.SendPropertyChanging();
				this._ContactHe = value;
				this.SendPropertyChanged("ContactHe");
				this.OnContactHeChanged();
			}
		}
	}
	
	[Column(Storage="_ContactEn", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
	public string ContactEn
	{
		get
		{
			return this._ContactEn;
		}
		set
		{
			if ((this._ContactEn != value))
			{
				this.OnContactEnChanging(value);
				this.SendPropertyChanging();
				this._ContactEn = value;
				this.SendPropertyChanged("ContactEn");
				this.OnContactEnChanged();
			}
		}
	}
	
	[Column(Storage="_LastUpdate", DbType="DateTime NOT NULL")]
	public System.DateTime LastUpdate
	{
		get
		{
			return this._LastUpdate;
		}
		set
		{
			if ((this._LastUpdate != value))
			{
				this.OnLastUpdateChanging(value);
				this.SendPropertyChanging();
				this._LastUpdate = value;
				this.SendPropertyChanged("LastUpdate");
				this.OnLastUpdateChanged();
			}
		}
	}
	
	[Column(Storage="_spLastUpdate", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
	public string spLastUpdate
	{
		get
		{
			return this._spLastUpdate;
		}
		set
		{
			if ((this._spLastUpdate != value))
			{
				this.OnspLastUpdateChanging(value);
				this.SendPropertyChanging();
				this._spLastUpdate = value;
				this.SendPropertyChanged("spLastUpdate");
				this.OnspLastUpdateChanged();
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
}

[Table(Name="dbo.NewsOb")]
public partial class NewsOb : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private string _NewsID;
	
	private string _NewsHe;
	
	private string _NewsEn;
	
	private System.DateTime _UploadTime;
	
	private string _spUploadTime;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnNewsIDChanging(string value);
    partial void OnNewsIDChanged();
    partial void OnNewsHeChanging(string value);
    partial void OnNewsHeChanged();
    partial void OnNewsEnChanging(string value);
    partial void OnNewsEnChanged();
    partial void OnUploadTimeChanging(System.DateTime value);
    partial void OnUploadTimeChanged();
    partial void OnspUploadTimeChanging(string value);
    partial void OnspUploadTimeChanged();
    #endregion
	
	public NewsOb()
	{
		OnCreated();
	}
	
	[Column(Storage="_NewsID", DbType="NVarChar(50) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
	public string NewsID
	{
		get
		{
			return this._NewsID;
		}
		set
		{
			if ((this._NewsID != value))
			{
				this.OnNewsIDChanging(value);
				this.SendPropertyChanging();
				this._NewsID = value;
				this.SendPropertyChanged("NewsID");
				this.OnNewsIDChanged();
			}
		}
	}
	
	[Column(Storage="_NewsHe", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
	public string NewsHe
	{
		get
		{
			return this._NewsHe;
		}
		set
		{
			if ((this._NewsHe != value))
			{
				this.OnNewsHeChanging(value);
				this.SendPropertyChanging();
				this._NewsHe = value;
				this.SendPropertyChanged("NewsHe");
				this.OnNewsHeChanged();
			}
		}
	}
	
	[Column(Storage="_NewsEn", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
	public string NewsEn
	{
		get
		{
			return this._NewsEn;
		}
		set
		{
			if ((this._NewsEn != value))
			{
				this.OnNewsEnChanging(value);
				this.SendPropertyChanging();
				this._NewsEn = value;
				this.SendPropertyChanged("NewsEn");
				this.OnNewsEnChanged();
			}
		}
	}
	
	[Column(Storage="_UploadTime", DbType="DateTime NOT NULL")]
	public System.DateTime UploadTime
	{
		get
		{
			return this._UploadTime;
		}
		set
		{
			if ((this._UploadTime != value))
			{
				this.OnUploadTimeChanging(value);
				this.SendPropertyChanging();
				this._UploadTime = value;
				this.SendPropertyChanged("UploadTime");
				this.OnUploadTimeChanged();
			}
		}
	}
	
	[Column(Storage="_spUploadTime", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
	public string spUploadTime
	{
		get
		{
			return this._spUploadTime;
		}
		set
		{
			if ((this._spUploadTime != value))
			{
				this.OnspUploadTimeChanging(value);
				this.SendPropertyChanging();
				this._spUploadTime = value;
				this.SendPropertyChanged("spUploadTime");
				this.OnspUploadTimeChanged();
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
}

[Table(Name="dbo.Production")]
public partial class Production : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private string _ProID;
	
	private string _ArtistNameHe;
	
	private string _ArtistNameEn;
	
	private string _ArtistTextHe;
	
	private string _ArtistTextEn;
	
	private string _PicPathColor;
	
	private string _PicPathBW;
	
	private string _PicPathMain;
	
	private byte _Active;
	
	private System.DateTime _UploadTime;
	
	private string _spUploadTime;
	
	private string _spActive;
	
	private EntitySet<Song> _Songs;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnProIDChanging(string value);
    partial void OnProIDChanged();
    partial void OnArtistNameHeChanging(string value);
    partial void OnArtistNameHeChanged();
    partial void OnArtistNameEnChanging(string value);
    partial void OnArtistNameEnChanged();
    partial void OnArtistTextHeChanging(string value);
    partial void OnArtistTextHeChanged();
    partial void OnArtistTextEnChanging(string value);
    partial void OnArtistTextEnChanged();
    partial void OnPicPathColorChanging(string value);
    partial void OnPicPathColorChanged();
    partial void OnPicPathBWChanging(string value);
    partial void OnPicPathBWChanged();
    partial void OnPicPathMainChanging(string value);
    partial void OnPicPathMainChanged();
    partial void OnActiveChanging(byte value);
    partial void OnActiveChanged();
    partial void OnUploadTimeChanging(System.DateTime value);
    partial void OnUploadTimeChanged();
    partial void OnspUploadTimeChanging(string value);
    partial void OnspUploadTimeChanged();
    partial void OnspActiveChanging(string value);
    partial void OnspActiveChanged();
    #endregion
	
	public Production()
	{
		this._Songs = new EntitySet<Song>(new Action<Song>(this.attach_Songs), new Action<Song>(this.detach_Songs));
		OnCreated();
	}
	
	[Column(Storage="_ProID", DbType="NVarChar(50) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
	public string ProID
	{
		get
		{
			return this._ProID;
		}
		set
		{
			if ((this._ProID != value))
			{
				this.OnProIDChanging(value);
				this.SendPropertyChanging();
				this._ProID = value;
				this.SendPropertyChanged("ProID");
				this.OnProIDChanged();
			}
		}
	}
	
	[Column(Storage="_ArtistNameHe", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
	public string ArtistNameHe
	{
		get
		{
			return this._ArtistNameHe;
		}
		set
		{
			if ((this._ArtistNameHe != value))
			{
				this.OnArtistNameHeChanging(value);
				this.SendPropertyChanging();
				this._ArtistNameHe = value;
				this.SendPropertyChanged("ArtistNameHe");
				this.OnArtistNameHeChanged();
			}
		}
	}
	
	[Column(Storage="_ArtistNameEn", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
	public string ArtistNameEn
	{
		get
		{
			return this._ArtistNameEn;
		}
		set
		{
			if ((this._ArtistNameEn != value))
			{
				this.OnArtistNameEnChanging(value);
				this.SendPropertyChanging();
				this._ArtistNameEn = value;
				this.SendPropertyChanged("ArtistNameEn");
				this.OnArtistNameEnChanged();
			}
		}
	}
	
	[Column(Storage="_ArtistTextHe", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
	public string ArtistTextHe
	{
		get
		{
			return this._ArtistTextHe;
		}
		set
		{
			if ((this._ArtistTextHe != value))
			{
				this.OnArtistTextHeChanging(value);
				this.SendPropertyChanging();
				this._ArtistTextHe = value;
				this.SendPropertyChanged("ArtistTextHe");
				this.OnArtistTextHeChanged();
			}
		}
	}
	
	[Column(Storage="_ArtistTextEn", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
	public string ArtistTextEn
	{
		get
		{
			return this._ArtistTextEn;
		}
		set
		{
			if ((this._ArtistTextEn != value))
			{
				this.OnArtistTextEnChanging(value);
				this.SendPropertyChanging();
				this._ArtistTextEn = value;
				this.SendPropertyChanged("ArtistTextEn");
				this.OnArtistTextEnChanged();
			}
		}
	}
	
	[Column(Storage="_PicPathColor", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
	public string PicPathColor
	{
		get
		{
			return this._PicPathColor;
		}
		set
		{
			if ((this._PicPathColor != value))
			{
				this.OnPicPathColorChanging(value);
				this.SendPropertyChanging();
				this._PicPathColor = value;
				this.SendPropertyChanged("PicPathColor");
				this.OnPicPathColorChanged();
			}
		}
	}
	
	[Column(Storage="_PicPathBW", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
	public string PicPathBW
	{
		get
		{
			return this._PicPathBW;
		}
		set
		{
			if ((this._PicPathBW != value))
			{
				this.OnPicPathBWChanging(value);
				this.SendPropertyChanging();
				this._PicPathBW = value;
				this.SendPropertyChanged("PicPathBW");
				this.OnPicPathBWChanged();
			}
		}
	}
	
	[Column(Storage="_PicPathMain", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
	public string PicPathMain
	{
		get
		{
			return this._PicPathMain;
		}
		set
		{
			if ((this._PicPathMain != value))
			{
				this.OnPicPathMainChanging(value);
				this.SendPropertyChanging();
				this._PicPathMain = value;
				this.SendPropertyChanged("PicPathMain");
				this.OnPicPathMainChanged();
			}
		}
	}
	
	[Column(Storage="_Active", DbType="TinyInt NOT NULL")]
	public byte Active
	{
		get
		{
			return this._Active;
		}
		set
		{
			if ((this._Active != value))
			{
				this.OnActiveChanging(value);
				this.SendPropertyChanging();
				this._Active = value;
				this.SendPropertyChanged("Active");
				this.OnActiveChanged();
			}
		}
	}
	
	[Column(Storage="_UploadTime", DbType="DateTime NOT NULL")]
	public System.DateTime UploadTime
	{
		get
		{
			return this._UploadTime;
		}
		set
		{
			if ((this._UploadTime != value))
			{
				this.OnUploadTimeChanging(value);
				this.SendPropertyChanging();
				this._UploadTime = value;
				this.SendPropertyChanged("UploadTime");
				this.OnUploadTimeChanged();
			}
		}
	}
	
	[Column(Storage="_spUploadTime", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
	public string spUploadTime
	{
		get
		{
			return this._spUploadTime;
		}
		set
		{
			if ((this._spUploadTime != value))
			{
				this.OnspUploadTimeChanging(value);
				this.SendPropertyChanging();
				this._spUploadTime = value;
				this.SendPropertyChanged("spUploadTime");
				this.OnspUploadTimeChanged();
			}
		}
	}
	
	[Column(Storage="_spActive", DbType="NVarChar(20) NOT NULL", CanBeNull=false)]
	public string spActive
	{
		get
		{
			return this._spActive;
		}
		set
		{
			if ((this._spActive != value))
			{
				this.OnspActiveChanging(value);
				this.SendPropertyChanging();
				this._spActive = value;
				this.SendPropertyChanged("spActive");
				this.OnspActiveChanged();
			}
		}
	}
	
	[Association(Name="Production_Song", Storage="_Songs", ThisKey="ProID", OtherKey="ProIDParent")]
	public EntitySet<Song> Songs
	{
		get
		{
			return this._Songs;
		}
		set
		{
			this._Songs.Assign(value);
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
	
	private void attach_Songs(Song entity)
	{
		this.SendPropertyChanging();
		entity.Production = this;
	}
	
	private void detach_Songs(Song entity)
	{
		this.SendPropertyChanging();
		entity.Production = null;
	}
}

[Table(Name="dbo.PrPic")]
public partial class PrPic : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private string _PicID;
	
	private string _PicPath;
	
	private byte _Active;
	
	private System.DateTime _UploadTime;
	
	private string _spUploadTime;
	
	private string _spActive;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnPicIDChanging(string value);
    partial void OnPicIDChanged();
    partial void OnPicPathChanging(string value);
    partial void OnPicPathChanged();
    partial void OnActiveChanging(byte value);
    partial void OnActiveChanged();
    partial void OnUploadTimeChanging(System.DateTime value);
    partial void OnUploadTimeChanged();
    partial void OnspUploadTimeChanging(string value);
    partial void OnspUploadTimeChanged();
    partial void OnspActiveChanging(string value);
    partial void OnspActiveChanged();
    #endregion
	
	public PrPic()
	{
		OnCreated();
	}
	
	[Column(Storage="_PicID", DbType="NVarChar(50) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
	public string PicID
	{
		get
		{
			return this._PicID;
		}
		set
		{
			if ((this._PicID != value))
			{
				this.OnPicIDChanging(value);
				this.SendPropertyChanging();
				this._PicID = value;
				this.SendPropertyChanged("PicID");
				this.OnPicIDChanged();
			}
		}
	}
	
	[Column(Storage="_PicPath", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
	public string PicPath
	{
		get
		{
			return this._PicPath;
		}
		set
		{
			if ((this._PicPath != value))
			{
				this.OnPicPathChanging(value);
				this.SendPropertyChanging();
				this._PicPath = value;
				this.SendPropertyChanged("PicPath");
				this.OnPicPathChanged();
			}
		}
	}
	
	[Column(Storage="_Active", DbType="TinyInt NOT NULL")]
	public byte Active
	{
		get
		{
			return this._Active;
		}
		set
		{
			if ((this._Active != value))
			{
				this.OnActiveChanging(value);
				this.SendPropertyChanging();
				this._Active = value;
				this.SendPropertyChanged("Active");
				this.OnActiveChanged();
			}
		}
	}
	
	[Column(Storage="_UploadTime", DbType="DateTime NOT NULL")]
	public System.DateTime UploadTime
	{
		get
		{
			return this._UploadTime;
		}
		set
		{
			if ((this._UploadTime != value))
			{
				this.OnUploadTimeChanging(value);
				this.SendPropertyChanging();
				this._UploadTime = value;
				this.SendPropertyChanged("UploadTime");
				this.OnUploadTimeChanged();
			}
		}
	}
	
	[Column(Storage="_spUploadTime", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
	public string spUploadTime
	{
		get
		{
			return this._spUploadTime;
		}
		set
		{
			if ((this._spUploadTime != value))
			{
				this.OnspUploadTimeChanging(value);
				this.SendPropertyChanging();
				this._spUploadTime = value;
				this.SendPropertyChanged("spUploadTime");
				this.OnspUploadTimeChanged();
			}
		}
	}
	
	[Column(Storage="_spActive", DbType="NVarChar(20) NOT NULL", CanBeNull=false)]
	public string spActive
	{
		get
		{
			return this._spActive;
		}
		set
		{
			if ((this._spActive != value))
			{
				this.OnspActiveChanging(value);
				this.SendPropertyChanging();
				this._spActive = value;
				this.SendPropertyChanged("spActive");
				this.OnspActiveChanged();
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
}

[Table(Name="dbo.PrText")]
public partial class PrText : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private string _PrTextID;
	
	private string _TextHe;
	
	private string _TextEn;
	
	private System.DateTime _LastUpdate;
	
	private string _spLastUpdate;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnPrTextIDChanging(string value);
    partial void OnPrTextIDChanged();
    partial void OnTextHeChanging(string value);
    partial void OnTextHeChanged();
    partial void OnTextEnChanging(string value);
    partial void OnTextEnChanged();
    partial void OnLastUpdateChanging(System.DateTime value);
    partial void OnLastUpdateChanged();
    partial void OnspLastUpdateChanging(string value);
    partial void OnspLastUpdateChanged();
    #endregion
	
	public PrText()
	{
		OnCreated();
	}
	
	[Column(Storage="_PrTextID", DbType="NVarChar(50) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
	public string PrTextID
	{
		get
		{
			return this._PrTextID;
		}
		set
		{
			if ((this._PrTextID != value))
			{
				this.OnPrTextIDChanging(value);
				this.SendPropertyChanging();
				this._PrTextID = value;
				this.SendPropertyChanged("PrTextID");
				this.OnPrTextIDChanged();
			}
		}
	}
	
	[Column(Storage="_TextHe", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
	public string TextHe
	{
		get
		{
			return this._TextHe;
		}
		set
		{
			if ((this._TextHe != value))
			{
				this.OnTextHeChanging(value);
				this.SendPropertyChanging();
				this._TextHe = value;
				this.SendPropertyChanged("TextHe");
				this.OnTextHeChanged();
			}
		}
	}
	
	[Column(Storage="_TextEn", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
	public string TextEn
	{
		get
		{
			return this._TextEn;
		}
		set
		{
			if ((this._TextEn != value))
			{
				this.OnTextEnChanging(value);
				this.SendPropertyChanging();
				this._TextEn = value;
				this.SendPropertyChanged("TextEn");
				this.OnTextEnChanged();
			}
		}
	}
	
	[Column(Storage="_LastUpdate", DbType="DateTime NOT NULL")]
	public System.DateTime LastUpdate
	{
		get
		{
			return this._LastUpdate;
		}
		set
		{
			if ((this._LastUpdate != value))
			{
				this.OnLastUpdateChanging(value);
				this.SendPropertyChanging();
				this._LastUpdate = value;
				this.SendPropertyChanged("LastUpdate");
				this.OnLastUpdateChanged();
			}
		}
	}
	
	[Column(Storage="_spLastUpdate", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
	public string spLastUpdate
	{
		get
		{
			return this._spLastUpdate;
		}
		set
		{
			if ((this._spLastUpdate != value))
			{
				this.OnspLastUpdateChanging(value);
				this.SendPropertyChanging();
				this._spLastUpdate = value;
				this.SendPropertyChanged("spLastUpdate");
				this.OnspLastUpdateChanged();
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
}

[Table(Name="dbo.PublishGallery")]
public partial class PublishGallery : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private string _PublishGalleryID;
	
	private string _PublishGalleryNameHe;
	
	private string _PublishGalleryNameEn;
	
	private System.DateTime _LastUpdate;
	
	private string _spLastUpdate;
	
	private EntitySet<PublishPic> _PublishPics;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnPublishGalleryIDChanging(string value);
    partial void OnPublishGalleryIDChanged();
    partial void OnPublishGalleryNameHeChanging(string value);
    partial void OnPublishGalleryNameHeChanged();
    partial void OnPublishGalleryNameEnChanging(string value);
    partial void OnPublishGalleryNameEnChanged();
    partial void OnLastUpdateChanging(System.DateTime value);
    partial void OnLastUpdateChanged();
    partial void OnspLastUpdateChanging(string value);
    partial void OnspLastUpdateChanged();
    #endregion
	
	public PublishGallery()
	{
		this._PublishPics = new EntitySet<PublishPic>(new Action<PublishPic>(this.attach_PublishPics), new Action<PublishPic>(this.detach_PublishPics));
		OnCreated();
	}
	
	[Column(Storage="_PublishGalleryID", DbType="NVarChar(50) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
	public string PublishGalleryID
	{
		get
		{
			return this._PublishGalleryID;
		}
		set
		{
			if ((this._PublishGalleryID != value))
			{
				this.OnPublishGalleryIDChanging(value);
				this.SendPropertyChanging();
				this._PublishGalleryID = value;
				this.SendPropertyChanged("PublishGalleryID");
				this.OnPublishGalleryIDChanged();
			}
		}
	}
	
	[Column(Storage="_PublishGalleryNameHe", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
	public string PublishGalleryNameHe
	{
		get
		{
			return this._PublishGalleryNameHe;
		}
		set
		{
			if ((this._PublishGalleryNameHe != value))
			{
				this.OnPublishGalleryNameHeChanging(value);
				this.SendPropertyChanging();
				this._PublishGalleryNameHe = value;
				this.SendPropertyChanged("PublishGalleryNameHe");
				this.OnPublishGalleryNameHeChanged();
			}
		}
	}
	
	[Column(Storage="_PublishGalleryNameEn", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
	public string PublishGalleryNameEn
	{
		get
		{
			return this._PublishGalleryNameEn;
		}
		set
		{
			if ((this._PublishGalleryNameEn != value))
			{
				this.OnPublishGalleryNameEnChanging(value);
				this.SendPropertyChanging();
				this._PublishGalleryNameEn = value;
				this.SendPropertyChanged("PublishGalleryNameEn");
				this.OnPublishGalleryNameEnChanged();
			}
		}
	}
	
	[Column(Storage="_LastUpdate", DbType="DateTime NOT NULL")]
	public System.DateTime LastUpdate
	{
		get
		{
			return this._LastUpdate;
		}
		set
		{
			if ((this._LastUpdate != value))
			{
				this.OnLastUpdateChanging(value);
				this.SendPropertyChanging();
				this._LastUpdate = value;
				this.SendPropertyChanged("LastUpdate");
				this.OnLastUpdateChanged();
			}
		}
	}
	
	[Column(Storage="_spLastUpdate", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
	public string spLastUpdate
	{
		get
		{
			return this._spLastUpdate;
		}
		set
		{
			if ((this._spLastUpdate != value))
			{
				this.OnspLastUpdateChanging(value);
				this.SendPropertyChanging();
				this._spLastUpdate = value;
				this.SendPropertyChanged("spLastUpdate");
				this.OnspLastUpdateChanged();
			}
		}
	}
	
	[Association(Name="PublishGallery_PublishPic", Storage="_PublishPics", ThisKey="PublishGalleryID", OtherKey="GalleryID")]
	public EntitySet<PublishPic> PublishPics
	{
		get
		{
			return this._PublishPics;
		}
		set
		{
			this._PublishPics.Assign(value);
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
	
	private void attach_PublishPics(PublishPic entity)
	{
		this.SendPropertyChanging();
		entity.PublishGallery = this;
	}
	
	private void detach_PublishPics(PublishPic entity)
	{
		this.SendPropertyChanging();
		entity.PublishGallery = null;
	}
}

[Table(Name="dbo.PublishPic")]
public partial class PublishPic : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private string _PicID;
	
	private string _GalleryID;
	
	private string _PicPath;
	
	private string _TextHe;
	
	private string _TextEn;
	
	private byte _Active;
	
	private byte _TopPage;
	
	private byte _TopPagePlace;
	
	private System.DateTime _UploadTime;
	
	private string _spUploadTime;
	
	private string _spActive;
	
	private EntityRef<PublishGallery> _PublishGallery;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnPicIDChanging(string value);
    partial void OnPicIDChanged();
    partial void OnGalleryIDChanging(string value);
    partial void OnGalleryIDChanged();
    partial void OnPicPathChanging(string value);
    partial void OnPicPathChanged();
    partial void OnTextHeChanging(string value);
    partial void OnTextHeChanged();
    partial void OnTextEnChanging(string value);
    partial void OnTextEnChanged();
    partial void OnActiveChanging(byte value);
    partial void OnActiveChanged();
    partial void OnTopPageChanging(byte value);
    partial void OnTopPageChanged();
    partial void OnTopPagePlaceChanging(byte value);
    partial void OnTopPagePlaceChanged();
    partial void OnUploadTimeChanging(System.DateTime value);
    partial void OnUploadTimeChanged();
    partial void OnspUploadTimeChanging(string value);
    partial void OnspUploadTimeChanged();
    partial void OnspActiveChanging(string value);
    partial void OnspActiveChanged();
    #endregion
	
	public PublishPic()
	{
		this._PublishGallery = default(EntityRef<PublishGallery>);
		OnCreated();
	}
	
	[Column(Storage="_PicID", DbType="NVarChar(50) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
	public string PicID
	{
		get
		{
			return this._PicID;
		}
		set
		{
			if ((this._PicID != value))
			{
				this.OnPicIDChanging(value);
				this.SendPropertyChanging();
				this._PicID = value;
				this.SendPropertyChanged("PicID");
				this.OnPicIDChanged();
			}
		}
	}
	
	[Column(Storage="_GalleryID", DbType="NVarChar(50) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
	public string GalleryID
	{
		get
		{
			return this._GalleryID;
		}
		set
		{
			if ((this._GalleryID != value))
			{
				if (this._PublishGallery.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnGalleryIDChanging(value);
				this.SendPropertyChanging();
				this._GalleryID = value;
				this.SendPropertyChanged("GalleryID");
				this.OnGalleryIDChanged();
			}
		}
	}
	
	[Column(Storage="_PicPath", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
	public string PicPath
	{
		get
		{
			return this._PicPath;
		}
		set
		{
			if ((this._PicPath != value))
			{
				this.OnPicPathChanging(value);
				this.SendPropertyChanging();
				this._PicPath = value;
				this.SendPropertyChanged("PicPath");
				this.OnPicPathChanged();
			}
		}
	}
	
	[Column(Storage="_TextHe", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
	public string TextHe
	{
		get
		{
			return this._TextHe;
		}
		set
		{
			if ((this._TextHe != value))
			{
				this.OnTextHeChanging(value);
				this.SendPropertyChanging();
				this._TextHe = value;
				this.SendPropertyChanged("TextHe");
				this.OnTextHeChanged();
			}
		}
	}
	
	[Column(Storage="_TextEn", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
	public string TextEn
	{
		get
		{
			return this._TextEn;
		}
		set
		{
			if ((this._TextEn != value))
			{
				this.OnTextEnChanging(value);
				this.SendPropertyChanging();
				this._TextEn = value;
				this.SendPropertyChanged("TextEn");
				this.OnTextEnChanged();
			}
		}
	}
	
	[Column(Storage="_Active", DbType="TinyInt NOT NULL")]
	public byte Active
	{
		get
		{
			return this._Active;
		}
		set
		{
			if ((this._Active != value))
			{
				this.OnActiveChanging(value);
				this.SendPropertyChanging();
				this._Active = value;
				this.SendPropertyChanged("Active");
				this.OnActiveChanged();
			}
		}
	}
	
	[Column(Storage="_TopPage", DbType="TinyInt NOT NULL")]
	public byte TopPage
	{
		get
		{
			return this._TopPage;
		}
		set
		{
			if ((this._TopPage != value))
			{
				this.OnTopPageChanging(value);
				this.SendPropertyChanging();
				this._TopPage = value;
				this.SendPropertyChanged("TopPage");
				this.OnTopPageChanged();
			}
		}
	}
	
	[Column(Storage="_TopPagePlace", DbType="TinyInt NOT NULL")]
	public byte TopPagePlace
	{
		get
		{
			return this._TopPagePlace;
		}
		set
		{
			if ((this._TopPagePlace != value))
			{
				this.OnTopPagePlaceChanging(value);
				this.SendPropertyChanging();
				this._TopPagePlace = value;
				this.SendPropertyChanged("TopPagePlace");
				this.OnTopPagePlaceChanged();
			}
		}
	}
	
	[Column(Storage="_UploadTime", DbType="DateTime NOT NULL")]
	public System.DateTime UploadTime
	{
		get
		{
			return this._UploadTime;
		}
		set
		{
			if ((this._UploadTime != value))
			{
				this.OnUploadTimeChanging(value);
				this.SendPropertyChanging();
				this._UploadTime = value;
				this.SendPropertyChanged("UploadTime");
				this.OnUploadTimeChanged();
			}
		}
	}
	
	[Column(Storage="_spUploadTime", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
	public string spUploadTime
	{
		get
		{
			return this._spUploadTime;
		}
		set
		{
			if ((this._spUploadTime != value))
			{
				this.OnspUploadTimeChanging(value);
				this.SendPropertyChanging();
				this._spUploadTime = value;
				this.SendPropertyChanged("spUploadTime");
				this.OnspUploadTimeChanged();
			}
		}
	}
	
	[Column(Storage="_spActive", DbType="NVarChar(20) NOT NULL", CanBeNull=false)]
	public string spActive
	{
		get
		{
			return this._spActive;
		}
		set
		{
			if ((this._spActive != value))
			{
				this.OnspActiveChanging(value);
				this.SendPropertyChanging();
				this._spActive = value;
				this.SendPropertyChanged("spActive");
				this.OnspActiveChanged();
			}
		}
	}
	
	[Association(Name="PublishGallery_PublishPic", Storage="_PublishGallery", ThisKey="GalleryID", OtherKey="PublishGalleryID", IsForeignKey=true)]
	public PublishGallery PublishGallery
	{
		get
		{
			return this._PublishGallery.Entity;
		}
		set
		{
			PublishGallery previousValue = this._PublishGallery.Entity;
			if (((previousValue != value) 
						|| (this._PublishGallery.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._PublishGallery.Entity = null;
					previousValue.PublishPics.Remove(this);
				}
				this._PublishGallery.Entity = value;
				if ((value != null))
				{
					value.PublishPics.Add(this);
					this._GalleryID = value.PublishGalleryID;
				}
				else
				{
					this._GalleryID = default(string);
				}
				this.SendPropertyChanged("PublishGallery");
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
}

[Table(Name="dbo.RecordingRoomPic")]
public partial class RecordingRoomPic : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private string _PicID;
	
	private string _PicPathColor;
	
	private string _PicPathBW;
	
	private byte _Active;
	
	private System.DateTime _UploadTime;
	
	private string _spUploadTime;
	
	private string _spActive;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnPicIDChanging(string value);
    partial void OnPicIDChanged();
    partial void OnPicPathColorChanging(string value);
    partial void OnPicPathColorChanged();
    partial void OnPicPathBWChanging(string value);
    partial void OnPicPathBWChanged();
    partial void OnActiveChanging(byte value);
    partial void OnActiveChanged();
    partial void OnUploadTimeChanging(System.DateTime value);
    partial void OnUploadTimeChanged();
    partial void OnspUploadTimeChanging(string value);
    partial void OnspUploadTimeChanged();
    partial void OnspActiveChanging(string value);
    partial void OnspActiveChanged();
    #endregion
	
	public RecordingRoomPic()
	{
		OnCreated();
	}
	
	[Column(Storage="_PicID", DbType="NVarChar(50) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
	public string PicID
	{
		get
		{
			return this._PicID;
		}
		set
		{
			if ((this._PicID != value))
			{
				this.OnPicIDChanging(value);
				this.SendPropertyChanging();
				this._PicID = value;
				this.SendPropertyChanged("PicID");
				this.OnPicIDChanged();
			}
		}
	}
	
	[Column(Storage="_PicPathColor", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
	public string PicPathColor
	{
		get
		{
			return this._PicPathColor;
		}
		set
		{
			if ((this._PicPathColor != value))
			{
				this.OnPicPathColorChanging(value);
				this.SendPropertyChanging();
				this._PicPathColor = value;
				this.SendPropertyChanged("PicPathColor");
				this.OnPicPathColorChanged();
			}
		}
	}
	
	[Column(Storage="_PicPathBW", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
	public string PicPathBW
	{
		get
		{
			return this._PicPathBW;
		}
		set
		{
			if ((this._PicPathBW != value))
			{
				this.OnPicPathBWChanging(value);
				this.SendPropertyChanging();
				this._PicPathBW = value;
				this.SendPropertyChanged("PicPathBW");
				this.OnPicPathBWChanged();
			}
		}
	}
	
	[Column(Storage="_Active", DbType="TinyInt NOT NULL")]
	public byte Active
	{
		get
		{
			return this._Active;
		}
		set
		{
			if ((this._Active != value))
			{
				this.OnActiveChanging(value);
				this.SendPropertyChanging();
				this._Active = value;
				this.SendPropertyChanged("Active");
				this.OnActiveChanged();
			}
		}
	}
	
	[Column(Storage="_UploadTime", DbType="DateTime NOT NULL")]
	public System.DateTime UploadTime
	{
		get
		{
			return this._UploadTime;
		}
		set
		{
			if ((this._UploadTime != value))
			{
				this.OnUploadTimeChanging(value);
				this.SendPropertyChanging();
				this._UploadTime = value;
				this.SendPropertyChanged("UploadTime");
				this.OnUploadTimeChanged();
			}
		}
	}
	
	[Column(Storage="_spUploadTime", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
	public string spUploadTime
	{
		get
		{
			return this._spUploadTime;
		}
		set
		{
			if ((this._spUploadTime != value))
			{
				this.OnspUploadTimeChanging(value);
				this.SendPropertyChanging();
				this._spUploadTime = value;
				this.SendPropertyChanged("spUploadTime");
				this.OnspUploadTimeChanged();
			}
		}
	}
	
	[Column(Storage="_spActive", DbType="NVarChar(20) NOT NULL", CanBeNull=false)]
	public string spActive
	{
		get
		{
			return this._spActive;
		}
		set
		{
			if ((this._spActive != value))
			{
				this.OnspActiveChanging(value);
				this.SendPropertyChanging();
				this._spActive = value;
				this.SendPropertyChanged("spActive");
				this.OnspActiveChanged();
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
}

[Table(Name="dbo.RoomAPic")]
public partial class RoomAPic : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private string _PicID;
	
	private string _PicPath;
	
	private byte _Active;
	
	private System.DateTime _UploadTime;
	
	private string _spUploadTime;
	
	private string _spActive;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnPicIDChanging(string value);
    partial void OnPicIDChanged();
    partial void OnPicPathChanging(string value);
    partial void OnPicPathChanged();
    partial void OnActiveChanging(byte value);
    partial void OnActiveChanged();
    partial void OnUploadTimeChanging(System.DateTime value);
    partial void OnUploadTimeChanged();
    partial void OnspUploadTimeChanging(string value);
    partial void OnspUploadTimeChanged();
    partial void OnspActiveChanging(string value);
    partial void OnspActiveChanged();
    #endregion
	
	public RoomAPic()
	{
		OnCreated();
	}
	
	[Column(Storage="_PicID", DbType="NVarChar(50) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
	public string PicID
	{
		get
		{
			return this._PicID;
		}
		set
		{
			if ((this._PicID != value))
			{
				this.OnPicIDChanging(value);
				this.SendPropertyChanging();
				this._PicID = value;
				this.SendPropertyChanged("PicID");
				this.OnPicIDChanged();
			}
		}
	}
	
	[Column(Storage="_PicPath", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
	public string PicPath
	{
		get
		{
			return this._PicPath;
		}
		set
		{
			if ((this._PicPath != value))
			{
				this.OnPicPathChanging(value);
				this.SendPropertyChanging();
				this._PicPath = value;
				this.SendPropertyChanged("PicPath");
				this.OnPicPathChanged();
			}
		}
	}
	
	[Column(Storage="_Active", DbType="TinyInt NOT NULL")]
	public byte Active
	{
		get
		{
			return this._Active;
		}
		set
		{
			if ((this._Active != value))
			{
				this.OnActiveChanging(value);
				this.SendPropertyChanging();
				this._Active = value;
				this.SendPropertyChanged("Active");
				this.OnActiveChanged();
			}
		}
	}
	
	[Column(Storage="_UploadTime", DbType="DateTime NOT NULL")]
	public System.DateTime UploadTime
	{
		get
		{
			return this._UploadTime;
		}
		set
		{
			if ((this._UploadTime != value))
			{
				this.OnUploadTimeChanging(value);
				this.SendPropertyChanging();
				this._UploadTime = value;
				this.SendPropertyChanged("UploadTime");
				this.OnUploadTimeChanged();
			}
		}
	}
	
	[Column(Storage="_spUploadTime", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
	public string spUploadTime
	{
		get
		{
			return this._spUploadTime;
		}
		set
		{
			if ((this._spUploadTime != value))
			{
				this.OnspUploadTimeChanging(value);
				this.SendPropertyChanging();
				this._spUploadTime = value;
				this.SendPropertyChanged("spUploadTime");
				this.OnspUploadTimeChanged();
			}
		}
	}
	
	[Column(Storage="_spActive", DbType="NVarChar(20) NOT NULL", CanBeNull=false)]
	public string spActive
	{
		get
		{
			return this._spActive;
		}
		set
		{
			if ((this._spActive != value))
			{
				this.OnspActiveChanging(value);
				this.SendPropertyChanging();
				this._spActive = value;
				this.SendPropertyChanged("spActive");
				this.OnspActiveChanged();
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
}

[Table(Name="dbo.RoomBPic")]
public partial class RoomBPic : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private string _PicID;
	
	private string _PicPath;
	
	private byte _Active;
	
	private System.DateTime _UploadTime;
	
	private string _spUploadTime;
	
	private string _spActive;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnPicIDChanging(string value);
    partial void OnPicIDChanged();
    partial void OnPicPathChanging(string value);
    partial void OnPicPathChanged();
    partial void OnActiveChanging(byte value);
    partial void OnActiveChanged();
    partial void OnUploadTimeChanging(System.DateTime value);
    partial void OnUploadTimeChanged();
    partial void OnspUploadTimeChanging(string value);
    partial void OnspUploadTimeChanged();
    partial void OnspActiveChanging(string value);
    partial void OnspActiveChanged();
    #endregion
	
	public RoomBPic()
	{
		OnCreated();
	}
	
	[Column(Storage="_PicID", DbType="NVarChar(50) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
	public string PicID
	{
		get
		{
			return this._PicID;
		}
		set
		{
			if ((this._PicID != value))
			{
				this.OnPicIDChanging(value);
				this.SendPropertyChanging();
				this._PicID = value;
				this.SendPropertyChanged("PicID");
				this.OnPicIDChanged();
			}
		}
	}
	
	[Column(Storage="_PicPath", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
	public string PicPath
	{
		get
		{
			return this._PicPath;
		}
		set
		{
			if ((this._PicPath != value))
			{
				this.OnPicPathChanging(value);
				this.SendPropertyChanging();
				this._PicPath = value;
				this.SendPropertyChanged("PicPath");
				this.OnPicPathChanged();
			}
		}
	}
	
	[Column(Storage="_Active", DbType="TinyInt NOT NULL")]
	public byte Active
	{
		get
		{
			return this._Active;
		}
		set
		{
			if ((this._Active != value))
			{
				this.OnActiveChanging(value);
				this.SendPropertyChanging();
				this._Active = value;
				this.SendPropertyChanged("Active");
				this.OnActiveChanged();
			}
		}
	}
	
	[Column(Storage="_UploadTime", DbType="DateTime NOT NULL")]
	public System.DateTime UploadTime
	{
		get
		{
			return this._UploadTime;
		}
		set
		{
			if ((this._UploadTime != value))
			{
				this.OnUploadTimeChanging(value);
				this.SendPropertyChanging();
				this._UploadTime = value;
				this.SendPropertyChanged("UploadTime");
				this.OnUploadTimeChanged();
			}
		}
	}
	
	[Column(Storage="_spUploadTime", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
	public string spUploadTime
	{
		get
		{
			return this._spUploadTime;
		}
		set
		{
			if ((this._spUploadTime != value))
			{
				this.OnspUploadTimeChanging(value);
				this.SendPropertyChanging();
				this._spUploadTime = value;
				this.SendPropertyChanged("spUploadTime");
				this.OnspUploadTimeChanged();
			}
		}
	}
	
	[Column(Storage="_spActive", DbType="NVarChar(20) NOT NULL", CanBeNull=false)]
	public string spActive
	{
		get
		{
			return this._spActive;
		}
		set
		{
			if ((this._spActive != value))
			{
				this.OnspActiveChanging(value);
				this.SendPropertyChanging();
				this._spActive = value;
				this.SendPropertyChanged("spActive");
				this.OnspActiveChanged();
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
}

[Table(Name="dbo.RoomCPic")]
public partial class RoomCPic : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private string _PicID;
	
	private string _PicPath;
	
	private byte _Active;
	
	private System.DateTime _UploadTime;
	
	private string _spUploadTime;
	
	private string _spActive;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnPicIDChanging(string value);
    partial void OnPicIDChanged();
    partial void OnPicPathChanging(string value);
    partial void OnPicPathChanged();
    partial void OnActiveChanging(byte value);
    partial void OnActiveChanged();
    partial void OnUploadTimeChanging(System.DateTime value);
    partial void OnUploadTimeChanged();
    partial void OnspUploadTimeChanging(string value);
    partial void OnspUploadTimeChanged();
    partial void OnspActiveChanging(string value);
    partial void OnspActiveChanged();
    #endregion
	
	public RoomCPic()
	{
		OnCreated();
	}
	
	[Column(Storage="_PicID", DbType="NVarChar(50) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
	public string PicID
	{
		get
		{
			return this._PicID;
		}
		set
		{
			if ((this._PicID != value))
			{
				this.OnPicIDChanging(value);
				this.SendPropertyChanging();
				this._PicID = value;
				this.SendPropertyChanged("PicID");
				this.OnPicIDChanged();
			}
		}
	}
	
	[Column(Storage="_PicPath", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
	public string PicPath
	{
		get
		{
			return this._PicPath;
		}
		set
		{
			if ((this._PicPath != value))
			{
				this.OnPicPathChanging(value);
				this.SendPropertyChanging();
				this._PicPath = value;
				this.SendPropertyChanged("PicPath");
				this.OnPicPathChanged();
			}
		}
	}
	
	[Column(Storage="_Active", DbType="TinyInt NOT NULL")]
	public byte Active
	{
		get
		{
			return this._Active;
		}
		set
		{
			if ((this._Active != value))
			{
				this.OnActiveChanging(value);
				this.SendPropertyChanging();
				this._Active = value;
				this.SendPropertyChanged("Active");
				this.OnActiveChanged();
			}
		}
	}
	
	[Column(Storage="_UploadTime", DbType="DateTime NOT NULL")]
	public System.DateTime UploadTime
	{
		get
		{
			return this._UploadTime;
		}
		set
		{
			if ((this._UploadTime != value))
			{
				this.OnUploadTimeChanging(value);
				this.SendPropertyChanging();
				this._UploadTime = value;
				this.SendPropertyChanged("UploadTime");
				this.OnUploadTimeChanged();
			}
		}
	}
	
	[Column(Storage="_spUploadTime", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
	public string spUploadTime
	{
		get
		{
			return this._spUploadTime;
		}
		set
		{
			if ((this._spUploadTime != value))
			{
				this.OnspUploadTimeChanging(value);
				this.SendPropertyChanging();
				this._spUploadTime = value;
				this.SendPropertyChanged("spUploadTime");
				this.OnspUploadTimeChanged();
			}
		}
	}
	
	[Column(Storage="_spActive", DbType="NVarChar(20) NOT NULL", CanBeNull=false)]
	public string spActive
	{
		get
		{
			return this._spActive;
		}
		set
		{
			if ((this._spActive != value))
			{
				this.OnspActiveChanging(value);
				this.SendPropertyChanging();
				this._spActive = value;
				this.SendPropertyChanged("spActive");
				this.OnspActiveChanged();
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
}

[Table(Name="dbo.Song")]
public partial class Song : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private string _SongID;
	
	private string _ProIDParent;
	
	private string _SongNameHe;
	
	private string _SongNameEn;
	
	private string _YouTubePath;
	
	private byte _Active;
	
	private System.DateTime _UploadTime;
	
	private string _spUploadTime;
	
	private string _spActive;
	
	private EntityRef<Production> _Production;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnSongIDChanging(string value);
    partial void OnSongIDChanged();
    partial void OnProIDParentChanging(string value);
    partial void OnProIDParentChanged();
    partial void OnSongNameHeChanging(string value);
    partial void OnSongNameHeChanged();
    partial void OnSongNameEnChanging(string value);
    partial void OnSongNameEnChanged();
    partial void OnYouTubePathChanging(string value);
    partial void OnYouTubePathChanged();
    partial void OnActiveChanging(byte value);
    partial void OnActiveChanged();
    partial void OnUploadTimeChanging(System.DateTime value);
    partial void OnUploadTimeChanged();
    partial void OnspUploadTimeChanging(string value);
    partial void OnspUploadTimeChanged();
    partial void OnspActiveChanging(string value);
    partial void OnspActiveChanged();
    #endregion
	
	public Song()
	{
		this._Production = default(EntityRef<Production>);
		OnCreated();
	}
	
	[Column(Storage="_SongID", DbType="NVarChar(50) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
	public string SongID
	{
		get
		{
			return this._SongID;
		}
		set
		{
			if ((this._SongID != value))
			{
				this.OnSongIDChanging(value);
				this.SendPropertyChanging();
				this._SongID = value;
				this.SendPropertyChanged("SongID");
				this.OnSongIDChanged();
			}
		}
	}
	
	[Column(Storage="_ProIDParent", DbType="NVarChar(50) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
	public string ProIDParent
	{
		get
		{
			return this._ProIDParent;
		}
		set
		{
			if ((this._ProIDParent != value))
			{
				if (this._Production.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnProIDParentChanging(value);
				this.SendPropertyChanging();
				this._ProIDParent = value;
				this.SendPropertyChanged("ProIDParent");
				this.OnProIDParentChanged();
			}
		}
	}
	
	[Column(Storage="_SongNameHe", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
	public string SongNameHe
	{
		get
		{
			return this._SongNameHe;
		}
		set
		{
			if ((this._SongNameHe != value))
			{
				this.OnSongNameHeChanging(value);
				this.SendPropertyChanging();
				this._SongNameHe = value;
				this.SendPropertyChanged("SongNameHe");
				this.OnSongNameHeChanged();
			}
		}
	}
	
	[Column(Storage="_SongNameEn", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
	public string SongNameEn
	{
		get
		{
			return this._SongNameEn;
		}
		set
		{
			if ((this._SongNameEn != value))
			{
				this.OnSongNameEnChanging(value);
				this.SendPropertyChanging();
				this._SongNameEn = value;
				this.SendPropertyChanged("SongNameEn");
				this.OnSongNameEnChanged();
			}
		}
	}
	
	[Column(Storage="_YouTubePath", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
	public string YouTubePath
	{
		get
		{
			return this._YouTubePath;
		}
		set
		{
			if ((this._YouTubePath != value))
			{
				this.OnYouTubePathChanging(value);
				this.SendPropertyChanging();
				this._YouTubePath = value;
				this.SendPropertyChanged("YouTubePath");
				this.OnYouTubePathChanged();
			}
		}
	}
	
	[Column(Storage="_Active", DbType="TinyInt NOT NULL")]
	public byte Active
	{
		get
		{
			return this._Active;
		}
		set
		{
			if ((this._Active != value))
			{
				this.OnActiveChanging(value);
				this.SendPropertyChanging();
				this._Active = value;
				this.SendPropertyChanged("Active");
				this.OnActiveChanged();
			}
		}
	}
	
	[Column(Storage="_UploadTime", DbType="DateTime NOT NULL")]
	public System.DateTime UploadTime
	{
		get
		{
			return this._UploadTime;
		}
		set
		{
			if ((this._UploadTime != value))
			{
				this.OnUploadTimeChanging(value);
				this.SendPropertyChanging();
				this._UploadTime = value;
				this.SendPropertyChanged("UploadTime");
				this.OnUploadTimeChanged();
			}
		}
	}
	
	[Column(Storage="_spUploadTime", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
	public string spUploadTime
	{
		get
		{
			return this._spUploadTime;
		}
		set
		{
			if ((this._spUploadTime != value))
			{
				this.OnspUploadTimeChanging(value);
				this.SendPropertyChanging();
				this._spUploadTime = value;
				this.SendPropertyChanged("spUploadTime");
				this.OnspUploadTimeChanged();
			}
		}
	}
	
	[Column(Storage="_spActive", DbType="NVarChar(20) NOT NULL", CanBeNull=false)]
	public string spActive
	{
		get
		{
			return this._spActive;
		}
		set
		{
			if ((this._spActive != value))
			{
				this.OnspActiveChanging(value);
				this.SendPropertyChanging();
				this._spActive = value;
				this.SendPropertyChanged("spActive");
				this.OnspActiveChanged();
			}
		}
	}
	
	[Association(Name="Production_Song", Storage="_Production", ThisKey="ProIDParent", OtherKey="ProID", IsForeignKey=true)]
	public Production Production
	{
		get
		{
			return this._Production.Entity;
		}
		set
		{
			Production previousValue = this._Production.Entity;
			if (((previousValue != value) 
						|| (this._Production.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._Production.Entity = null;
					previousValue.Songs.Remove(this);
				}
				this._Production.Entity = value;
				if ((value != null))
				{
					value.Songs.Add(this);
					this._ProIDParent = value.ProID;
				}
				else
				{
					this._ProIDParent = default(string);
				}
				this.SendPropertyChanged("Production");
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
}

[Table(Name="dbo.StaffDudu")]
public partial class StaffDudu : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private string _StaffDuduID;
	
	private string _DuduTitleHe;
	
	private string _DuduTitleEn;
	
	private string _DuduTextHe;
	
	private string _DuduTextEn;
	
	private System.DateTime _LastUpdate;
	
	private string _spLastUpdate;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnStaffDuduIDChanging(string value);
    partial void OnStaffDuduIDChanged();
    partial void OnDuduTitleHeChanging(string value);
    partial void OnDuduTitleHeChanged();
    partial void OnDuduTitleEnChanging(string value);
    partial void OnDuduTitleEnChanged();
    partial void OnDuduTextHeChanging(string value);
    partial void OnDuduTextHeChanged();
    partial void OnDuduTextEnChanging(string value);
    partial void OnDuduTextEnChanged();
    partial void OnLastUpdateChanging(System.DateTime value);
    partial void OnLastUpdateChanged();
    partial void OnspLastUpdateChanging(string value);
    partial void OnspLastUpdateChanged();
    #endregion
	
	public StaffDudu()
	{
		OnCreated();
	}
	
	[Column(Storage="_StaffDuduID", DbType="NVarChar(50) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
	public string StaffDuduID
	{
		get
		{
			return this._StaffDuduID;
		}
		set
		{
			if ((this._StaffDuduID != value))
			{
				this.OnStaffDuduIDChanging(value);
				this.SendPropertyChanging();
				this._StaffDuduID = value;
				this.SendPropertyChanged("StaffDuduID");
				this.OnStaffDuduIDChanged();
			}
		}
	}
	
	[Column(Storage="_DuduTitleHe", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
	public string DuduTitleHe
	{
		get
		{
			return this._DuduTitleHe;
		}
		set
		{
			if ((this._DuduTitleHe != value))
			{
				this.OnDuduTitleHeChanging(value);
				this.SendPropertyChanging();
				this._DuduTitleHe = value;
				this.SendPropertyChanged("DuduTitleHe");
				this.OnDuduTitleHeChanged();
			}
		}
	}
	
	[Column(Storage="_DuduTitleEn", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
	public string DuduTitleEn
	{
		get
		{
			return this._DuduTitleEn;
		}
		set
		{
			if ((this._DuduTitleEn != value))
			{
				this.OnDuduTitleEnChanging(value);
				this.SendPropertyChanging();
				this._DuduTitleEn = value;
				this.SendPropertyChanged("DuduTitleEn");
				this.OnDuduTitleEnChanged();
			}
		}
	}
	
	[Column(Storage="_DuduTextHe", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
	public string DuduTextHe
	{
		get
		{
			return this._DuduTextHe;
		}
		set
		{
			if ((this._DuduTextHe != value))
			{
				this.OnDuduTextHeChanging(value);
				this.SendPropertyChanging();
				this._DuduTextHe = value;
				this.SendPropertyChanged("DuduTextHe");
				this.OnDuduTextHeChanged();
			}
		}
	}
	
	[Column(Storage="_DuduTextEn", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
	public string DuduTextEn
	{
		get
		{
			return this._DuduTextEn;
		}
		set
		{
			if ((this._DuduTextEn != value))
			{
				this.OnDuduTextEnChanging(value);
				this.SendPropertyChanging();
				this._DuduTextEn = value;
				this.SendPropertyChanged("DuduTextEn");
				this.OnDuduTextEnChanged();
			}
		}
	}
	
	[Column(Storage="_LastUpdate", DbType="DateTime NOT NULL")]
	public System.DateTime LastUpdate
	{
		get
		{
			return this._LastUpdate;
		}
		set
		{
			if ((this._LastUpdate != value))
			{
				this.OnLastUpdateChanging(value);
				this.SendPropertyChanging();
				this._LastUpdate = value;
				this.SendPropertyChanged("LastUpdate");
				this.OnLastUpdateChanged();
			}
		}
	}
	
	[Column(Storage="_spLastUpdate", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
	public string spLastUpdate
	{
		get
		{
			return this._spLastUpdate;
		}
		set
		{
			if ((this._spLastUpdate != value))
			{
				this.OnspLastUpdateChanging(value);
				this.SendPropertyChanging();
				this._spLastUpdate = value;
				this.SendPropertyChanged("spLastUpdate");
				this.OnspLastUpdateChanged();
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
}

[Table(Name="dbo.StaffItay")]
public partial class StaffItay : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private string _StaffItayID;
	
	private string _ItayTitleHe;
	
	private string _ItayTitleEn;
	
	private string _ItayTextHe;
	
	private string _ItayTextEn;
	
	private System.DateTime _LastUpdate;
	
	private string _spLastUpdate;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnStaffItayIDChanging(string value);
    partial void OnStaffItayIDChanged();
    partial void OnItayTitleHeChanging(string value);
    partial void OnItayTitleHeChanged();
    partial void OnItayTitleEnChanging(string value);
    partial void OnItayTitleEnChanged();
    partial void OnItayTextHeChanging(string value);
    partial void OnItayTextHeChanged();
    partial void OnItayTextEnChanging(string value);
    partial void OnItayTextEnChanged();
    partial void OnLastUpdateChanging(System.DateTime value);
    partial void OnLastUpdateChanged();
    partial void OnspLastUpdateChanging(string value);
    partial void OnspLastUpdateChanged();
    #endregion
	
	public StaffItay()
	{
		OnCreated();
	}
	
	[Column(Storage="_StaffItayID", DbType="NVarChar(50) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
	public string StaffItayID
	{
		get
		{
			return this._StaffItayID;
		}
		set
		{
			if ((this._StaffItayID != value))
			{
				this.OnStaffItayIDChanging(value);
				this.SendPropertyChanging();
				this._StaffItayID = value;
				this.SendPropertyChanged("StaffItayID");
				this.OnStaffItayIDChanged();
			}
		}
	}
	
	[Column(Storage="_ItayTitleHe", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
	public string ItayTitleHe
	{
		get
		{
			return this._ItayTitleHe;
		}
		set
		{
			if ((this._ItayTitleHe != value))
			{
				this.OnItayTitleHeChanging(value);
				this.SendPropertyChanging();
				this._ItayTitleHe = value;
				this.SendPropertyChanged("ItayTitleHe");
				this.OnItayTitleHeChanged();
			}
		}
	}
	
	[Column(Storage="_ItayTitleEn", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
	public string ItayTitleEn
	{
		get
		{
			return this._ItayTitleEn;
		}
		set
		{
			if ((this._ItayTitleEn != value))
			{
				this.OnItayTitleEnChanging(value);
				this.SendPropertyChanging();
				this._ItayTitleEn = value;
				this.SendPropertyChanged("ItayTitleEn");
				this.OnItayTitleEnChanged();
			}
		}
	}
	
	[Column(Storage="_ItayTextHe", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
	public string ItayTextHe
	{
		get
		{
			return this._ItayTextHe;
		}
		set
		{
			if ((this._ItayTextHe != value))
			{
				this.OnItayTextHeChanging(value);
				this.SendPropertyChanging();
				this._ItayTextHe = value;
				this.SendPropertyChanged("ItayTextHe");
				this.OnItayTextHeChanged();
			}
		}
	}
	
	[Column(Storage="_ItayTextEn", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
	public string ItayTextEn
	{
		get
		{
			return this._ItayTextEn;
		}
		set
		{
			if ((this._ItayTextEn != value))
			{
				this.OnItayTextEnChanging(value);
				this.SendPropertyChanging();
				this._ItayTextEn = value;
				this.SendPropertyChanged("ItayTextEn");
				this.OnItayTextEnChanged();
			}
		}
	}
	
	[Column(Storage="_LastUpdate", DbType="DateTime NOT NULL")]
	public System.DateTime LastUpdate
	{
		get
		{
			return this._LastUpdate;
		}
		set
		{
			if ((this._LastUpdate != value))
			{
				this.OnLastUpdateChanging(value);
				this.SendPropertyChanging();
				this._LastUpdate = value;
				this.SendPropertyChanged("LastUpdate");
				this.OnLastUpdateChanged();
			}
		}
	}
	
	[Column(Storage="_spLastUpdate", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
	public string spLastUpdate
	{
		get
		{
			return this._spLastUpdate;
		}
		set
		{
			if ((this._spLastUpdate != value))
			{
				this.OnspLastUpdateChanging(value);
				this.SendPropertyChanging();
				this._spLastUpdate = value;
				this.SendPropertyChanged("spLastUpdate");
				this.OnspLastUpdateChanged();
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
}

[Table(Name="dbo.StaffNapo")]
public partial class StaffNapo : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private string _StaffNapoID;
	
	private string _NapoTitleHe;
	
	private string _NapoTitleEn;
	
	private string _NapoTextHe;
	
	private string _NapoTextEn;
	
	private System.DateTime _LastUpdate;
	
	private string _spLastUpdate;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnStaffNapoIDChanging(string value);
    partial void OnStaffNapoIDChanged();
    partial void OnNapoTitleHeChanging(string value);
    partial void OnNapoTitleHeChanged();
    partial void OnNapoTitleEnChanging(string value);
    partial void OnNapoTitleEnChanged();
    partial void OnNapoTextHeChanging(string value);
    partial void OnNapoTextHeChanged();
    partial void OnNapoTextEnChanging(string value);
    partial void OnNapoTextEnChanged();
    partial void OnLastUpdateChanging(System.DateTime value);
    partial void OnLastUpdateChanged();
    partial void OnspLastUpdateChanging(string value);
    partial void OnspLastUpdateChanged();
    #endregion
	
	public StaffNapo()
	{
		OnCreated();
	}
	
	[Column(Storage="_StaffNapoID", DbType="NVarChar(50) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
	public string StaffNapoID
	{
		get
		{
			return this._StaffNapoID;
		}
		set
		{
			if ((this._StaffNapoID != value))
			{
				this.OnStaffNapoIDChanging(value);
				this.SendPropertyChanging();
				this._StaffNapoID = value;
				this.SendPropertyChanged("StaffNapoID");
				this.OnStaffNapoIDChanged();
			}
		}
	}
	
	[Column(Storage="_NapoTitleHe", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
	public string NapoTitleHe
	{
		get
		{
			return this._NapoTitleHe;
		}
		set
		{
			if ((this._NapoTitleHe != value))
			{
				this.OnNapoTitleHeChanging(value);
				this.SendPropertyChanging();
				this._NapoTitleHe = value;
				this.SendPropertyChanged("NapoTitleHe");
				this.OnNapoTitleHeChanged();
			}
		}
	}
	
	[Column(Storage="_NapoTitleEn", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
	public string NapoTitleEn
	{
		get
		{
			return this._NapoTitleEn;
		}
		set
		{
			if ((this._NapoTitleEn != value))
			{
				this.OnNapoTitleEnChanging(value);
				this.SendPropertyChanging();
				this._NapoTitleEn = value;
				this.SendPropertyChanged("NapoTitleEn");
				this.OnNapoTitleEnChanged();
			}
		}
	}
	
	[Column(Storage="_NapoTextHe", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
	public string NapoTextHe
	{
		get
		{
			return this._NapoTextHe;
		}
		set
		{
			if ((this._NapoTextHe != value))
			{
				this.OnNapoTextHeChanging(value);
				this.SendPropertyChanging();
				this._NapoTextHe = value;
				this.SendPropertyChanged("NapoTextHe");
				this.OnNapoTextHeChanged();
			}
		}
	}
	
	[Column(Storage="_NapoTextEn", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
	public string NapoTextEn
	{
		get
		{
			return this._NapoTextEn;
		}
		set
		{
			if ((this._NapoTextEn != value))
			{
				this.OnNapoTextEnChanging(value);
				this.SendPropertyChanging();
				this._NapoTextEn = value;
				this.SendPropertyChanged("NapoTextEn");
				this.OnNapoTextEnChanged();
			}
		}
	}
	
	[Column(Storage="_LastUpdate", DbType="DateTime NOT NULL")]
	public System.DateTime LastUpdate
	{
		get
		{
			return this._LastUpdate;
		}
		set
		{
			if ((this._LastUpdate != value))
			{
				this.OnLastUpdateChanging(value);
				this.SendPropertyChanging();
				this._LastUpdate = value;
				this.SendPropertyChanged("LastUpdate");
				this.OnLastUpdateChanged();
			}
		}
	}
	
	[Column(Storage="_spLastUpdate", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
	public string spLastUpdate
	{
		get
		{
			return this._spLastUpdate;
		}
		set
		{
			if ((this._spLastUpdate != value))
			{
				this.OnspLastUpdateChanging(value);
				this.SendPropertyChanging();
				this._spLastUpdate = value;
				this.SendPropertyChanged("spLastUpdate");
				this.OnspLastUpdateChanged();
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
}

[Table(Name="dbo.StaffPerri")]
public partial class StaffPerri : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private string _StaffPerriID;
	
	private string _PerriTitleHe;
	
	private string _PerriTitleEn;
	
	private string _PerriTextHe;
	
	private string _PerriTextEn;
	
	private System.DateTime _LastUpdate;
	
	private string _spLastUpdate;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnStaffPerriIDChanging(string value);
    partial void OnStaffPerriIDChanged();
    partial void OnPerriTitleHeChanging(string value);
    partial void OnPerriTitleHeChanged();
    partial void OnPerriTitleEnChanging(string value);
    partial void OnPerriTitleEnChanged();
    partial void OnPerriTextHeChanging(string value);
    partial void OnPerriTextHeChanged();
    partial void OnPerriTextEnChanging(string value);
    partial void OnPerriTextEnChanged();
    partial void OnLastUpdateChanging(System.DateTime value);
    partial void OnLastUpdateChanged();
    partial void OnspLastUpdateChanging(string value);
    partial void OnspLastUpdateChanged();
    #endregion
	
	public StaffPerri()
	{
		OnCreated();
	}
	
	[Column(Storage="_StaffPerriID", DbType="NVarChar(50) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
	public string StaffPerriID
	{
		get
		{
			return this._StaffPerriID;
		}
		set
		{
			if ((this._StaffPerriID != value))
			{
				this.OnStaffPerriIDChanging(value);
				this.SendPropertyChanging();
				this._StaffPerriID = value;
				this.SendPropertyChanged("StaffPerriID");
				this.OnStaffPerriIDChanged();
			}
		}
	}
	
	[Column(Storage="_PerriTitleHe", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
	public string PerriTitleHe
	{
		get
		{
			return this._PerriTitleHe;
		}
		set
		{
			if ((this._PerriTitleHe != value))
			{
				this.OnPerriTitleHeChanging(value);
				this.SendPropertyChanging();
				this._PerriTitleHe = value;
				this.SendPropertyChanged("PerriTitleHe");
				this.OnPerriTitleHeChanged();
			}
		}
	}
	
	[Column(Storage="_PerriTitleEn", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
	public string PerriTitleEn
	{
		get
		{
			return this._PerriTitleEn;
		}
		set
		{
			if ((this._PerriTitleEn != value))
			{
				this.OnPerriTitleEnChanging(value);
				this.SendPropertyChanging();
				this._PerriTitleEn = value;
				this.SendPropertyChanged("PerriTitleEn");
				this.OnPerriTitleEnChanged();
			}
		}
	}
	
	[Column(Storage="_PerriTextHe", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
	public string PerriTextHe
	{
		get
		{
			return this._PerriTextHe;
		}
		set
		{
			if ((this._PerriTextHe != value))
			{
				this.OnPerriTextHeChanging(value);
				this.SendPropertyChanging();
				this._PerriTextHe = value;
				this.SendPropertyChanged("PerriTextHe");
				this.OnPerriTextHeChanged();
			}
		}
	}
	
	[Column(Storage="_PerriTextEn", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
	public string PerriTextEn
	{
		get
		{
			return this._PerriTextEn;
		}
		set
		{
			if ((this._PerriTextEn != value))
			{
				this.OnPerriTextEnChanging(value);
				this.SendPropertyChanging();
				this._PerriTextEn = value;
				this.SendPropertyChanged("PerriTextEn");
				this.OnPerriTextEnChanged();
			}
		}
	}
	
	[Column(Storage="_LastUpdate", DbType="DateTime NOT NULL")]
	public System.DateTime LastUpdate
	{
		get
		{
			return this._LastUpdate;
		}
		set
		{
			if ((this._LastUpdate != value))
			{
				this.OnLastUpdateChanging(value);
				this.SendPropertyChanging();
				this._LastUpdate = value;
				this.SendPropertyChanged("LastUpdate");
				this.OnLastUpdateChanged();
			}
		}
	}
	
	[Column(Storage="_spLastUpdate", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
	public string spLastUpdate
	{
		get
		{
			return this._spLastUpdate;
		}
		set
		{
			if ((this._spLastUpdate != value))
			{
				this.OnspLastUpdateChanging(value);
				this.SendPropertyChanging();
				this._spLastUpdate = value;
				this.SendPropertyChanged("spLastUpdate");
				this.OnspLastUpdateChanged();
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
}

[Table(Name="dbo.StudioAbout")]
public partial class StudioAbout : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private string _StudioAboutID;
	
	private string _AboutHe;
	
	private string _AboutEn;
	
	private System.DateTime _LastUpdate;
	
	private string _spLastUpdate;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnStudioAboutIDChanging(string value);
    partial void OnStudioAboutIDChanged();
    partial void OnAboutHeChanging(string value);
    partial void OnAboutHeChanged();
    partial void OnAboutEnChanging(string value);
    partial void OnAboutEnChanged();
    partial void OnLastUpdateChanging(System.DateTime value);
    partial void OnLastUpdateChanged();
    partial void OnspLastUpdateChanging(string value);
    partial void OnspLastUpdateChanged();
    #endregion
	
	public StudioAbout()
	{
		OnCreated();
	}
	
	[Column(Storage="_StudioAboutID", DbType="NVarChar(50) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
	public string StudioAboutID
	{
		get
		{
			return this._StudioAboutID;
		}
		set
		{
			if ((this._StudioAboutID != value))
			{
				this.OnStudioAboutIDChanging(value);
				this.SendPropertyChanging();
				this._StudioAboutID = value;
				this.SendPropertyChanged("StudioAboutID");
				this.OnStudioAboutIDChanged();
			}
		}
	}
	
	[Column(Storage="_AboutHe", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
	public string AboutHe
	{
		get
		{
			return this._AboutHe;
		}
		set
		{
			if ((this._AboutHe != value))
			{
				this.OnAboutHeChanging(value);
				this.SendPropertyChanging();
				this._AboutHe = value;
				this.SendPropertyChanged("AboutHe");
				this.OnAboutHeChanged();
			}
		}
	}
	
	[Column(Storage="_AboutEn", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
	public string AboutEn
	{
		get
		{
			return this._AboutEn;
		}
		set
		{
			if ((this._AboutEn != value))
			{
				this.OnAboutEnChanging(value);
				this.SendPropertyChanging();
				this._AboutEn = value;
				this.SendPropertyChanged("AboutEn");
				this.OnAboutEnChanged();
			}
		}
	}
	
	[Column(Storage="_LastUpdate", DbType="DateTime NOT NULL")]
	public System.DateTime LastUpdate
	{
		get
		{
			return this._LastUpdate;
		}
		set
		{
			if ((this._LastUpdate != value))
			{
				this.OnLastUpdateChanging(value);
				this.SendPropertyChanging();
				this._LastUpdate = value;
				this.SendPropertyChanged("LastUpdate");
				this.OnLastUpdateChanged();
			}
		}
	}
	
	[Column(Storage="_spLastUpdate", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
	public string spLastUpdate
	{
		get
		{
			return this._spLastUpdate;
		}
		set
		{
			if ((this._spLastUpdate != value))
			{
				this.OnspLastUpdateChanging(value);
				this.SendPropertyChanging();
				this._spLastUpdate = value;
				this.SendPropertyChanged("spLastUpdate");
				this.OnspLastUpdateChanged();
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
}
#pragma warning restore 1591
